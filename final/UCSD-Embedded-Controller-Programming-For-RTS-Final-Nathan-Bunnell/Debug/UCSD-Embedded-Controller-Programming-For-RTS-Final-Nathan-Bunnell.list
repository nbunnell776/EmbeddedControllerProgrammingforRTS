
UCSD-Embedded-Controller-Programming-For-RTS-Final-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e98  08006e98  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea0  08006ea0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  20000070  08006f18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  08006f18  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff22  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385d  00000000  00000000  0003ffc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  00043820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ac0  00000000  00000000  00045448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029764  00000000  00000000  00046f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e710  00000000  00000000  0007066c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe6fe  00000000  00000000  0008ed7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018d47a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007df4  00000000  00000000  0018d4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c68 	.word	0x08006c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006c68 	.word	0x08006c68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_UART_TxCpltCallback>:
static bool tim3InterruptComplete = 0;
uint8_t tim3Accrual = 0;

// Define the IT callback functions
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	// Set our complete flag
	txInterruptComplete = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_UART_TxCpltCallback+0x1c>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c

08000598 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	// Set our complete flag
	rxInterruptComplete = 1;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <HAL_UART_RxCpltCallback+0x1c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000008d 	.word	0x2000008d

080005b8 <logMsg>:

// logMsg function prints a string, _out, to the console over the specified UART
void logMsg(UART_HandleTypeDef *huart, char *_out)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09c      	sub	sp, #112	; 0x70
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	// Clear the complete flag
	txInterruptComplete = 0;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <logMsg+0x6c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

	char buffer[100] = {0};		// Large char buffer for string printing
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2260      	movs	r2, #96	; 0x60
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f005 fefd 	bl	80063d4 <memset>
    snprintf(buffer, sizeof(buffer), "%s\n", _out);
 80005da:	f107 000c 	add.w	r0, r7, #12
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	4a11      	ldr	r2, [pc, #68]	; (8000628 <logMsg+0x70>)
 80005e2:	2164      	movs	r1, #100	; 0x64
 80005e4:	f005 fefe 	bl	80063e4 <sniprintf>
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) buffer, strlen(buffer));
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdef 	bl	80001d0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	480b      	ldr	r0, [pc, #44]	; (800062c <logMsg+0x74>)
 80005fe:	f004 fb6b 	bl	8004cd8 <HAL_UART_Transmit_IT>
    //HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);

    // Loiter until the IT complete flag is set
	while (!txInterruptComplete)
 8000602:	e002      	b.n	800060a <logMsg+0x52>
	{
		HAL_Delay(10);
 8000604:	200a      	movs	r0, #10
 8000606:	f001 fb0f 	bl	8001c28 <HAL_Delay>
	while (!txInterruptComplete)
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <logMsg+0x6c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f5      	bne.n	8000604 <logMsg+0x4c>
	}
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3770      	adds	r7, #112	; 0x70
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000008c 	.word	0x2000008c
 8000628:	08006c80 	.word	0x08006c80
 800062c:	20000688 	.word	0x20000688

08000630 <logGetMsg>:

// logMsg function returns a char, c, over the specified UART
char logGetMsg(UART_HandleTypeDef *huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	// Clear the complete flag
	rxInterruptComplete = 0;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <logGetMsg+0x40>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]

  char c = '\0';				// Set default return value to NULL
 800063e:	2300      	movs	r3, #0
 8000640:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &c, sizeof(c));
 8000642:	f107 030f 	add.w	r3, r7, #15
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <logGetMsg+0x44>)
 800064c:	f004 fba0 	bl	8004d90 <HAL_UART_Receive_IT>

  // Loiter until the IT complete flag is set
	while (!rxInterruptComplete)
 8000650:	e002      	b.n	8000658 <logGetMsg+0x28>
	{
		HAL_Delay(10);
 8000652:	200a      	movs	r0, #10
 8000654:	f001 fae8 	bl	8001c28 <HAL_Delay>
	while (!rxInterruptComplete)
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <logGetMsg+0x40>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f083 0301 	eor.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1f5      	bne.n	8000652 <logGetMsg+0x22>
	}

	return c;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000008d 	.word	0x2000008d
 8000674:	20000688 	.word	0x20000688

08000678 <FMC_IRQn_Init>:

// Added a dedicated init function here as MX_GPIO_Init() would
//  overwrite any added code after device cfg changes
void FMC_IRQn_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
	// Enable FMC interrupt
	uint32_t IRQn = FMC_IRQn;
 800067e:	2330      	movs	r3, #48	; 0x30
 8000680:	60fb      	str	r3, [r7, #12]
	uint32_t wordOffset = (IRQn >> 5);			// IRQn / 32
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	095b      	lsrs	r3, r3, #5
 8000686:	60bb      	str	r3, [r7, #8]
	uint32_t bitOffset = (IRQn & 0x1f);			// IRQn mod 32
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f003 031f 	and.w	r3, r3, #31
 800068e:	607b      	str	r3, [r7, #4]
	NVIC->ISER[wordOffset] = (1 << bitOffset);	// Enable INT
 8000690:	2201      	movs	r2, #1
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <FMC_IRQn_Init+0x38>)
 800069a:	4619      	mov	r1, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <FMC_IRQ_CpltCallback>:

// Callback function for the FMC interrupt
//  Toggle an LED to give indication of int and
//  set flag to be used in main routine
void FMC_IRQ_CpltCallback(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80006b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <FMC_IRQ_CpltCallback+0x18>)
 80006be:	f001 ff37 	bl	8002530 <HAL_GPIO_TogglePin>
	swInterruptComplete = 1;
 80006c2:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <FMC_IRQ_CpltCallback+0x1c>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	48000400 	.word	0x48000400
 80006d0:	2000008e 	.word	0x2000008e

080006d4 <myDelay1>:

// NOTE: APB1 Timer clocks prescaled down to 10MHz in Clock Config tool
void myDelay1(uint32_t mSec)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	if (mSec == 0)	// Dummy check that we have a real value
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d02a      	beq.n	8000738 <myDelay1+0x64>
		return;

	TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable for config
 80006e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ec:	f023 0301 	bic.w	r3, r3, #1
 80006f0:	6013      	str	r3, [r2, #0]
	TIM2->SR = 0;				// Clear status reg
 80006f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
	TIM2->CNT = 0;				// Clear accrual
 80006fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->PSC = 9999;			// PSC = (10MHz / 1KHz) - 1
 8000702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000706:	f242 720f 	movw	r2, #9999	; 0x270f
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = mSec - 1;		// Delay - 1
 800070c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;	// Re-enable timer
 8000716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6013      	str	r3, [r2, #0]

	while ((TIM2->SR & TIM_SR_UIF) == 0);	// Loop until the UIF flag is set in the SR
 8000726:	bf00      	nop
 8000728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0f8      	beq.n	8000728 <myDelay1+0x54>
 8000736:	e000      	b.n	800073a <myDelay1+0x66>
		return;
 8000738:	bf00      	nop



}
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <myDelay2>:

// Simple loop implementation to delay for a give number of mSec
void myDelay2(uint32_t mSec)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 80000;	// LOAD * (1/80MHz) = target of 1 mSec
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <myDelay2+0x58>)
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <myDelay2+0x5c>)
 8000750:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;		// Clear value
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <myDelay2+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;	// Set clock source to internal
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <myDelay2+0x58>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <myDelay2+0x58>)
 800075e:	f043 0302 	orr.w	r3, r3, #2
 8000762:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <myDelay2+0x58>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0c      	ldr	r2, [pc, #48]	; (800079c <myDelay2+0x58>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6013      	str	r3, [r2, #0]


	while (mSec > 0)
 8000770:	e009      	b.n	8000786 <myDelay2+0x42>
	{
		while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0)
 8000772:	bf00      	nop
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <myDelay2+0x58>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f9      	beq.n	8000774 <myDelay2+0x30>
			{
				;	// Loiter while the CountFlag in bit 16 is not set
			}
		mSec--;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
	while (mSec > 0)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1f2      	bne.n	8000772 <myDelay2+0x2e>
	}

}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010
 80007a0:	00013880 	.word	0x00013880

080007a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d108      	bne.n	80007c8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		tim3Accrual++;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007c0:	701a      	strb	r2, [r3, #0]
		tim3InterruptComplete = 1;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
	}
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	40000400 	.word	0x40000400
 80007d8:	20000090 	.word	0x20000090
 80007dc:	2000008f 	.word	0x2000008f

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	; 0x38
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f001 f9aa 	bl	8001b3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f969 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f000 fbd3 	bl	8000f98 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80007f2:	f000 f9c9 	bl	8000b88 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80007f6:	f000 f9ff 	bl	8000bf8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80007fa:	f000 fa3d 	bl	8000c78 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80007fe:	f000 fa61 	bl	8000cc4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000802:	f000 fb3b 	bl	8000e7c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000806:	f000 fb69 	bl	8000edc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800080a:	f000 fb97 	bl	8000f3c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800080e:	f000 fa97 	bl	8000d40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000812:	f000 fae3 	bl	8000ddc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Init SW interrupt
  FMC_IRQn_Init();
 8000816:	f7ff ff2f 	bl	8000678 <FMC_IRQn_Init>

  // Init the overflow interrupt for TIM3
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE );
 800081a:	4b91      	ldr	r3, [pc, #580]	; (8000a60 <main+0x280>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	4b8f      	ldr	r3, [pc, #572]	; (8000a60 <main+0x280>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f042 0201 	orr.w	r2, r2, #1
 8000828:	60da      	str	r2, [r3, #12]

  // Header info with instructions for user at console
  logMsg(&huart1, "Welcome to Embedded controller programming");
 800082a:	498e      	ldr	r1, [pc, #568]	; (8000a64 <main+0x284>)
 800082c:	488e      	ldr	r0, [pc, #568]	; (8000a68 <main+0x288>)
 800082e:	f7ff fec3 	bl	80005b8 <logMsg>
  logMsg(&huart1, " - Enter g for toggling Green LED");
 8000832:	498e      	ldr	r1, [pc, #568]	; (8000a6c <main+0x28c>)
 8000834:	488c      	ldr	r0, [pc, #560]	; (8000a68 <main+0x288>)
 8000836:	f7ff febf 	bl	80005b8 <logMsg>
  logMsg(&huart1, " - Enter b for toggling Blue LED");
 800083a:	498d      	ldr	r1, [pc, #564]	; (8000a70 <main+0x290>)
 800083c:	488a      	ldr	r0, [pc, #552]	; (8000a68 <main+0x288>)
 800083e:	f7ff febb 	bl	80005b8 <logMsg>
  logMsg(&huart1, " - Enter s to generate SW interrupt");
 8000842:	498c      	ldr	r1, [pc, #560]	; (8000a74 <main+0x294>)
 8000844:	4888      	ldr	r0, [pc, #544]	; (8000a68 <main+0x288>)
 8000846:	f7ff feb7 	bl	80005b8 <logMsg>
  logMsg(&huart1, " - Enter t to start timer 3");
 800084a:	498b      	ldr	r1, [pc, #556]	; (8000a78 <main+0x298>)
 800084c:	4886      	ldr	r0, [pc, #536]	; (8000a68 <main+0x288>)
 800084e:	f7ff feb3 	bl	80005b8 <logMsg>
  logMsg(&huart1, " - Enter w to trigger watchdog reset");
 8000852:	498a      	ldr	r1, [pc, #552]	; (8000a7c <main+0x29c>)
 8000854:	4884      	ldr	r0, [pc, #528]	; (8000a68 <main+0x288>)
 8000856:	f7ff feaf 	bl	80005b8 <logMsg>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Define an input char with default value of NULL
    char input = '\0';
 800085a:	2300      	movs	r3, #0
 800085c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    input = logGetMsg(&huart1);
 8000860:	4881      	ldr	r0, [pc, #516]	; (8000a68 <main+0x288>)
 8000862:	f7ff fee5 	bl	8000630 <logGetMsg>
 8000866:	4603      	mov	r3, r0
 8000868:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    // Evaluate input char and execute methods associated with command
    switch(input)
 800086c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000870:	3b62      	subs	r3, #98	; 0x62
 8000872:	2b15      	cmp	r3, #21
 8000874:	f200 80ee 	bhi.w	8000a54 <main+0x274>
 8000878:	a201      	add	r2, pc, #4	; (adr r2, 8000880 <main+0xa0>)
 800087a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087e:	bf00      	nop
 8000880:	08000939 	.word	0x08000939
 8000884:	08000a55 	.word	0x08000a55
 8000888:	08000a55 	.word	0x08000a55
 800088c:	08000a55 	.word	0x08000a55
 8000890:	08000a55 	.word	0x08000a55
 8000894:	080008d9 	.word	0x080008d9
 8000898:	08000a55 	.word	0x08000a55
 800089c:	08000a55 	.word	0x08000a55
 80008a0:	08000a55 	.word	0x08000a55
 80008a4:	08000a55 	.word	0x08000a55
 80008a8:	08000a55 	.word	0x08000a55
 80008ac:	08000a55 	.word	0x08000a55
 80008b0:	08000a55 	.word	0x08000a55
 80008b4:	08000a55 	.word	0x08000a55
 80008b8:	08000a55 	.word	0x08000a55
 80008bc:	08000a55 	.word	0x08000a55
 80008c0:	08000a55 	.word	0x08000a55
 80008c4:	08000999 	.word	0x08000999
 80008c8:	080009e9 	.word	0x080009e9
 80008cc:	08000a55 	.word	0x08000a55
 80008d0:	08000a55 	.word	0x08000a55
 80008d4:	08000a43 	.word	0x08000a43
    {

        case ('g'):
        {
			// Print received char, print message indicating delay, toggle green LED on and off with myDelay2()
            logMsg(&huart1, "g");
 80008d8:	4969      	ldr	r1, [pc, #420]	; (8000a80 <main+0x2a0>)
 80008da:	4863      	ldr	r0, [pc, #396]	; (8000a68 <main+0x288>)
 80008dc:	f7ff fe6c 	bl	80005b8 <logMsg>
			
            char buffer[50] = {0};				// Output buffer
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	222e      	movs	r2, #46	; 0x2e
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f005 fd71 	bl	80063d4 <memset>
			snprintf(buffer, sizeof(buffer), "Toggling green LED 3x on every 1000ms");
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4a63      	ldr	r2, [pc, #396]	; (8000a84 <main+0x2a4>)
 80008f6:	2132      	movs	r1, #50	; 0x32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f005 fd73 	bl	80063e4 <sniprintf>
			logMsg(&huart1, buffer);
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4859      	ldr	r0, [pc, #356]	; (8000a68 <main+0x288>)
 8000904:	f7ff fe58 	bl	80005b8 <logMsg>
			
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000908:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800090c:	485e      	ldr	r0, [pc, #376]	; (8000a88 <main+0x2a8>)
 800090e:	f001 fe0f 	bl	8002530 <HAL_GPIO_TogglePin>
			myDelay2(1000);
 8000912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000916:	f7ff ff15 	bl	8000744 <myDelay2>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800091a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091e:	485a      	ldr	r0, [pc, #360]	; (8000a88 <main+0x2a8>)
 8000920:	f001 fe06 	bl	8002530 <HAL_GPIO_TogglePin>
			myDelay2(1000);
 8000924:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000928:	f7ff ff0c 	bl	8000744 <myDelay2>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800092c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000930:	4855      	ldr	r0, [pc, #340]	; (8000a88 <main+0x2a8>)
 8000932:	f001 fdfd 	bl	8002530 <HAL_GPIO_TogglePin>
			
            break;
 8000936:	e092      	b.n	8000a5e <main+0x27e>
        }

        case ('b'):
        {
			// Print received char, print message indicating delay, toggle blue LED on and off with myDelay1()
            logMsg(&huart1, "b");
 8000938:	4954      	ldr	r1, [pc, #336]	; (8000a8c <main+0x2ac>)
 800093a:	484b      	ldr	r0, [pc, #300]	; (8000a68 <main+0x288>)
 800093c:	f7ff fe3c 	bl	80005b8 <logMsg>
			
            char buffer[50] = {0};		// Output buffer
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	222e      	movs	r2, #46	; 0x2e
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f005 fd41 	bl	80063d4 <memset>
			snprintf(buffer, sizeof(buffer), "Toggling blue LED 3x on every 1000ms");
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4a4e      	ldr	r2, [pc, #312]	; (8000a90 <main+0x2b0>)
 8000956:	2132      	movs	r1, #50	; 0x32
 8000958:	4618      	mov	r0, r3
 800095a:	f005 fd43 	bl	80063e4 <sniprintf>
			logMsg(&huart1, buffer);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4841      	ldr	r0, [pc, #260]	; (8000a68 <main+0x288>)
 8000964:	f7ff fe28 	bl	80005b8 <logMsg>
			
            HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 8000968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096c:	4849      	ldr	r0, [pc, #292]	; (8000a94 <main+0x2b4>)
 800096e:	f001 fddf 	bl	8002530 <HAL_GPIO_TogglePin>
			myDelay1(1000);
 8000972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000976:	f7ff fead 	bl	80006d4 <myDelay1>
			HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 800097a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097e:	4845      	ldr	r0, [pc, #276]	; (8000a94 <main+0x2b4>)
 8000980:	f001 fdd6 	bl	8002530 <HAL_GPIO_TogglePin>
			myDelay1(1000);
 8000984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000988:	f7ff fea4 	bl	80006d4 <myDelay1>
			HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 800098c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000990:	4840      	ldr	r0, [pc, #256]	; (8000a94 <main+0x2b4>)
 8000992:	f001 fdcd 	bl	8002530 <HAL_GPIO_TogglePin>
			
            break;
 8000996:	e062      	b.n	8000a5e <main+0x27e>
        }

        case ('s'):
        {
            logMsg(&huart1, "s");
 8000998:	493f      	ldr	r1, [pc, #252]	; (8000a98 <main+0x2b8>)
 800099a:	4833      	ldr	r0, [pc, #204]	; (8000a68 <main+0x288>)
 800099c:	f7ff fe0c 	bl	80005b8 <logMsg>

            // Enable SW interrupt at target IRQ, FMC or 48
            NVIC->STIR = FMC_IRQn;
 80009a0:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <main+0x2bc>)
 80009a2:	2230      	movs	r2, #48	; 0x30
 80009a4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00

            // Implement callback under FMC_IRQ_CpltCallback()
			while (!swInterruptComplete)
 80009a8:	bf00      	nop
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <main+0x2c0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	f083 0301 	eor.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1f8      	bne.n	80009aa <main+0x1ca>
			{
				;	// Loiter until flag is set
			}
			
			swInterruptComplete = 0;	// Reset flag
 80009b8:	4b39      	ldr	r3, [pc, #228]	; (8000aa0 <main+0x2c0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
			
			char buffer[50] = {0};		// Output buffer
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	222e      	movs	r2, #46	; 0x2e
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 fd02 	bl	80063d4 <memset>
            snprintf(buffer, sizeof(buffer), "SW Interrupt detected");
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4a34      	ldr	r2, [pc, #208]	; (8000aa4 <main+0x2c4>)
 80009d4:	2132      	movs	r1, #50	; 0x32
 80009d6:	4618      	mov	r0, r3
 80009d8:	f005 fd04 	bl	80063e4 <sniprintf>
			logMsg(&huart1, buffer);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4821      	ldr	r0, [pc, #132]	; (8000a68 <main+0x288>)
 80009e2:	f7ff fde9 	bl	80005b8 <logMsg>

            break;
 80009e6:	e03a      	b.n	8000a5e <main+0x27e>
        }

        case ('t'):
        {
            logMsg(&huart1, "t");
 80009e8:	492f      	ldr	r1, [pc, #188]	; (8000aa8 <main+0x2c8>)
 80009ea:	481f      	ldr	r0, [pc, #124]	; (8000a68 <main+0x288>)
 80009ec:	f7ff fde4 	bl	80005b8 <logMsg>
			TIM3->CNT = 0;				// Clear accrual
			TIM3->PSC = 9999;			// PSC = (10MHz / 1KHz) - 1
			TIM3->ARR = 999;			// Delay (1k mSec) - 1
			TIM3->CR1 |= TIM_CR1_CEN;	// Re-enable timer
*/
            while (tim3Accrual < 10)
 80009f0:	e00a      	b.n	8000a08 <main+0x228>
            {
            	tim3InterruptComplete = 0;
 80009f2:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <main+0x2cc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]

            	while (!tim3InterruptComplete)
 80009f8:	bf00      	nop
 80009fa:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <main+0x2cc>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	f083 0301 	eor.w	r3, r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f8      	bne.n	80009fa <main+0x21a>
            while (tim3Accrual < 10)
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <main+0x2d0>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b09      	cmp	r3, #9
 8000a0e:	d9f0      	bls.n	80009f2 <main+0x212>
				{
					;	// Loiter until target count is reached
				}
            }

            char buffer[50] = {0};		// Output buffer
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	222e      	movs	r2, #46	; 0x2e
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f005 fcd9 	bl	80063d4 <memset>
            snprintf(buffer, sizeof(buffer), "Total counted timer3 event = %d", tim3Accrual);
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <main+0x2d0>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	1d38      	adds	r0, r7, #4
 8000a28:	4a22      	ldr	r2, [pc, #136]	; (8000ab4 <main+0x2d4>)
 8000a2a:	2132      	movs	r1, #50	; 0x32
 8000a2c:	f005 fcda 	bl	80063e4 <sniprintf>
            logMsg(&huart1, buffer);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <main+0x288>)
 8000a36:	f7ff fdbf 	bl	80005b8 <logMsg>
			
            tim3Accrual = 0;	// Reset accrual
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <main+0x2d0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]

            break;
 8000a40:	e00d      	b.n	8000a5e <main+0x27e>
        }

        case ('w'):
        {
            logMsg(&huart1, "w");
 8000a42:	491d      	ldr	r1, [pc, #116]	; (8000ab8 <main+0x2d8>)
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <main+0x288>)
 8000a46:	f7ff fdb7 	bl	80005b8 <logMsg>

            // Implement code to delay 1 second and miss the watchdog pet. Should reset board
            myDelay2(1000);
 8000a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4e:	f7ff fe79 	bl	8000744 <myDelay2>

            break;
 8000a52:	e004      	b.n	8000a5e <main+0x27e>
        }

        // Default case. Print error message
        default:
        {
            logMsg(&huart1, "Unknown character received!\n");
 8000a54:	4919      	ldr	r1, [pc, #100]	; (8000abc <main+0x2dc>)
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <main+0x288>)
 8000a58:	f7ff fdae 	bl	80005b8 <logMsg>
            break;
 8000a5c:	bf00      	nop
  {
 8000a5e:	e6fc      	b.n	800085a <main+0x7a>
 8000a60:	200005d8 	.word	0x200005d8
 8000a64:	08006c84 	.word	0x08006c84
 8000a68:	20000688 	.word	0x20000688
 8000a6c:	08006cb0 	.word	0x08006cb0
 8000a70:	08006cd4 	.word	0x08006cd4
 8000a74:	08006cf8 	.word	0x08006cf8
 8000a78:	08006d1c 	.word	0x08006d1c
 8000a7c:	08006d38 	.word	0x08006d38
 8000a80:	08006d60 	.word	0x08006d60
 8000a84:	08006d64 	.word	0x08006d64
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	08006d8c 	.word	0x08006d8c
 8000a90:	08006d90 	.word	0x08006d90
 8000a94:	48000800 	.word	0x48000800
 8000a98:	08006db8 	.word	0x08006db8
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	2000008e 	.word	0x2000008e
 8000aa4:	08006dbc 	.word	0x08006dbc
 8000aa8:	08006dd4 	.word	0x08006dd4
 8000aac:	2000008f 	.word	0x2000008f
 8000ab0:	20000090 	.word	0x20000090
 8000ab4:	08006dd8 	.word	0x08006dd8
 8000ab8:	08006df8 	.word	0x08006df8
 8000abc:	08006dfc 	.word	0x08006dfc

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b096      	sub	sp, #88	; 0x58
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2244      	movs	r2, #68	; 0x44
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f005 fc80 	bl	80063d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ae2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ae6:	f001 ffed 	bl	8002ac4 <HAL_PWREx_ControlVoltageScaling>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000af0:	f000 fbfc 	bl	80012ec <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af4:	f001 ffc8 	bl	8002a88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <SystemClock_Config+0xc4>)
 8000afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000afe:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <SystemClock_Config+0xc4>)
 8000b00:	f023 0318 	bic.w	r3, r3, #24
 8000b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b08:	2314      	movs	r3, #20
 8000b0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b18:	2360      	movs	r3, #96	; 0x60
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b20:	2301      	movs	r3, #1
 8000b22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b28:	2328      	movs	r3, #40	; 0x28
 8000b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 f8e3 	bl	8002d08 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b48:	f000 fbd0 	bl	80012ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2303      	movs	r3, #3
 8000b52:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000b58:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	2104      	movs	r1, #4
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fcb4 	bl	80034d4 <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b72:	f000 fbbb 	bl	80012ec <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b76:	f003 f99d 	bl	8003eb4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b7a:	bf00      	nop
 8000b7c:	3758      	adds	r7, #88	; 0x58
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <MX_DFSDM1_Init+0x6c>)
 8000b90:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bde:	f001 f959 	bl	8001e94 <HAL_DFSDM_ChannelInit>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000be8:	f000 fb80 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000c8 	.word	0x200000c8
 8000bf4:	40016020 	.word	0x40016020

08000bf8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <MX_I2C2_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00101319;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <MX_I2C2_Init+0x7c>)
 8000c06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c34:	f001 fcb9 	bl	80025aa <HAL_I2C_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c3e:	f000 fb55 	bl	80012ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c46:	f001 fd3f 	bl	80026c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c50:	f000 fb4c 	bl	80012ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c58:	f001 fd81 	bl	800275e <HAL_I2CEx_ConfigDigitalFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c62:	f000 fb43 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000058c 	.word	0x2000058c
 8000c70:	40005800 	.word	0x40005800
 8000c74:	00101319 	.word	0x00101319

08000c78 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_QUADSPI_Init+0x44>)
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <MX_QUADSPI_Init+0x48>)
 8000c80:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_QUADSPI_Init+0x44>)
 8000c84:	2202      	movs	r2, #2
 8000c86:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_QUADSPI_Init+0x44>)
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_QUADSPI_Init+0x44>)
 8000c90:	2210      	movs	r2, #16
 8000c92:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_QUADSPI_Init+0x44>)
 8000c96:	2217      	movs	r2, #23
 8000c98:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_QUADSPI_Init+0x44>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_QUADSPI_Init+0x44>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_QUADSPI_Init+0x44>)
 8000ca8:	f001 ff72 	bl	8002b90 <HAL_QSPI_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000cb2:	f000 fb1b 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000758 	.word	0x20000758
 8000cc0:	a0001000 	.word	0xa0001000

08000cc4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <MX_SPI3_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000cde:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ce2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000d12:	2207      	movs	r2, #7
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000d1e:	2208      	movs	r2, #8
 8000d20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_SPI3_Init+0x74>)
 8000d24:	f003 faa8 	bl	8004278 <HAL_SPI_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d2e:	f000 fadd 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000624 	.word	0x20000624
 8000d3c:	40003c00 	.word	0x40003c00

08000d40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d86:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d88:	f003 fb19 	bl	80043be <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d92:	f000 faab 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000da4:	f003 fc81 	bl	80046aa <HAL_TIM_ConfigClockSource>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dae:	f000 fa9d 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000dc0:	f003 fe96 	bl	8004af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dca:	f000 fa8f 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000070c 	.word	0x2000070c

08000ddc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <MX_TIM3_Init+0x9c>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000e02:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000e10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e22:	4814      	ldr	r0, [pc, #80]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000e24:	f003 facb 	bl	80043be <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000e2e:	f000 fa5d 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000e40:	f003 fc33 	bl	80046aa <HAL_TIM_ConfigClockSource>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000e4a:	f000 fa4f 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <MX_TIM3_Init+0x98>)
 8000e5c:	f003 fe48 	bl	8004af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000e66:	f000 fa41 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200005d8 	.word	0x200005d8
 8000e78:	40000400 	.word	0x40000400

08000e7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000e82:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <MX_USART1_UART_Init+0x5c>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000ec0:	f003 febc 	bl	8004c3c <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eca:	f000 fa0f 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000688 	.word	0x20000688
 8000ed8:	40013800 	.word	0x40013800

08000edc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <MX_USART3_UART_Init+0x5c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USART3_UART_Init+0x58>)
 8000f20:	f003 fe8c 	bl	8004c3c <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f000 f9df 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000100 	.word	0x20000100
 8000f38:	40004800 	.word	0x40004800

08000f3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4a:	2206      	movs	r2, #6
 8000f4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f80:	f001 fc39 	bl	80027f6 <HAL_PCD_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f000 f9af 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000184 	.word	0x20000184

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fae:	4bb8      	ldr	r3, [pc, #736]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4ab7      	ldr	r2, [pc, #732]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4bb5      	ldr	r3, [pc, #724]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4bb2      	ldr	r3, [pc, #712]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4ab1      	ldr	r2, [pc, #708]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4baf      	ldr	r3, [pc, #700]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fde:	4bac      	ldr	r3, [pc, #688]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4aab      	ldr	r2, [pc, #684]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4ba9      	ldr	r3, [pc, #676]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4ba6      	ldr	r3, [pc, #664]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4aa5      	ldr	r2, [pc, #660]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4ba3      	ldr	r3, [pc, #652]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4ba0      	ldr	r3, [pc, #640]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a9f      	ldr	r2, [pc, #636]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b9d      	ldr	r3, [pc, #628]	; (8001290 <MX_GPIO_Init+0x2f8>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b9a      	ldr	r3, [pc, #616]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a99      	ldr	r2, [pc, #612]	; (8001290 <MX_GPIO_Init+0x2f8>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b97      	ldr	r3, [pc, #604]	; (8001290 <MX_GPIO_Init+0x2f8>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001044:	4893      	ldr	r0, [pc, #588]	; (8001294 <MX_GPIO_Init+0x2fc>)
 8001046:	f001 fa5b 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f248 1104 	movw	r1, #33028	; 0x8104
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f001 fa54 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001058:	2200      	movs	r2, #0
 800105a:	f24f 0114 	movw	r1, #61460	; 0xf014
 800105e:	488e      	ldr	r0, [pc, #568]	; (8001298 <MX_GPIO_Init+0x300>)
 8001060:	f001 fa4e 	bl	8002500 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f241 0181 	movw	r1, #4225	; 0x1081
 800106a:	488c      	ldr	r0, [pc, #560]	; (800129c <MX_GPIO_Init+0x304>)
 800106c:	f001 fa48 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001076:	4889      	ldr	r0, [pc, #548]	; (800129c <MX_GPIO_Init+0x304>)
 8001078:	f001 fa42 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001082:	4887      	ldr	r0, [pc, #540]	; (80012a0 <MX_GPIO_Init+0x308>)
 8001084:	f001 fa3c 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2120      	movs	r1, #32
 800108c:	4882      	ldr	r0, [pc, #520]	; (8001298 <MX_GPIO_Init+0x300>)
 800108e:	f001 fa37 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2101      	movs	r1, #1
 8001096:	487f      	ldr	r0, [pc, #508]	; (8001294 <MX_GPIO_Init+0x2fc>)
 8001098:	f001 fa32 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800109c:	f240 1315 	movw	r3, #277	; 0x115
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4877      	ldr	r0, [pc, #476]	; (8001294 <MX_GPIO_Init+0x2fc>)
 80010b6:	f001 f879 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80010ba:	236a      	movs	r3, #106	; 0x6a
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010be:	4b79      	ldr	r3, [pc, #484]	; (80012a4 <MX_GPIO_Init+0x30c>)
 80010c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4871      	ldr	r0, [pc, #452]	; (8001294 <MX_GPIO_Init+0x2fc>)
 80010ce:	f001 f86d 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80010d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d8:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <MX_GPIO_Init+0x310>)
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	486e      	ldr	r0, [pc, #440]	; (80012a0 <MX_GPIO_Init+0x308>)
 80010e8:	f001 f860 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80010ec:	233f      	movs	r3, #63	; 0x3f
 80010ee:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010f0:	230b      	movs	r3, #11
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4868      	ldr	r0, [pc, #416]	; (80012a0 <MX_GPIO_Init+0x308>)
 8001100:	f001 f854 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001104:	2303      	movs	r3, #3
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001114:	2308      	movs	r3, #8
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f001 f843 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001126:	f248 1304 	movw	r3, #33028	; 0x8104
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f001 f833 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001146:	2310      	movs	r3, #16
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800114a:	230b      	movs	r3, #11
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f001 f826 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001160:	23e0      	movs	r3, #224	; 0xe0
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001170:	2305      	movs	r3, #5
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f001 f815 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001182:	2301      	movs	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <MX_GPIO_Init+0x30c>)
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4840      	ldr	r0, [pc, #256]	; (8001298 <MX_GPIO_Init+0x300>)
 8001196:	f001 f809 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800119a:	2302      	movs	r3, #2
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800119e:	230b      	movs	r3, #11
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	483a      	ldr	r0, [pc, #232]	; (8001298 <MX_GPIO_Init+0x300>)
 80011ae:	f000 fffd 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80011b2:	f24f 0334 	movw	r3, #61492	; 0xf034
 80011b6:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4833      	ldr	r0, [pc, #204]	; (8001298 <MX_GPIO_Init+0x300>)
 80011cc:	f000 ffee 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80011d0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80011d4:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d6:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <MX_GPIO_Init+0x30c>)
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	482d      	ldr	r0, [pc, #180]	; (800129c <MX_GPIO_Init+0x304>)
 80011e6:	f000 ffe1 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80011ea:	f243 0381 	movw	r3, #12417	; 0x3081
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4826      	ldr	r0, [pc, #152]	; (800129c <MX_GPIO_Init+0x304>)
 8001204:	f000 ffd2 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001208:	f44f 7310 	mov.w	r3, #576	; 0x240
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	481f      	ldr	r0, [pc, #124]	; (80012a0 <MX_GPIO_Init+0x308>)
 8001222:	f000 ffc3 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001226:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_GPIO_Init+0x30c>)
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4819      	ldr	r0, [pc, #100]	; (80012a0 <MX_GPIO_Init+0x308>)
 800123c:	f000 ffb6 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001240:	2302      	movs	r3, #2
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001250:	2305      	movs	r3, #5
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <MX_GPIO_Init+0x304>)
 800125c:	f000 ffa6 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001260:	2378      	movs	r3, #120	; 0x78
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001270:	2307      	movs	r3, #7
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <MX_GPIO_Init+0x304>)
 800127c:	f000 ff96 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001280:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001286:	2312      	movs	r3, #18
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
 800128e:	e00d      	b.n	80012ac <MX_GPIO_Init+0x314>
 8001290:	40021000 	.word	0x40021000
 8001294:	48001000 	.word	0x48001000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000c00 	.word	0x48000c00
 80012a0:	48000800 	.word	0x48000800
 80012a4:	10110000 	.word	0x10110000
 80012a8:	10210000 	.word	0x10210000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b0:	2304      	movs	r3, #4
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <MX_GPIO_Init+0x350>)
 80012bc:	f000 ff76 	bl	80021ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2017      	movs	r0, #23
 80012c6:	f000 fdae 	bl	8001e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ca:	2017      	movs	r0, #23
 80012cc:	f000 fdc7 	bl	8001e5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2028      	movs	r0, #40	; 0x28
 80012d6:	f000 fda6 	bl	8001e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012da:	2028      	movs	r0, #40	; 0x28
 80012dc:	f000 fdbf 	bl	8001e5e <HAL_NVIC_EnableIRQ>

}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	48000400 	.word	0x48000400

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>
	...

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_MspInit+0x44>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <HAL_MspInit+0x44>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6613      	str	r3, [r2, #96]	; 0x60
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_MspInit+0x44>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_MspInit+0x44>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_MspInit+0x44>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6593      	str	r3, [r2, #88]	; 0x58
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_MspInit+0x44>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0ac      	sub	sp, #176	; 0xb0
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2288      	movs	r2, #136	; 0x88
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f005 f837 	bl	80063d4 <memset>
  if(DFSDM1_Init == 0)
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d142      	bne.n	80013f4 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800136e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001372:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4618      	mov	r0, r3
 8001380:	f002 faae 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800138a:	f7ff ffaf 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001394:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001398:	6613      	str	r3, [r2, #96]	; 0x60
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a15      	ldr	r2, [pc, #84]	; (8001400 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80013be:	f44f 7320 	mov.w	r3, #640	; 0x280
 80013c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013d8:	2306      	movs	r3, #6
 80013da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013e6:	f000 fee1 	bl	80021ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a02      	ldr	r2, [pc, #8]	; (80013fc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013f2:	6013      	str	r3, [r2, #0]
  }

}
 80013f4:	bf00      	nop
 80013f6:	37b0      	adds	r7, #176	; 0xb0
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000094 	.word	0x20000094
 8001400:	40021000 	.word	0x40021000
 8001404:	48001000 	.word	0x48001000

08001408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b0ac      	sub	sp, #176	; 0xb0
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2288      	movs	r2, #136	; 0x88
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f004 ffd3 	bl	80063d4 <memset>
  if(hi2c->Instance==I2C2)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <HAL_I2C_MspInit+0xb0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d13b      	bne.n	80014b0 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800143c:	2300      	movs	r3, #0
 800143e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fa4b 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001450:	f7ff ff4c 	bl	80012ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_I2C_MspInit+0xb4>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	4a18      	ldr	r2, [pc, #96]	; (80014bc <HAL_I2C_MspInit+0xb4>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_I2C_MspInit+0xb4>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800146c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147a:	2301      	movs	r3, #1
 800147c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001486:	2304      	movs	r3, #4
 8001488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001490:	4619      	mov	r1, r3
 8001492:	480b      	ldr	r0, [pc, #44]	; (80014c0 <HAL_I2C_MspInit+0xb8>)
 8001494:	f000 fe8a 	bl	80021ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_I2C_MspInit+0xb4>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_I2C_MspInit+0xb4>)
 800149e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014a2:	6593      	str	r3, [r2, #88]	; 0x58
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_I2C_MspInit+0xb4>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	37b0      	adds	r7, #176	; 0xb0
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40005800 	.word	0x40005800
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000400 	.word	0x48000400

080014c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_QSPI_MspInit+0x7c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d128      	bne.n	8001538 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_QSPI_MspInit+0x80>)
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <HAL_QSPI_MspInit+0x80>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6513      	str	r3, [r2, #80]	; 0x50
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_QSPI_MspInit+0x80>)
 80014f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_QSPI_MspInit+0x80>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_QSPI_MspInit+0x80>)
 8001504:	f043 0310 	orr.w	r3, r3, #16
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_QSPI_MspInit+0x80>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001516:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800151a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001528:	230a      	movs	r3, #10
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <HAL_QSPI_MspInit+0x84>)
 8001534:	f000 fe3a 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	a0001000 	.word	0xa0001000
 8001544:	40021000 	.word	0x40021000
 8001548:	48001000 	.word	0x48001000

0800154c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <HAL_SPI_MspInit+0x7c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d128      	bne.n	80015c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_SPI_MspInit+0x80>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	4a16      	ldr	r2, [pc, #88]	; (80015cc <HAL_SPI_MspInit+0x80>)
 8001574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001578:	6593      	str	r3, [r2, #88]	; 0x58
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_SPI_MspInit+0x80>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_SPI_MspInit+0x80>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a10      	ldr	r2, [pc, #64]	; (80015cc <HAL_SPI_MspInit+0x80>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_SPI_MspInit+0x80>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800159e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015b0:	2306      	movs	r3, #6
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_SPI_MspInit+0x84>)
 80015bc:	f000 fdf6 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40003c00 	.word	0x40003c00
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000800 	.word	0x48000800

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f4:	d131      	bne.n	800165a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_TIM_Base_MspInit+0xc0>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	4a26      	ldr	r2, [pc, #152]	; (8001694 <HAL_TIM_Base_MspInit+0xc0>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6593      	str	r3, [r2, #88]	; 0x58
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_TIM_Base_MspInit+0xc0>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_TIM_Base_MspInit+0xc0>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a20      	ldr	r2, [pc, #128]	; (8001694 <HAL_TIM_Base_MspInit+0xc0>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_TIM_Base_MspInit+0xc0>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001626:	2308      	movs	r3, #8
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001636:	2301      	movs	r3, #1
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001644:	f000 fdb2 	bl	80021ac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	201c      	movs	r0, #28
 800164e:	f000 fbea 	bl	8001e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001652:	201c      	movs	r0, #28
 8001654:	f000 fc03 	bl	8001e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001658:	e018      	b.n	800168c <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM3)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_TIM_Base_MspInit+0xc4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d113      	bne.n	800168c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_TIM_Base_MspInit+0xc0>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_TIM_Base_MspInit+0xc0>)
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	6593      	str	r3, [r2, #88]	; 0x58
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_TIM_Base_MspInit+0xc0>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	201d      	movs	r0, #29
 8001682:	f000 fbd0 	bl	8001e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001686:	201d      	movs	r0, #29
 8001688:	f000 fbe9 	bl	8001e5e <HAL_NVIC_EnableIRQ>
}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	40000400 	.word	0x40000400

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b0ae      	sub	sp, #184	; 0xb8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2288      	movs	r2, #136	; 0x88
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fe89 	bl	80063d4 <memset>
  if(huart->Instance==USART1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a46      	ldr	r2, [pc, #280]	; (80017e0 <HAL_UART_MspInit+0x144>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d143      	bne.n	8001754 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016d0:	2300      	movs	r3, #0
 80016d2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 f901 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016e4:	f7ff fe02 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e8:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <HAL_UART_MspInit+0x148>)
 80016ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ec:	4a3d      	ldr	r2, [pc, #244]	; (80017e4 <HAL_UART_MspInit+0x148>)
 80016ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f2:	6613      	str	r3, [r2, #96]	; 0x60
 80016f4:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_UART_MspInit+0x148>)
 80016f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_UART_MspInit+0x148>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	4a37      	ldr	r2, [pc, #220]	; (80017e4 <HAL_UART_MspInit+0x148>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_UART_MspInit+0x148>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001718:	23c0      	movs	r3, #192	; 0xc0
 800171a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001730:	2307      	movs	r3, #7
 8001732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800173a:	4619      	mov	r1, r3
 800173c:	482a      	ldr	r0, [pc, #168]	; (80017e8 <HAL_UART_MspInit+0x14c>)
 800173e:	f000 fd35 	bl	80021ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2025      	movs	r0, #37	; 0x25
 8001748:	f000 fb6d 	bl	8001e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800174c:	2025      	movs	r0, #37	; 0x25
 800174e:	f000 fb86 	bl	8001e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001752:	e040      	b.n	80017d6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_UART_MspInit+0x150>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d13b      	bne.n	80017d6 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800175e:	2304      	movs	r3, #4
 8001760:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001762:	2300      	movs	r3, #0
 8001764:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4618      	mov	r0, r3
 800176c:	f002 f8b8 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001776:	f7ff fdb9 	bl	80012ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_UART_MspInit+0x148>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_UART_MspInit+0x148>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6593      	str	r3, [r2, #88]	; 0x58
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_UART_MspInit+0x148>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_UART_MspInit+0x148>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <HAL_UART_MspInit+0x148>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_UART_MspInit+0x148>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c4:	2307      	movs	r3, #7
 80017c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4807      	ldr	r0, [pc, #28]	; (80017f0 <HAL_UART_MspInit+0x154>)
 80017d2:	f000 fceb 	bl	80021ac <HAL_GPIO_Init>
}
 80017d6:	bf00      	nop
 80017d8:	37b8      	adds	r7, #184	; 0xb8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40013800 	.word	0x40013800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000400 	.word	0x48000400
 80017ec:	40004800 	.word	0x40004800
 80017f0:	48000c00 	.word	0x48000c00

080017f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0ac      	sub	sp, #176	; 0xb0
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2288      	movs	r2, #136	; 0x88
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fddd 	bl	80063d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001822:	d17c      	bne.n	800191e <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001828:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800182a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800182e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001832:	2301      	movs	r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001836:	2301      	movs	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800183a:	2318      	movs	r3, #24
 800183c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800183e:	2307      	movs	r3, #7
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001842:	2302      	movs	r3, #2
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001846:	2302      	movs	r3, #2
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800184a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4618      	mov	r0, r3
 8001856:	f002 f843 	bl	80038e0 <HAL_RCCEx_PeriphCLKConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001860:	f7ff fd44 	bl	80012ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_PCD_MspInit+0x134>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_PCD_MspInit+0x134>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_PCD_MspInit+0x134>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800187c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001894:	4619      	mov	r1, r3
 8001896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189a:	f000 fc87 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800189e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018b8:	230a      	movs	r3, #10
 80018ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f000 fc70 	bl	80021ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_PCD_MspInit+0x134>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	4a15      	ldr	r2, [pc, #84]	; (8001928 <HAL_PCD_MspInit+0x134>)
 80018d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_PCD_MspInit+0x134>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_PCD_MspInit+0x134>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d114      	bne.n	800191a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_PCD_MspInit+0x134>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <HAL_PCD_MspInit+0x134>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6593      	str	r3, [r2, #88]	; 0x58
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_PCD_MspInit+0x134>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001908:	f001 f932 	bl	8002b70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_PCD_MspInit+0x134>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <HAL_PCD_MspInit+0x134>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001916:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001918:	e001      	b.n	800191e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800191a:	f001 f929 	bl	8002b70 <HAL_PWREx_EnableVddUSB>
}
 800191e:	bf00      	nop
 8001920:	37b0      	adds	r7, #176	; 0xb0
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <NMI_Handler+0x4>

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001978:	f000 f936 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001984:	2020      	movs	r0, #32
 8001986:	f000 fded 	bl	8002564 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800198a:	2040      	movs	r0, #64	; 0x40
 800198c:	f000 fdea 	bl	8002564 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001990:	2080      	movs	r0, #128	; 0x80
 8001992:	f000 fde7 	bl	8002564 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001996:	f44f 7080 	mov.w	r0, #256	; 0x100
 800199a:	f000 fde3 	bl	8002564 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TIM2_IRQHandler+0x10>)
 80019aa:	f002 fd5f 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000070c 	.word	0x2000070c

080019b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM3_IRQHandler+0x10>)
 80019be:	f002 fd55 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200005d8 	.word	0x200005d8

080019cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <USART1_IRQHandler+0x10>)
 80019d2:	f003 fa21 	bl	8004e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000688 	.word	0x20000688

080019e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80019e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019e8:	f000 fdbc 	bl	8002564 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019f0:	f000 fdb8 	bl	8002564 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019f8:	f000 fdb4 	bl	8002564 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80019fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a00:	f000 fdb0 	bl	8002564 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a08:	f000 fdac 	bl	8002564 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <FMC_IRQHandler>:

/**
  * @brief This function handles a user-defined SW interrupt.
  */
void FMC_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	FMC_IRQ_CpltCallback();
 8001a14:	f7fe fe4e 	bl	80006b4 <FMC_IRQ_CpltCallback>
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f004 fc98 	bl	8006380 <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20018000 	.word	0x20018000
 8001a7c:	00000400 	.word	0x00000400
 8001a80:	20000098 	.word	0x20000098
 8001a84:	200007b0 	.word	0x200007b0

08001a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <SystemInit+0x5c>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <SystemInit+0x5c>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <SystemInit+0x60>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <SystemInit+0x60>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <SystemInit+0x60>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <SystemInit+0x60>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <SystemInit+0x60>)
 8001ab4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ab8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001abc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <SystemInit+0x60>)
 8001ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <SystemInit+0x60>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <SystemInit+0x60>)
 8001acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SystemInit+0x60>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	40021000 	.word	0x40021000

08001aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af0:	f7ff ffca 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001af4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001af6:	e003      	b.n	8001b00 <LoopCopyDataInit>

08001af8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001afa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001afc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001afe:	3104      	adds	r1, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b00:	480a      	ldr	r0, [pc, #40]	; (8001b2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b08:	d3f6      	bcc.n	8001af8 <CopyDataInit>
	ldr	r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b0c:	e002      	b.n	8001b14 <LoopFillZerobss>

08001b0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b10:	f842 3b04 	str.w	r3, [r2], #4

08001b14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <LoopForever+0x16>)
	cmp	r2, r3
 8001b16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b18:	d3f9      	bcc.n	8001b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f004 fc37 	bl	800638c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b1e:	f7fe fe5f 	bl	80007e0 <main>

08001b22 <LoopForever>:

LoopForever:
    b LoopForever
 8001b22:	e7fe      	b.n	8001b22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b24:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b28:	08006ea8 	.word	0x08006ea8
	ldr	r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b30:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001b34:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001b38:	200007b0 	.word	0x200007b0

08001b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_2_IRQHandler>

08001b3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 f961 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f80e 	bl	8001b70 <HAL_InitTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	e001      	b.n	8001b64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b60:	f7ff fbca 	bl	80012f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b64:	79fb      	ldrb	r3, [r7, #7]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_InitTick+0x6c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d023      	beq.n	8001bcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_InitTick+0x70>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_InitTick+0x6c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f96d 	bl	8001e7a <HAL_SYSTICK_Config>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d809      	bhi.n	8001bc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f000 f937 	bl	8001e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_InitTick+0x74>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e007      	b.n	8001bd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e004      	b.n	8001bd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
 8001bca:	e001      	b.n	8001bd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	2000079c 	.word	0x2000079c

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	2000079c 	.word	0x2000079c

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_Delay+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0b      	blt.n	8001cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4907      	ldr	r1, [pc, #28]	; (8001d0c <__NVIC_EnableIRQ+0x38>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e100 	.word	0xe000e100

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	; (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ddc:	d301      	bcc.n	8001de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <SysTick_Config+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dea:	210f      	movs	r1, #15
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f7ff ff8e 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <SysTick_Config+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SysTick_Config+0x40>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000e010 	.word	0xe000e010

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff29 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e38:	f7ff ff3e 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	6978      	ldr	r0, [r7, #20]
 8001e44:	f7ff ff8e 	bl	8001d64 <NVIC_EncodePriority>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff5d 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff31 	bl	8001cd4 <__NVIC_EnableIRQ>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffa2 	bl	8001dcc <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0ac      	b.n	8002000 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f8b2 	bl	8002014 <DFSDM_GetChannelFromInstance>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4a55      	ldr	r2, [pc, #340]	; (8002008 <HAL_DFSDM_ChannelInit+0x174>)
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e09f      	b.n	8002000 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fa3d 	bl	8001340 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001ec6:	4b51      	ldr	r3, [pc, #324]	; (800200c <HAL_DFSDM_ChannelInit+0x178>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a4f      	ldr	r2, [pc, #316]	; (800200c <HAL_DFSDM_ChannelInit+0x178>)
 8001ece:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	; (800200c <HAL_DFSDM_ChannelInit+0x178>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d125      	bne.n	8001f24 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ed8:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <HAL_DFSDM_ChannelInit+0x17c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a4c      	ldr	r2, [pc, #304]	; (8002010 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ede:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ee2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001ee4:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4948      	ldr	r1, [pc, #288]	; (8002010 <HAL_DFSDM_ChannelInit+0x17c>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a46      	ldr	r2, [pc, #280]	; (8002010 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ef8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001efc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	791b      	ldrb	r3, [r3, #4]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d108      	bne.n	8001f18 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001f06:	4b42      	ldr	r3, [pc, #264]	; (8002010 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	041b      	lsls	r3, r3, #16
 8001f12:	493f      	ldr	r1, [pc, #252]	; (8002010 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001f18:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3c      	ldr	r2, [pc, #240]	; (8002010 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f22:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001f32:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6819      	ldr	r1, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f42:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001f48:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 020f 	bic.w	r2, r2, #15
 8001f60:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001f88:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6899      	ldr	r1, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f002 0207 	and.w	r2, r2, #7
 8001fb4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fe0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f810 	bl	8002014 <DFSDM_GetChannelFromInstance>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_DFSDM_ChannelInit+0x174>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200000a0 	.word	0x200000a0
 800200c:	2000009c 	.word	0x2000009c
 8002010:	40016000 	.word	0x40016000

08002014 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <DFSDM_GetChannelFromInstance+0x7c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d102      	bne.n	800202a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e02b      	b.n	8002082 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <DFSDM_GetChannelFromInstance+0x80>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d102      	bne.n	8002038 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e024      	b.n	8002082 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a17      	ldr	r2, [pc, #92]	; (8002098 <DFSDM_GetChannelFromInstance+0x84>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d102      	bne.n	8002046 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002040:	2302      	movs	r3, #2
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e01d      	b.n	8002082 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <DFSDM_GetChannelFromInstance+0x88>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d102      	bne.n	8002054 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800204e:	2304      	movs	r3, #4
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e016      	b.n	8002082 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d102      	bne.n	8002062 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800205c:	2305      	movs	r3, #5
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e00f      	b.n	8002082 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <DFSDM_GetChannelFromInstance+0x90>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d102      	bne.n	8002070 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800206a:	2306      	movs	r3, #6
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e008      	b.n	8002082 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <DFSDM_GetChannelFromInstance+0x94>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d102      	bne.n	800207e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002078:	2307      	movs	r3, #7
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	e001      	b.n	8002082 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800207e:	2303      	movs	r3, #3
 8002080:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40016000 	.word	0x40016000
 8002094:	40016020 	.word	0x40016020
 8002098:	40016040 	.word	0x40016040
 800209c:	40016080 	.word	0x40016080
 80020a0:	400160a0 	.word	0x400160a0
 80020a4:	400160c0 	.word	0x400160c0
 80020a8:	400160e0 	.word	0x400160e0

080020ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d008      	beq.n	80020d6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2204      	movs	r2, #4
 80020c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e022      	b.n	800211c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 020e 	bic.w	r2, r2, #14
 80020e4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0201 	bic.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f003 021c 	and.w	r2, r3, #28
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 f202 	lsl.w	r2, r1, r2
 8002108:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d005      	beq.n	800214c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2204      	movs	r2, #4
 8002144:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e029      	b.n	80021a0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 020e 	bic.w	r2, r2, #14
 800215a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f003 021c 	and.w	r2, r3, #28
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	2101      	movs	r1, #1
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
    }
  }
  return status;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ba:	e17f      	b.n	80024bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8171 	beq.w	80024b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d00b      	beq.n	80021f4 <HAL_GPIO_Init+0x48>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d007      	beq.n	80021f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e8:	2b11      	cmp	r3, #17
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b12      	cmp	r3, #18
 80021f2:	d130      	bne.n	8002256 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800222a:	2201      	movs	r2, #1
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	f003 0201 	and.w	r2, r3, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b03      	cmp	r3, #3
 8002260:	d118      	bne.n	8002294 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002268:	2201      	movs	r2, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	08db      	lsrs	r3, r3, #3
 800227e:	f003 0201 	and.w	r2, r3, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x128>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b12      	cmp	r3, #18
 80022d2:	d123      	bne.n	800231c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	6939      	ldr	r1, [r7, #16]
 8002318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80ac 	beq.w	80024b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	4b5f      	ldr	r3, [pc, #380]	; (80024dc <HAL_GPIO_Init+0x330>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	4a5e      	ldr	r2, [pc, #376]	; (80024dc <HAL_GPIO_Init+0x330>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6613      	str	r3, [r2, #96]	; 0x60
 800236a:	4b5c      	ldr	r3, [pc, #368]	; (80024dc <HAL_GPIO_Init+0x330>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002376:	4a5a      	ldr	r2, [pc, #360]	; (80024e0 <HAL_GPIO_Init+0x334>)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023a0:	d025      	beq.n	80023ee <HAL_GPIO_Init+0x242>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4f      	ldr	r2, [pc, #316]	; (80024e4 <HAL_GPIO_Init+0x338>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d01f      	beq.n	80023ea <HAL_GPIO_Init+0x23e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4e      	ldr	r2, [pc, #312]	; (80024e8 <HAL_GPIO_Init+0x33c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d019      	beq.n	80023e6 <HAL_GPIO_Init+0x23a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4d      	ldr	r2, [pc, #308]	; (80024ec <HAL_GPIO_Init+0x340>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <HAL_GPIO_Init+0x236>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4c      	ldr	r2, [pc, #304]	; (80024f0 <HAL_GPIO_Init+0x344>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00d      	beq.n	80023de <HAL_GPIO_Init+0x232>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4b      	ldr	r2, [pc, #300]	; (80024f4 <HAL_GPIO_Init+0x348>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <HAL_GPIO_Init+0x22e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4a      	ldr	r2, [pc, #296]	; (80024f8 <HAL_GPIO_Init+0x34c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_GPIO_Init+0x22a>
 80023d2:	2306      	movs	r3, #6
 80023d4:	e00c      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00a      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023da:	2305      	movs	r3, #5
 80023dc:	e008      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023de:	2304      	movs	r3, #4
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023e2:	2303      	movs	r3, #3
 80023e4:	e004      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e002      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023ee:	2300      	movs	r3, #0
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	f002 0203 	and.w	r2, r2, #3
 80023f6:	0092      	lsls	r2, r2, #2
 80023f8:	4093      	lsls	r3, r2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002400:	4937      	ldr	r1, [pc, #220]	; (80024e0 <HAL_GPIO_Init+0x334>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	3302      	adds	r3, #2
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800240e:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_GPIO_Init+0x350>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002432:	4a32      	ldr	r2, [pc, #200]	; (80024fc <HAL_GPIO_Init+0x350>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002438:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_GPIO_Init+0x350>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800245c:	4a27      	ldr	r2, [pc, #156]	; (80024fc <HAL_GPIO_Init+0x350>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <HAL_GPIO_Init+0x350>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002486:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <HAL_GPIO_Init+0x350>)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800248c:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_GPIO_Init+0x350>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024b0:	4a12      	ldr	r2, [pc, #72]	; (80024fc <HAL_GPIO_Init+0x350>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3301      	adds	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f47f ae78 	bne.w	80021bc <HAL_GPIO_Init+0x10>
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010000 	.word	0x40010000
 80024e4:	48000400 	.word	0x48000400
 80024e8:	48000800 	.word	0x48000800
 80024ec:	48000c00 	.word	0x48000c00
 80024f0:	48001000 	.word	0x48001000
 80024f4:	48001400 	.word	0x48001400
 80024f8:	48001800 	.word	0x48001800
 80024fc:	40010400 	.word	0x40010400

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800251c:	e002      	b.n	8002524 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4013      	ands	r3, r2
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43d9      	mvns	r1, r3
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	400b      	ands	r3, r1
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	4013      	ands	r3, r2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f806 	bl	8002594 <HAL_GPIO_EXTI_Callback>
  }
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e081      	b.n	80026c0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d106      	bne.n	80025d6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7fe ff19 	bl	8001408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2224      	movs	r2, #36	; 0x24
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800260a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d107      	bne.n	8002624 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	e006      	b.n	8002632 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002630:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d104      	bne.n	8002644 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002642:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002656:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002666:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	ea42 0103 	orr.w	r1, r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	021a      	lsls	r2, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69d9      	ldr	r1, [r3, #28]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1a      	ldr	r2, [r3, #32]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0201 	orr.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d138      	bne.n	8002750 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e032      	b.n	8002752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2224      	movs	r2, #36	; 0x24
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800271a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	e000      	b.n	8002752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002750:	2302      	movs	r3, #2
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b20      	cmp	r3, #32
 8002772:	d139      	bne.n	80027e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800277e:	2302      	movs	r3, #2
 8002780:	e033      	b.n	80027ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2224      	movs	r2, #36	; 0x24
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f8:	b08f      	sub	sp, #60	; 0x3c
 80027fa:	af0a      	add	r7, sp, #40	; 0x28
 80027fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e116      	b.n	8002a36 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe ffe6 	bl	80017f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2203      	movs	r2, #3
 800282c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fb5c 	bl	8005f04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	687e      	ldr	r6, [r7, #4]
 8002854:	466d      	mov	r5, sp
 8002856:	f106 0410 	add.w	r4, r6, #16
 800285a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800285c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002862:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002866:	e885 0003 	stmia.w	r5, {r0, r1}
 800286a:	1d33      	adds	r3, r6, #4
 800286c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286e:	6838      	ldr	r0, [r7, #0]
 8002870:	f003 fb1c 	bl	8005eac <USB_CoreInit>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0d7      	b.n	8002a36 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f003 fb4a 	bl	8005f26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e04a      	b.n	800292e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	333d      	adds	r3, #61	; 0x3d
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	333c      	adds	r3, #60	; 0x3c
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	b298      	uxth	r0, r3
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	3342      	adds	r3, #66	; 0x42
 80028d4:	4602      	mov	r2, r0
 80028d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	333f      	adds	r3, #63	; 0x3f
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3344      	adds	r3, #68	; 0x44
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	3348      	adds	r3, #72	; 0x48
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3350      	adds	r3, #80	; 0x50
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	3301      	adds	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d3af      	bcc.n	8002898 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002938:	2300      	movs	r3, #0
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e044      	b.n	80029c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	3301      	adds	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3b5      	bcc.n	800293e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	687e      	ldr	r6, [r7, #4]
 80029da:	466d      	mov	r5, sp
 80029dc:	f106 0410 	add.w	r4, r6, #16
 80029e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80029f0:	1d33      	adds	r3, r6, #4
 80029f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f4:	6838      	ldr	r0, [r7, #0]
 80029f6:	f003 fac1 	bl	8005f7c <USB_DevInit>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e014      	b.n	8002a36 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d102      	bne.n	8002a2a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f80a 	bl	8002a3e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fc51 	bl	80062d6 <USB_DevDisconnect>

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a3e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	f043 0303 	orr.w	r3, r3, #3
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40007000 	.word	0x40007000

08002aa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40007000 	.word	0x40007000

08002ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad2:	d130      	bne.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae0:	d038      	beq.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aea:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2232      	movs	r2, #50	; 0x32
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	3301      	adds	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b08:	e002      	b.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1c:	d102      	bne.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f2      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b30:	d110      	bne.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e00f      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d007      	beq.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b4c:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40007000 	.word	0x40007000
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	431bde83 	.word	0x431bde83

08002b70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b7e:	6053      	str	r3, [r2, #4]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40007000 	.word	0x40007000

08002b90 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff f83a 	bl	8001c10 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e063      	b.n	8002c70 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10b      	bne.n	8002bcc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7fe fc81 	bl	80014c4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002bc2:	f241 3188 	movw	r1, #5000	; 0x1388
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f858 	bl	8002c7c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	021a      	lsls	r2, r3, #8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2120      	movs	r1, #32
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f850 	bl	8002c98 <QSPI_WaitFlagStateUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002bfc:	7afb      	ldrb	r3, [r7, #11]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d131      	bne.n	8002c66 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c0c:	f023 0310 	bic.w	r3, r3, #16
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6852      	ldr	r2, [r2, #4]
 8002c14:	0611      	lsls	r1, r2, #24
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_QSPI_Init+0xe8>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6912      	ldr	r2, [r2, #16]
 8002c32:	0411      	lsls	r1, r2, #16
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6952      	ldr	r2, [r2, #20]
 8002c38:	4311      	orrs	r1, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6992      	ldr	r2, [r2, #24]
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	ffe0f8fe 	.word	0xffe0f8fe

08002c7c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ca8:	e01a      	b.n	8002ce0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d016      	beq.n	8002ce0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fe ffad 	bl	8001c10 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10b      	bne.n	8002ce0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e00e      	b.n	8002cfe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1d6      	bne.n	8002caa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e3d4      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1a:	4ba1      	ldr	r3, [pc, #644]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d24:	4b9e      	ldr	r3, [pc, #632]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80e4 	beq.w	8002f04 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <HAL_RCC_OscConfig+0x4a>
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	f040 808b 	bne.w	8002e60 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	f040 8087 	bne.w	8002e60 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d52:	4b93      	ldr	r3, [pc, #588]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_OscConfig+0x62>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e3ac      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1a      	ldr	r2, [r3, #32]
 8002d6e:	4b8c      	ldr	r3, [pc, #560]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <HAL_RCC_OscConfig+0x7c>
 8002d7a:	4b89      	ldr	r3, [pc, #548]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d82:	e005      	b.n	8002d90 <HAL_RCC_OscConfig+0x88>
 8002d84:	4b86      	ldr	r3, [pc, #536]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d223      	bcs.n	8002ddc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fd41 	bl	8003820 <RCC_SetFlashLatencyFromMSIRange>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e38d      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da8:	4b7d      	ldr	r3, [pc, #500]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a7c      	ldr	r2, [pc, #496]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002dae:	f043 0308 	orr.w	r3, r3, #8
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b7a      	ldr	r3, [pc, #488]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4977      	ldr	r1, [pc, #476]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc6:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	4972      	ldr	r1, [pc, #456]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
 8002dda:	e025      	b.n	8002e28 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ddc:	4b70      	ldr	r3, [pc, #448]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6f      	ldr	r2, [pc, #444]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002de2:	f043 0308 	orr.w	r3, r3, #8
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b6d      	ldr	r3, [pc, #436]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	496a      	ldr	r1, [pc, #424]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dfa:	4b69      	ldr	r3, [pc, #420]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	4965      	ldr	r1, [pc, #404]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d109      	bne.n	8002e28 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fd01 	bl	8003820 <RCC_SetFlashLatencyFromMSIRange>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e34d      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e28:	f000 fc36 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b5c      	ldr	r3, [pc, #368]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	495a      	ldr	r1, [pc, #360]	; (8002fa4 <HAL_RCC_OscConfig+0x29c>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
 8002e44:	4a58      	ldr	r2, [pc, #352]	; (8002fa8 <HAL_RCC_OscConfig+0x2a0>)
 8002e46:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e48:	4b58      	ldr	r3, [pc, #352]	; (8002fac <HAL_RCC_OscConfig+0x2a4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fe8f 	bl	8001b70 <HAL_InitTick>
 8002e52:	4603      	mov	r3, r0
 8002e54:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d052      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	e331      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d032      	beq.n	8002ece <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e68:	4b4d      	ldr	r3, [pc, #308]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a4c      	ldr	r2, [pc, #304]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e74:	f7fe fecc 	bl	8001c10 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e7c:	f7fe fec8 	bl	8001c10 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e31a      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e8e:	4b44      	ldr	r3, [pc, #272]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e9a:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a40      	ldr	r2, [pc, #256]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002ea0:	f043 0308 	orr.w	r3, r3, #8
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b3e      	ldr	r3, [pc, #248]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	493b      	ldr	r1, [pc, #236]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb8:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	4936      	ldr	r1, [pc, #216]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
 8002ecc:	e01a      	b.n	8002f04 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ece:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a33      	ldr	r2, [pc, #204]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eda:	f7fe fe99 	bl	8001c10 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ee2:	f7fe fe95 	bl	8001c10 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e2e7      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f0      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x1da>
 8002f00:	e000      	b.n	8002f04 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d074      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d005      	beq.n	8002f22 <HAL_RCC_OscConfig+0x21a>
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b0c      	cmp	r3, #12
 8002f1a:	d10e      	bne.n	8002f3a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d10b      	bne.n	8002f3a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f22:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d064      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x2f0>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d160      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e2c4      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x24a>
 8002f44:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e01d      	b.n	8002f8e <HAL_RCC_OscConfig+0x286>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x26e>
 8002f5c:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0f      	ldr	r2, [pc, #60]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e00b      	b.n	8002f8e <HAL_RCC_OscConfig+0x286>
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a06      	ldr	r2, [pc, #24]	; (8002fa0 <HAL_RCC_OscConfig+0x298>)
 8002f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fe fe3b 	bl	8001c10 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f9c:	e011      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2ba>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	08006e1c 	.word	0x08006e1c
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe fe2e 	bl	8001c10 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e280      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc2:	4baf      	ldr	r3, [pc, #700]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x2a8>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fe1e 	bl	8001c10 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fe1a 	bl	8001c10 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e26c      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fea:	4ba5      	ldr	r3, [pc, #660]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2d0>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d060      	beq.n	80030c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d005      	beq.n	8003018 <HAL_RCC_OscConfig+0x310>
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d119      	bne.n	8003046 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d116      	bne.n	8003046 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003018:	4b99      	ldr	r3, [pc, #612]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_OscConfig+0x328>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e249      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4b93      	ldr	r3, [pc, #588]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	061b      	lsls	r3, r3, #24
 800303e:	4990      	ldr	r1, [pc, #576]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003044:	e040      	b.n	80030c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d023      	beq.n	8003096 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304e:	4b8c      	ldr	r3, [pc, #560]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a8b      	ldr	r2, [pc, #556]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe fdd9 	bl	8001c10 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003062:	f7fe fdd5 	bl	8001c10 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e227      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003074:	4b82      	ldr	r3, [pc, #520]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b7f      	ldr	r3, [pc, #508]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	497c      	ldr	r1, [pc, #496]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
 8003094:	e018      	b.n	80030c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b7a      	ldr	r3, [pc, #488]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a79      	ldr	r2, [pc, #484]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 800309c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe fdb5 	bl	8001c10 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030aa:	f7fe fdb1 	bl	8001c10 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e203      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030bc:	4b70      	ldr	r3, [pc, #448]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f0      	bne.n	80030aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d03c      	beq.n	800314e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01c      	beq.n	8003116 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030dc:	4b68      	ldr	r3, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 80030de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e2:	4a67      	ldr	r2, [pc, #412]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ec:	f7fe fd90 	bl	8001c10 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f4:	f7fe fd8c 	bl	8001c10 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1de      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003106:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ef      	beq.n	80030f4 <HAL_RCC_OscConfig+0x3ec>
 8003114:	e01b      	b.n	800314e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003116:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311c:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe fd73 	bl	8001c10 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312e:	f7fe fd6f 	bl	8001c10 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1c1      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003140:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1ef      	bne.n	800312e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 80a6 	beq.w	80032a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315c:	2300      	movs	r3, #0
 800315e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003160:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10d      	bne.n	8003188 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316c:	4b44      	ldr	r3, [pc, #272]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	4a43      	ldr	r2, [pc, #268]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003176:	6593      	str	r3, [r2, #88]	; 0x58
 8003178:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003184:	2301      	movs	r3, #1
 8003186:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003188:	4b3e      	ldr	r3, [pc, #248]	; (8003284 <HAL_RCC_OscConfig+0x57c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d118      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003194:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_RCC_OscConfig+0x57c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3a      	ldr	r2, [pc, #232]	; (8003284 <HAL_RCC_OscConfig+0x57c>)
 800319a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a0:	f7fe fd36 	bl	8001c10 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a8:	f7fe fd32 	bl	8001c10 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e184      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ba:	4b32      	ldr	r3, [pc, #200]	; (8003284 <HAL_RCC_OscConfig+0x57c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d108      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4d8>
 80031ce:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	4a2a      	ldr	r2, [pc, #168]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031de:	e024      	b.n	800322a <HAL_RCC_OscConfig+0x522>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d110      	bne.n	800320a <HAL_RCC_OscConfig+0x502>
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	4a24      	ldr	r2, [pc, #144]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031f8:	4b21      	ldr	r3, [pc, #132]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	4a20      	ldr	r2, [pc, #128]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003208:	e00f      	b.n	800322a <HAL_RCC_OscConfig+0x522>
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800321a:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	4a17      	ldr	r2, [pc, #92]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003222:	f023 0304 	bic.w	r3, r3, #4
 8003226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe fced 	bl	8001c10 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fe fce9 	bl	8001c10 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e139      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_OscConfig+0x578>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0ed      	beq.n	800323a <HAL_RCC_OscConfig+0x532>
 800325e:	e01a      	b.n	8003296 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe fcd6 	bl	8001c10 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003266:	e00f      	b.n	8003288 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003268:	f7fe fcd2 	bl	8001c10 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d906      	bls.n	8003288 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e122      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003288:	4b90      	ldr	r3, [pc, #576]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e8      	bne.n	8003268 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003296:	7ffb      	ldrb	r3, [r7, #31]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b8b      	ldr	r3, [pc, #556]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	4a8a      	ldr	r2, [pc, #552]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 80032a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8108 	beq.w	80034c2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	f040 80d0 	bne.w	800345c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032bc:	4b83      	ldr	r3, [pc, #524]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0203 	and.w	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d130      	bne.n	8003332 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	3b01      	subs	r3, #1
 80032dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d127      	bne.n	8003332 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d11f      	bne.n	8003332 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032fc:	2a07      	cmp	r2, #7
 80032fe:	bf14      	ite	ne
 8003300:	2201      	movne	r2, #1
 8003302:	2200      	moveq	r2, #0
 8003304:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003306:	4293      	cmp	r3, r2
 8003308:	d113      	bne.n	8003332 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	3b01      	subs	r3, #1
 8003318:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d109      	bne.n	8003332 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	3b01      	subs	r3, #1
 800332c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d06e      	beq.n	8003410 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d069      	beq.n	800340c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003338:	4b64      	ldr	r3, [pc, #400]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003344:	4b61      	ldr	r3, [pc, #388]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0b7      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003354:	4b5d      	ldr	r3, [pc, #372]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5c      	ldr	r2, [pc, #368]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 800335a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003360:	f7fe fc56 	bl	8001c10 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe fc52 	bl	8001c10 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e0a4      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003386:	4b51      	ldr	r3, [pc, #324]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <HAL_RCC_OscConfig+0x7c8>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003396:	3a01      	subs	r2, #1
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	4311      	orrs	r1, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033a0:	0212      	lsls	r2, r2, #8
 80033a2:	4311      	orrs	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033a8:	0852      	lsrs	r2, r2, #1
 80033aa:	3a01      	subs	r2, #1
 80033ac:	0552      	lsls	r2, r2, #21
 80033ae:	4311      	orrs	r1, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033b4:	0852      	lsrs	r2, r2, #1
 80033b6:	3a01      	subs	r2, #1
 80033b8:	0652      	lsls	r2, r2, #25
 80033ba:	4311      	orrs	r1, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033c0:	0912      	lsrs	r2, r2, #4
 80033c2:	0452      	lsls	r2, r2, #17
 80033c4:	430a      	orrs	r2, r1
 80033c6:	4941      	ldr	r1, [pc, #260]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033cc:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3e      	ldr	r2, [pc, #248]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 80033d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d8:	4b3c      	ldr	r3, [pc, #240]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4a3b      	ldr	r2, [pc, #236]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 80033de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e4:	f7fe fc14 	bl	8001c10 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7fe fc10 	bl	8001c10 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e062      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fe:	4b33      	ldr	r3, [pc, #204]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800340a:	e05a      	b.n	80034c2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e059      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003410:	4b2e      	ldr	r3, [pc, #184]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d152      	bne.n	80034c2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800341c:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003428:	4b28      	ldr	r3, [pc, #160]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a27      	ldr	r2, [pc, #156]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 800342e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003432:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003434:	f7fe fbec 	bl	8001c10 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fe fbe8 	bl	8001c10 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e03a      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x734>
 800345a:	e032      	b.n	80034c2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d02d      	beq.n	80034be <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800346c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800346e:	4b17      	ldr	r3, [pc, #92]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4a13      	ldr	r2, [pc, #76]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003480:	f023 0303 	bic.w	r3, r3, #3
 8003484:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4a10      	ldr	r2, [pc, #64]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 800348c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003494:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe fbbb 	bl	8001c10 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe fbb7 	bl	8001c10 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e009      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_RCC_OscConfig+0x7c4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f0      	bne.n	800349e <HAL_RCC_OscConfig+0x796>
 80034bc:	e001      	b.n	80034c2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	f99d808c 	.word	0xf99d808c

080034d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0c8      	b.n	800367a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b66      	ldr	r3, [pc, #408]	; (8003684 <HAL_RCC_ClockConfig+0x1b0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d910      	bls.n	8003518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b63      	ldr	r3, [pc, #396]	; (8003684 <HAL_RCC_ClockConfig+0x1b0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 0207 	bic.w	r2, r3, #7
 80034fe:	4961      	ldr	r1, [pc, #388]	; (8003684 <HAL_RCC_ClockConfig+0x1b0>)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_RCC_ClockConfig+0x1b0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0b0      	b.n	800367a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d04c      	beq.n	80035be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d107      	bne.n	800353c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352c:	4b56      	ldr	r3, [pc, #344]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d121      	bne.n	800357c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e09e      	b.n	800367a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d107      	bne.n	8003554 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003544:	4b50      	ldr	r3, [pc, #320]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d115      	bne.n	800357c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e092      	b.n	800367a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800355c:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e086      	b.n	800367a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800356c:	4b46      	ldr	r3, [pc, #280]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e07e      	b.n	800367a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800357c:	4b42      	ldr	r3, [pc, #264]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f023 0203 	bic.w	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	493f      	ldr	r1, [pc, #252]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358e:	f7fe fb3f 	bl	8001c10 <HAL_GetTick>
 8003592:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003594:	e00a      	b.n	80035ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003596:	f7fe fb3b 	bl	8001c10 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e066      	b.n	800367a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ac:	4b36      	ldr	r3, [pc, #216]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 020c 	and.w	r2, r3, #12
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d1eb      	bne.n	8003596 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ca:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	492c      	ldr	r1, [pc, #176]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCC_ClockConfig+0x1b0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d210      	bcs.n	800360c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b26      	ldr	r3, [pc, #152]	; (8003684 <HAL_RCC_ClockConfig+0x1b0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 0207 	bic.w	r2, r3, #7
 80035f2:	4924      	ldr	r1, [pc, #144]	; (8003684 <HAL_RCC_ClockConfig+0x1b0>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_RCC_ClockConfig+0x1b0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e036      	b.n	800367a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4918      	ldr	r1, [pc, #96]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003636:	4b14      	ldr	r3, [pc, #80]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4910      	ldr	r1, [pc, #64]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800364a:	f000 f825 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 800364e:	4602      	mov	r2, r0
 8003650:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <HAL_RCC_ClockConfig+0x1b4>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	490c      	ldr	r1, [pc, #48]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	5ccb      	ldrb	r3, [r1, r3]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	fa22 f303 	lsr.w	r3, r2, r3
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe fa7e 	bl	8001b70 <HAL_InitTick>
 8003674:	4603      	mov	r3, r0
 8003676:	72fb      	strb	r3, [r7, #11]

  return status;
 8003678:	7afb      	ldrb	r3, [r7, #11]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40022000 	.word	0x40022000
 8003688:	40021000 	.word	0x40021000
 800368c:	08006e1c 	.word	0x08006e1c
 8003690:	20000000 	.word	0x20000000
 8003694:	20000004 	.word	0x20000004

08003698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a6:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x34>
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d121      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d11e      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d107      	bne.n	80036e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036d8:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	e005      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036e8:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036f4:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10d      	bne.n	8003720 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d102      	bne.n	8003716 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003710:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	e004      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d101      	bne.n	8003720 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800371c:	4b23      	ldr	r3, [pc, #140]	; (80037ac <HAL_RCC_GetSysClockFreq+0x114>)
 800371e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d134      	bne.n	8003790 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003726:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d003      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0xa6>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d003      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0xac>
 800373c:	e005      	b.n	800374a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003740:	617b      	str	r3, [r7, #20]
      break;
 8003742:	e005      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <HAL_RCC_GetSysClockFreq+0x114>)
 8003746:	617b      	str	r3, [r7, #20]
      break;
 8003748:	e002      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	617b      	str	r3, [r7, #20]
      break;
 800374e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	3301      	adds	r3, #1
 800375c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	fb02 f203 	mul.w	r2, r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	0e5b      	lsrs	r3, r3, #25
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	3301      	adds	r3, #1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003790:	69bb      	ldr	r3, [r7, #24]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08006e34 	.word	0x08006e34
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	007a1200 	.word	0x007a1200

080037b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000000 	.word	0x20000000

080037c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037cc:	f7ff fff0 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	0a1b      	lsrs	r3, r3, #8
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	4904      	ldr	r1, [pc, #16]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037de:	5ccb      	ldrb	r3, [r1, r3]
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	08006e2c 	.word	0x08006e2c

080037f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037f8:	f7ff ffda 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0adb      	lsrs	r3, r3, #11
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4904      	ldr	r1, [pc, #16]	; (800381c <HAL_RCC_GetPCLK2Freq+0x28>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	08006e2c 	.word	0x08006e2c

08003820 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800382c:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003838:	f7ff f936 	bl	8002aa8 <HAL_PWREx_GetVoltageRange>
 800383c:	6178      	str	r0, [r7, #20]
 800383e:	e014      	b.n	800386a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003840:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	4a24      	ldr	r2, [pc, #144]	; (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384a:	6593      	str	r3, [r2, #88]	; 0x58
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003858:	f7ff f926 	bl	8002aa8 <HAL_PWREx_GetVoltageRange>
 800385c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	4a1d      	ldr	r2, [pc, #116]	; (80038d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003868:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003870:	d10b      	bne.n	800388a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b80      	cmp	r3, #128	; 0x80
 8003876:	d919      	bls.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2ba0      	cmp	r3, #160	; 0xa0
 800387c:	d902      	bls.n	8003884 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800387e:	2302      	movs	r3, #2
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	e013      	b.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003884:	2301      	movs	r3, #1
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	e010      	b.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b80      	cmp	r3, #128	; 0x80
 800388e:	d902      	bls.n	8003896 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003890:	2303      	movs	r3, #3
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	e00a      	b.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d102      	bne.n	80038a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800389c:	2302      	movs	r3, #2
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	e004      	b.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b70      	cmp	r3, #112	; 0x70
 80038a6:	d101      	bne.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a8:	2301      	movs	r3, #1
 80038aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 0207 	bic.w	r2, r3, #7
 80038b4:	4909      	ldr	r1, [pc, #36]	; (80038dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038bc:	4b07      	ldr	r3, [pc, #28]	; (80038dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d001      	beq.n	80038ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40022000 	.word	0x40022000

080038e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038e8:	2300      	movs	r3, #0
 80038ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038ec:	2300      	movs	r3, #0
 80038ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d041      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003900:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003904:	d02a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003906:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800390a:	d824      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800390c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003910:	d008      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003912:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003916:	d81e      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800391c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003920:	d010      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003922:	e018      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003924:	4b86      	ldr	r3, [pc, #536]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4a85      	ldr	r2, [pc, #532]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003930:	e015      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f000 facb 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003942:	e00c      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3320      	adds	r3, #32
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fbb6 	bl	80040bc <RCCEx_PLLSAI2_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003954:	e003      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	74fb      	strb	r3, [r7, #19]
      break;
 800395a:	e000      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800395c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003964:	4b76      	ldr	r3, [pc, #472]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003972:	4973      	ldr	r1, [pc, #460]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800397a:	e001      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d041      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003990:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003994:	d02a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003996:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800399a:	d824      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800399c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039a6:	d81e      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b0:	d010      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039b2:	e018      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b4:	4b62      	ldr	r3, [pc, #392]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a61      	ldr	r2, [pc, #388]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039c0:	e015      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fa83 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d2:	e00c      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3320      	adds	r3, #32
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fb6e 	bl	80040bc <RCCEx_PLLSAI2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039e4:	e003      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	74fb      	strb	r3, [r7, #19]
      break;
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039f4:	4b52      	ldr	r3, [pc, #328]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a02:	494f      	ldr	r1, [pc, #316]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80a0 	beq.w	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00d      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a38:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	4a40      	ldr	r2, [pc, #256]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6593      	str	r3, [r2, #88]	; 0x58
 8003a44:	4b3e      	ldr	r3, [pc, #248]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a54:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a3a      	ldr	r2, [pc, #232]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a60:	f7fe f8d6 	bl	8001c10 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a66:	e009      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7fe f8d2 	bl	8001c10 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	74fb      	strb	r3, [r7, #19]
        break;
 8003a7a:	e005      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a7c:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ef      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d15c      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a8e:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01f      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d019      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	4a1c      	ldr	r2, [pc, #112]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fe f891 	bl	8001c10 <HAL_GetTick>
 8003aee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af0:	e00b      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fe f88d 	bl	8001c10 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d902      	bls.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	74fb      	strb	r3, [r7, #19]
            break;
 8003b08:	e006      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ec      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	4904      	ldr	r1, [pc, #16]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b36:	e009      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	74bb      	strb	r3, [r7, #18]
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b4c:	7c7b      	ldrb	r3, [r7, #17]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d105      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b52:	4b9e      	ldr	r3, [pc, #632]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	4a9d      	ldr	r2, [pc, #628]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b6a:	4b98      	ldr	r3, [pc, #608]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	f023 0203 	bic.w	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	4994      	ldr	r1, [pc, #592]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b8c:	4b8f      	ldr	r3, [pc, #572]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f023 020c 	bic.w	r2, r3, #12
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	498c      	ldr	r1, [pc, #560]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bae:	4b87      	ldr	r3, [pc, #540]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	4983      	ldr	r1, [pc, #524]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd0:	4b7e      	ldr	r3, [pc, #504]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	497b      	ldr	r1, [pc, #492]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bf2:	4b76      	ldr	r3, [pc, #472]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c00:	4972      	ldr	r1, [pc, #456]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c14:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	496a      	ldr	r1, [pc, #424]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c36:	4b65      	ldr	r3, [pc, #404]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	4961      	ldr	r1, [pc, #388]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c58:	4b5c      	ldr	r3, [pc, #368]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c66:	4959      	ldr	r1, [pc, #356]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c7a:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c88:	4950      	ldr	r1, [pc, #320]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003caa:	4948      	ldr	r1, [pc, #288]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cbe:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	493f      	ldr	r1, [pc, #252]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d028      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ce0:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cee:	4937      	ldr	r1, [pc, #220]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d00:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a31      	ldr	r2, [pc, #196]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d0a:	60d3      	str	r3, [r2, #12]
 8003d0c:	e011      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d16:	d10c      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f8d8 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d28:	7cfb      	ldrb	r3, [r7, #19]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d2e:	7cfb      	ldrb	r3, [r7, #19]
 8003d30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d028      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d3e:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	491f      	ldr	r1, [pc, #124]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d5c:	d106      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d68:	60d3      	str	r3, [r2, #12]
 8003d6a:	e011      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 f8a9 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d02b      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	4908      	ldr	r1, [pc, #32]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dba:	d109      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a02      	ldr	r2, [pc, #8]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc6:	60d3      	str	r3, [r2, #12]
 8003dc8:	e014      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	2101      	movs	r1, #1
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f877 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d02f      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0e:	4928      	ldr	r1, [pc, #160]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e1e:	d10d      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f854 	bl	8003ed4 <RCCEx_PLLSAI1_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d014      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	74bb      	strb	r3, [r7, #18]
 8003e3a:	e011      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3320      	adds	r3, #32
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f935 	bl	80040bc <RCCEx_PLLSAI2_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7a:	490d      	ldr	r1, [pc, #52]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9e:	4904      	ldr	r1, [pc, #16]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ea6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000

08003eb4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ebe:	f043 0304 	orr.w	r3, r3, #4
 8003ec2:	6013      	str	r3, [r2, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000

08003ed4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ee2:	4b75      	ldr	r3, [pc, #468]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eee:	4b72      	ldr	r3, [pc, #456]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0203 	and.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10d      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
       ||
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f06:	4b6c      	ldr	r3, [pc, #432]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
       ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d047      	beq.n	8003faa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
 8003f1e:	e044      	b.n	8003faa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d018      	beq.n	8003f5a <RCCEx_PLLSAI1_Config+0x86>
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d825      	bhi.n	8003f78 <RCCEx_PLLSAI1_Config+0xa4>
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d002      	beq.n	8003f36 <RCCEx_PLLSAI1_Config+0x62>
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d009      	beq.n	8003f48 <RCCEx_PLLSAI1_Config+0x74>
 8003f34:	e020      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f36:	4b60      	ldr	r3, [pc, #384]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11d      	bne.n	8003f7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f46:	e01a      	b.n	8003f7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f48:	4b5b      	ldr	r3, [pc, #364]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d116      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f58:	e013      	b.n	8003f82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f5a:	4b57      	ldr	r3, [pc, #348]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10f      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f66:	4b54      	ldr	r3, [pc, #336]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f76:	e006      	b.n	8003f86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7c:	e004      	b.n	8003f88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10d      	bne.n	8003faa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f8e:	4b4a      	ldr	r3, [pc, #296]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	4944      	ldr	r1, [pc, #272]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d17d      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fb0:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a40      	ldr	r2, [pc, #256]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbc:	f7fd fe28 	bl	8001c10 <HAL_GetTick>
 8003fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fc2:	e009      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fc4:	f7fd fe24 	bl	8001c10 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d902      	bls.n	8003fd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fd6:	e005      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fd8:	4b37      	ldr	r3, [pc, #220]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ef      	bne.n	8003fc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d160      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d111      	bne.n	8004014 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ff0:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6892      	ldr	r2, [r2, #8]
 8004000:	0211      	lsls	r1, r2, #8
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	0912      	lsrs	r2, r2, #4
 8004008:	0452      	lsls	r2, r2, #17
 800400a:	430a      	orrs	r2, r1
 800400c:	492a      	ldr	r1, [pc, #168]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	610b      	str	r3, [r1, #16]
 8004012:	e027      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d112      	bne.n	8004040 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800401a:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004022:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6892      	ldr	r2, [r2, #8]
 800402a:	0211      	lsls	r1, r2, #8
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6912      	ldr	r2, [r2, #16]
 8004030:	0852      	lsrs	r2, r2, #1
 8004032:	3a01      	subs	r2, #1
 8004034:	0552      	lsls	r2, r2, #21
 8004036:	430a      	orrs	r2, r1
 8004038:	491f      	ldr	r1, [pc, #124]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	610b      	str	r3, [r1, #16]
 800403e:	e011      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004048:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6892      	ldr	r2, [r2, #8]
 8004050:	0211      	lsls	r1, r2, #8
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6952      	ldr	r2, [r2, #20]
 8004056:	0852      	lsrs	r2, r2, #1
 8004058:	3a01      	subs	r2, #1
 800405a:	0652      	lsls	r2, r2, #25
 800405c:	430a      	orrs	r2, r1
 800405e:	4916      	ldr	r1, [pc, #88]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800406e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd fdce 	bl	8001c10 <HAL_GetTick>
 8004074:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004076:	e009      	b.n	800408c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004078:	f7fd fdca 	bl	8001c10 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d902      	bls.n	800408c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	73fb      	strb	r3, [r7, #15]
          break;
 800408a:	e005      	b.n	8004098 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ef      	beq.n	8004078 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	4904      	ldr	r1, [pc, #16]	; (80040b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000

080040bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ca:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d018      	beq.n	8004108 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040d6:	4b67      	ldr	r3, [pc, #412]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0203 	and.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d10d      	bne.n	8004102 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
       ||
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040ee:	4b61      	ldr	r3, [pc, #388]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
       ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d047      	beq.n	8004192 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
 8004106:	e044      	b.n	8004192 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d018      	beq.n	8004142 <RCCEx_PLLSAI2_Config+0x86>
 8004110:	2b03      	cmp	r3, #3
 8004112:	d825      	bhi.n	8004160 <RCCEx_PLLSAI2_Config+0xa4>
 8004114:	2b01      	cmp	r3, #1
 8004116:	d002      	beq.n	800411e <RCCEx_PLLSAI2_Config+0x62>
 8004118:	2b02      	cmp	r3, #2
 800411a:	d009      	beq.n	8004130 <RCCEx_PLLSAI2_Config+0x74>
 800411c:	e020      	b.n	8004160 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800411e:	4b55      	ldr	r3, [pc, #340]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d11d      	bne.n	8004166 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412e:	e01a      	b.n	8004166 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004130:	4b50      	ldr	r3, [pc, #320]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d116      	bne.n	800416a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004140:	e013      	b.n	800416a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004142:	4b4c      	ldr	r3, [pc, #304]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800414e:	4b49      	ldr	r3, [pc, #292]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800415e:	e006      	b.n	800416e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      break;
 8004164:	e004      	b.n	8004170 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800416e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10d      	bne.n	8004192 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004176:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6819      	ldr	r1, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	3b01      	subs	r3, #1
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	430b      	orrs	r3, r1
 800418c:	4939      	ldr	r1, [pc, #228]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d167      	bne.n	8004268 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004198:	4b36      	ldr	r3, [pc, #216]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a35      	ldr	r2, [pc, #212]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a4:	f7fd fd34 	bl	8001c10 <HAL_GetTick>
 80041a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041aa:	e009      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041ac:	f7fd fd30 	bl	8001c10 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d902      	bls.n	80041c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	73fb      	strb	r3, [r7, #15]
        break;
 80041be:	e005      	b.n	80041cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041c0:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ef      	bne.n	80041ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d14a      	bne.n	8004268 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d111      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041d8:	4b26      	ldr	r3, [pc, #152]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6892      	ldr	r2, [r2, #8]
 80041e8:	0211      	lsls	r1, r2, #8
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68d2      	ldr	r2, [r2, #12]
 80041ee:	0912      	lsrs	r2, r2, #4
 80041f0:	0452      	lsls	r2, r2, #17
 80041f2:	430a      	orrs	r2, r1
 80041f4:	491f      	ldr	r1, [pc, #124]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	614b      	str	r3, [r1, #20]
 80041fa:	e011      	b.n	8004220 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004204:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6892      	ldr	r2, [r2, #8]
 800420c:	0211      	lsls	r1, r2, #8
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6912      	ldr	r2, [r2, #16]
 8004212:	0852      	lsrs	r2, r2, #1
 8004214:	3a01      	subs	r2, #1
 8004216:	0652      	lsls	r2, r2, #25
 8004218:	430a      	orrs	r2, r1
 800421a:	4916      	ldr	r1, [pc, #88]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a13      	ldr	r2, [pc, #76]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fd fcf0 	bl	8001c10 <HAL_GetTick>
 8004230:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004232:	e009      	b.n	8004248 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004234:	f7fd fcec 	bl	8001c10 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d902      	bls.n	8004248 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	73fb      	strb	r3, [r7, #15]
          break;
 8004246:	e005      	b.n	8004254 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ef      	beq.n	8004234 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4904      	ldr	r1, [pc, #16]	; (8004274 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004264:	4313      	orrs	r3, r2
 8004266:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000

08004278 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e095      	b.n	80043b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800429a:	d009      	beq.n	80042b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	61da      	str	r2, [r3, #28]
 80042a2:	e005      	b.n	80042b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd f93e 	bl	800154c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042f0:	d902      	bls.n	80042f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	e002      	b.n	80042fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004306:	d007      	beq.n	8004318 <HAL_SPI_Init+0xa0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	ea42 0103 	orr.w	r1, r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	0c1b      	lsrs	r3, r3, #16
 8004374:	f003 0204 	and.w	r2, r3, #4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004394:	ea42 0103 	orr.w	r1, r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e049      	b.n	8004464 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d106      	bne.n	80043ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fd f8f5 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	4619      	mov	r1, r3
 80043fc:	4610      	mov	r0, r2
 80043fe:	f000 fa43 	bl	8004888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b02      	cmp	r3, #2
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0202 	mvn.w	r2, #2
 8004498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f9cb 	bl	800484a <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f9bd 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f9ce 	bl	800485e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d122      	bne.n	800451c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d11b      	bne.n	800451c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0204 	mvn.w	r2, #4
 80044ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9a1 	bl	800484a <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f993 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f9a4 	bl	800485e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b08      	cmp	r3, #8
 8004528:	d122      	bne.n	8004570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b08      	cmp	r3, #8
 8004536:	d11b      	bne.n	8004570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0208 	mvn.w	r2, #8
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2204      	movs	r2, #4
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f977 	bl	800484a <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f969 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f97a 	bl	800485e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b10      	cmp	r3, #16
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b10      	cmp	r3, #16
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0210 	mvn.w	r2, #16
 8004594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2208      	movs	r2, #8
 800459a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f94d 	bl	800484a <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f93f 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f950 	bl	800485e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0201 	mvn.w	r2, #1
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc f8da 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b80      	cmp	r3, #128	; 0x80
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fafc 	bl	8004c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d10e      	bne.n	800464a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d107      	bne.n	800464a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 faef 	bl	8004c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d10e      	bne.n	8004676 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d107      	bne.n	8004676 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800466e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f8fe 	bl	8004872 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b20      	cmp	r3, #32
 8004682:	d10e      	bne.n	80046a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b20      	cmp	r3, #32
 8004690:	d107      	bne.n	80046a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f06f 0220 	mvn.w	r2, #32
 800469a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 faaf 	bl	8004c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_ConfigClockSource+0x18>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0b5      	b.n	800482e <HAL_TIM_ConfigClockSource+0x184>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	d03e      	beq.n	800477e <HAL_TIM_ConfigClockSource+0xd4>
 8004700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004704:	f200 8087 	bhi.w	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470c:	f000 8085 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x170>
 8004710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004714:	d87f      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 8004716:	2b70      	cmp	r3, #112	; 0x70
 8004718:	d01a      	beq.n	8004750 <HAL_TIM_ConfigClockSource+0xa6>
 800471a:	2b70      	cmp	r3, #112	; 0x70
 800471c:	d87b      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 800471e:	2b60      	cmp	r3, #96	; 0x60
 8004720:	d050      	beq.n	80047c4 <HAL_TIM_ConfigClockSource+0x11a>
 8004722:	2b60      	cmp	r3, #96	; 0x60
 8004724:	d877      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 8004726:	2b50      	cmp	r3, #80	; 0x50
 8004728:	d03c      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0xfa>
 800472a:	2b50      	cmp	r3, #80	; 0x50
 800472c:	d873      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 800472e:	2b40      	cmp	r3, #64	; 0x40
 8004730:	d058      	beq.n	80047e4 <HAL_TIM_ConfigClockSource+0x13a>
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d86f      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 8004736:	2b30      	cmp	r3, #48	; 0x30
 8004738:	d064      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0x15a>
 800473a:	2b30      	cmp	r3, #48	; 0x30
 800473c:	d86b      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 800473e:	2b20      	cmp	r3, #32
 8004740:	d060      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0x15a>
 8004742:	2b20      	cmp	r3, #32
 8004744:	d867      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d05c      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0x15a>
 800474a:	2b10      	cmp	r3, #16
 800474c:	d05a      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800474e:	e062      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6899      	ldr	r1, [r3, #8]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f000 f9a6 	bl	8004ab0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004772:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	609a      	str	r2, [r3, #8]
      break;
 800477c:	e04e      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6899      	ldr	r1, [r3, #8]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f000 f98f 	bl	8004ab0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047a0:	609a      	str	r2, [r3, #8]
      break;
 80047a2:	e03b      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6859      	ldr	r1, [r3, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	461a      	mov	r2, r3
 80047b2:	f000 f903 	bl	80049bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2150      	movs	r1, #80	; 0x50
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 f95c 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80047c2:	e02b      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6859      	ldr	r1, [r3, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	461a      	mov	r2, r3
 80047d2:	f000 f922 	bl	8004a1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2160      	movs	r1, #96	; 0x60
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f94c 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80047e2:	e01b      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	461a      	mov	r2, r3
 80047f2:	f000 f8e3 	bl	80049bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2140      	movs	r1, #64	; 0x40
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 f93c 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 8004802:	e00b      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 f933 	bl	8004a7a <TIM_ITRx_SetConfig>
        break;
 8004814:	e002      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800481a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a40      	ldr	r2, [pc, #256]	; (800499c <TIM_Base_SetConfig+0x114>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d013      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d00f      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a3d      	ldr	r2, [pc, #244]	; (80049a0 <TIM_Base_SetConfig+0x118>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00b      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3c      	ldr	r2, [pc, #240]	; (80049a4 <TIM_Base_SetConfig+0x11c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3b      	ldr	r2, [pc, #236]	; (80049a8 <TIM_Base_SetConfig+0x120>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3a      	ldr	r2, [pc, #232]	; (80049ac <TIM_Base_SetConfig+0x124>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d108      	bne.n	80048da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2f      	ldr	r2, [pc, #188]	; (800499c <TIM_Base_SetConfig+0x114>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01f      	beq.n	8004922 <TIM_Base_SetConfig+0x9a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d01b      	beq.n	8004922 <TIM_Base_SetConfig+0x9a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2c      	ldr	r2, [pc, #176]	; (80049a0 <TIM_Base_SetConfig+0x118>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d017      	beq.n	8004922 <TIM_Base_SetConfig+0x9a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2b      	ldr	r2, [pc, #172]	; (80049a4 <TIM_Base_SetConfig+0x11c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <TIM_Base_SetConfig+0x9a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <TIM_Base_SetConfig+0x120>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00f      	beq.n	8004922 <TIM_Base_SetConfig+0x9a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a29      	ldr	r2, [pc, #164]	; (80049ac <TIM_Base_SetConfig+0x124>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00b      	beq.n	8004922 <TIM_Base_SetConfig+0x9a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a28      	ldr	r2, [pc, #160]	; (80049b0 <TIM_Base_SetConfig+0x128>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d007      	beq.n	8004922 <TIM_Base_SetConfig+0x9a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a27      	ldr	r2, [pc, #156]	; (80049b4 <TIM_Base_SetConfig+0x12c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d003      	beq.n	8004922 <TIM_Base_SetConfig+0x9a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <TIM_Base_SetConfig+0x130>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d108      	bne.n	8004934 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a10      	ldr	r2, [pc, #64]	; (800499c <TIM_Base_SetConfig+0x114>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00f      	beq.n	8004980 <TIM_Base_SetConfig+0xf8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a12      	ldr	r2, [pc, #72]	; (80049ac <TIM_Base_SetConfig+0x124>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00b      	beq.n	8004980 <TIM_Base_SetConfig+0xf8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <TIM_Base_SetConfig+0x128>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <TIM_Base_SetConfig+0xf8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <TIM_Base_SetConfig+0x12c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_Base_SetConfig+0xf8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a0f      	ldr	r2, [pc, #60]	; (80049b8 <TIM_Base_SetConfig+0x130>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d103      	bne.n	8004988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	615a      	str	r2, [r3, #20]
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	40013400 	.word	0x40013400
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40014400 	.word	0x40014400
 80049b8:	40014800 	.word	0x40014800

080049bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 030a 	bic.w	r3, r3, #10
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b087      	sub	sp, #28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f023 0210 	bic.w	r2, r3, #16
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	031b      	lsls	r3, r3, #12
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f043 0307 	orr.w	r3, r3, #7
 8004a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	609a      	str	r2, [r3, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	021a      	lsls	r2, r3, #8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	609a      	str	r2, [r3, #8]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e068      	b.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d01d      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7a:	d018      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00e      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a13      	ldr	r2, [pc, #76]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d004      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a14      	ldr	r2, [pc, #80]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d10c      	bne.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	40013400 	.word	0x40013400
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40014000 	.word	0x40014000

08004c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e040      	b.n	8004cd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc fd1c 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2224      	movs	r2, #36	; 0x24
 8004c68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fae4 	bl	8005248 <UART_SetConfig>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e022      	b.n	8004cd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fd62 	bl	800575c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fde9 	bl	80058a0 <UART_CheckIdleState>
 8004cce:	4603      	mov	r3, r0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d145      	bne.n	8004d7a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_UART_Transmit_IT+0x22>
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e03e      	b.n	8004d7c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Transmit_IT+0x34>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e037      	b.n	8004d7c <HAL_UART_Transmit_IT+0xa4>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	88fa      	ldrh	r2, [r7, #6]
 8004d26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2221      	movs	r2, #33	; 0x21
 8004d3c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d46:	d107      	bne.n	8004d58 <HAL_UART_Transmit_IT+0x80>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d103      	bne.n	8004d58 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4a0d      	ldr	r2, [pc, #52]	; (8004d88 <HAL_UART_Transmit_IT+0xb0>)
 8004d54:	669a      	str	r2, [r3, #104]	; 0x68
 8004d56:	e002      	b.n	8004d5e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a0c      	ldr	r2, [pc, #48]	; (8004d8c <HAL_UART_Transmit_IT+0xb4>)
 8004d5c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d74:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e000      	b.n	8004d7c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	08005c3b 	.word	0x08005c3b
 8004d8c:	08005bc7 	.word	0x08005bc7

08004d90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d131      	bne.n	8004e0a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_UART_Receive_IT+0x22>
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e02a      	b.n	8004e0c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_UART_Receive_IT+0x34>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e023      	b.n	8004e0c <HAL_UART_Receive_IT+0x7c>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <HAL_UART_Receive_IT+0x84>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004df8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fe13 	bl	8005a2c <UART_Start_Receive_IT>
 8004e06:	4603      	mov	r3, r0
 8004e08:	e000      	b.n	8004e0c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40008000 	.word	0x40008000

08004e18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e3e:	4013      	ands	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d113      	bne.n	8004e70 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00e      	beq.n	8004e70 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 81ce 	beq.w	8005202 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
      }
      return;
 8004e6e:	e1c8      	b.n	8005202 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80e3 	beq.w	800503e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d105      	bne.n	8004e8e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4ba6      	ldr	r3, [pc, #664]	; (8005120 <HAL_UART_IRQHandler+0x308>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80d8 	beq.w	800503e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d010      	beq.n	8004eba <HAL_UART_IRQHandler+0xa2>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb0:	f043 0201 	orr.w	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <HAL_UART_IRQHandler+0xce>
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004edc:	f043 0204 	orr.w	r2, r3, #4
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <HAL_UART_IRQHandler+0xfa>
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2204      	movs	r2, #4
 8004f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f08:	f043 0202 	orr.w	r2, r3, #2
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2208      	movs	r2, #8
 8004f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f3e:	f043 0208 	orr.w	r2, r3, #8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d011      	beq.n	8004f76 <HAL_UART_IRQHandler+0x15e>
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00c      	beq.n	8004f76 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6c:	f043 0220 	orr.w	r2, r3, #32
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8142 	beq.w	8005206 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00c      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d004      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d031      	beq.n	800502a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fdb8 	bl	8005b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b40      	cmp	r3, #64	; 0x40
 8004fd8:	d123      	bne.n	8005022 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d013      	beq.n	800501a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	4a4b      	ldr	r2, [pc, #300]	; (8005124 <HAL_UART_IRQHandler+0x30c>)
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd f892 	bl	8002128 <HAL_DMA_Abort_IT>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d017      	beq.n	800503a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005014:	4610      	mov	r0, r2
 8005016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005018:	e00f      	b.n	800503a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f8fe 	bl	800521c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005020:	e00b      	b.n	800503a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f8fa 	bl	800521c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	e007      	b.n	800503a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f8f6 	bl	800521c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005038:	e0e5      	b.n	8005206 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503a:	bf00      	nop
    return;
 800503c:	e0e3      	b.n	8005206 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005042:	2b01      	cmp	r3, #1
 8005044:	f040 80a9 	bne.w	800519a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 80a3 	beq.w	800519a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 809d 	beq.w	800519a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2210      	movs	r2, #16
 8005066:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	d158      	bne.n	8005128 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005080:	893b      	ldrh	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 80c1 	beq.w	800520a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800508e:	893a      	ldrh	r2, [r7, #8]
 8005090:	429a      	cmp	r2, r3
 8005092:	f080 80ba 	bcs.w	800520a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	893a      	ldrh	r2, [r7, #8]
 800509a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d12a      	bne.n	8005104 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050dc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0210 	bic.w	r2, r2, #16
 80050f8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fc ffd4 	bl	80020ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005110:	b29b      	uxth	r3, r3
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	b29b      	uxth	r3, r3
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f889 	bl	8005230 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800511e:	e074      	b.n	800520a <HAL_UART_IRQHandler+0x3f2>
 8005120:	04000120 	.word	0x04000120
 8005124:	08005b9b 	.word	0x08005b9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005134:	b29b      	uxth	r3, r3
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d063      	beq.n	800520e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8005146:	897b      	ldrh	r3, [r7, #10]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d060      	beq.n	800520e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800515a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0210 	bic.w	r2, r2, #16
 800518c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800518e:	897b      	ldrh	r3, [r7, #10]
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f84c 	bl	8005230 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005198:	e039      	b.n	800520e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00d      	beq.n	80051c0 <HAL_UART_IRQHandler+0x3a8>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fe6d 	bl	8005e98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051be:	e029      	b.n	8005214 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00d      	beq.n	80051e6 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01a      	beq.n	8005212 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
    }
    return;
 80051e4:	e015      	b.n	8005212 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d011      	beq.n	8005214 <HAL_UART_IRQHandler+0x3fc>
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fd5b 	bl	8005cb6 <UART_EndTransmit_IT>
    return;
 8005200:	e008      	b.n	8005214 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005202:	bf00      	nop
 8005204:	e006      	b.n	8005214 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005206:	bf00      	nop
 8005208:	e004      	b.n	8005214 <HAL_UART_IRQHandler+0x3fc>
      return;
 800520a:	bf00      	nop
 800520c:	e002      	b.n	8005214 <HAL_UART_IRQHandler+0x3fc>
      return;
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005212:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop

0800521c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005248:	b5b0      	push	{r4, r5, r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	4313      	orrs	r3, r2
 800526a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4bad      	ldr	r3, [pc, #692]	; (8005528 <UART_SetConfig+0x2e0>)
 8005274:	4013      	ands	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	69f9      	ldr	r1, [r7, #28]
 800527c:	430b      	orrs	r3, r1
 800527e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4aa2      	ldr	r2, [pc, #648]	; (800552c <UART_SetConfig+0x2e4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a99      	ldr	r2, [pc, #612]	; (8005530 <UART_SetConfig+0x2e8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d121      	bne.n	8005312 <UART_SetConfig+0xca>
 80052ce:	4b99      	ldr	r3, [pc, #612]	; (8005534 <UART_SetConfig+0x2ec>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d817      	bhi.n	800530c <UART_SetConfig+0xc4>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x9c>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005301 	.word	0x08005301
 80052ec:	080052fb 	.word	0x080052fb
 80052f0:	08005307 	.word	0x08005307
 80052f4:	2301      	movs	r3, #1
 80052f6:	76fb      	strb	r3, [r7, #27]
 80052f8:	e0e7      	b.n	80054ca <UART_SetConfig+0x282>
 80052fa:	2302      	movs	r3, #2
 80052fc:	76fb      	strb	r3, [r7, #27]
 80052fe:	e0e4      	b.n	80054ca <UART_SetConfig+0x282>
 8005300:	2304      	movs	r3, #4
 8005302:	76fb      	strb	r3, [r7, #27]
 8005304:	e0e1      	b.n	80054ca <UART_SetConfig+0x282>
 8005306:	2308      	movs	r3, #8
 8005308:	76fb      	strb	r3, [r7, #27]
 800530a:	e0de      	b.n	80054ca <UART_SetConfig+0x282>
 800530c:	2310      	movs	r3, #16
 800530e:	76fb      	strb	r3, [r7, #27]
 8005310:	e0db      	b.n	80054ca <UART_SetConfig+0x282>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a88      	ldr	r2, [pc, #544]	; (8005538 <UART_SetConfig+0x2f0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d132      	bne.n	8005382 <UART_SetConfig+0x13a>
 800531c:	4b85      	ldr	r3, [pc, #532]	; (8005534 <UART_SetConfig+0x2ec>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d828      	bhi.n	800537c <UART_SetConfig+0x134>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0xe8>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005365 	.word	0x08005365
 8005334:	0800537d 	.word	0x0800537d
 8005338:	0800537d 	.word	0x0800537d
 800533c:	0800537d 	.word	0x0800537d
 8005340:	08005371 	.word	0x08005371
 8005344:	0800537d 	.word	0x0800537d
 8005348:	0800537d 	.word	0x0800537d
 800534c:	0800537d 	.word	0x0800537d
 8005350:	0800536b 	.word	0x0800536b
 8005354:	0800537d 	.word	0x0800537d
 8005358:	0800537d 	.word	0x0800537d
 800535c:	0800537d 	.word	0x0800537d
 8005360:	08005377 	.word	0x08005377
 8005364:	2300      	movs	r3, #0
 8005366:	76fb      	strb	r3, [r7, #27]
 8005368:	e0af      	b.n	80054ca <UART_SetConfig+0x282>
 800536a:	2302      	movs	r3, #2
 800536c:	76fb      	strb	r3, [r7, #27]
 800536e:	e0ac      	b.n	80054ca <UART_SetConfig+0x282>
 8005370:	2304      	movs	r3, #4
 8005372:	76fb      	strb	r3, [r7, #27]
 8005374:	e0a9      	b.n	80054ca <UART_SetConfig+0x282>
 8005376:	2308      	movs	r3, #8
 8005378:	76fb      	strb	r3, [r7, #27]
 800537a:	e0a6      	b.n	80054ca <UART_SetConfig+0x282>
 800537c:	2310      	movs	r3, #16
 800537e:	76fb      	strb	r3, [r7, #27]
 8005380:	e0a3      	b.n	80054ca <UART_SetConfig+0x282>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a6d      	ldr	r2, [pc, #436]	; (800553c <UART_SetConfig+0x2f4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d120      	bne.n	80053ce <UART_SetConfig+0x186>
 800538c:	4b69      	ldr	r3, [pc, #420]	; (8005534 <UART_SetConfig+0x2ec>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005396:	2b30      	cmp	r3, #48	; 0x30
 8005398:	d013      	beq.n	80053c2 <UART_SetConfig+0x17a>
 800539a:	2b30      	cmp	r3, #48	; 0x30
 800539c:	d814      	bhi.n	80053c8 <UART_SetConfig+0x180>
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d009      	beq.n	80053b6 <UART_SetConfig+0x16e>
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d810      	bhi.n	80053c8 <UART_SetConfig+0x180>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <UART_SetConfig+0x168>
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d006      	beq.n	80053bc <UART_SetConfig+0x174>
 80053ae:	e00b      	b.n	80053c8 <UART_SetConfig+0x180>
 80053b0:	2300      	movs	r3, #0
 80053b2:	76fb      	strb	r3, [r7, #27]
 80053b4:	e089      	b.n	80054ca <UART_SetConfig+0x282>
 80053b6:	2302      	movs	r3, #2
 80053b8:	76fb      	strb	r3, [r7, #27]
 80053ba:	e086      	b.n	80054ca <UART_SetConfig+0x282>
 80053bc:	2304      	movs	r3, #4
 80053be:	76fb      	strb	r3, [r7, #27]
 80053c0:	e083      	b.n	80054ca <UART_SetConfig+0x282>
 80053c2:	2308      	movs	r3, #8
 80053c4:	76fb      	strb	r3, [r7, #27]
 80053c6:	e080      	b.n	80054ca <UART_SetConfig+0x282>
 80053c8:	2310      	movs	r3, #16
 80053ca:	76fb      	strb	r3, [r7, #27]
 80053cc:	e07d      	b.n	80054ca <UART_SetConfig+0x282>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a5b      	ldr	r2, [pc, #364]	; (8005540 <UART_SetConfig+0x2f8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d120      	bne.n	800541a <UART_SetConfig+0x1d2>
 80053d8:	4b56      	ldr	r3, [pc, #344]	; (8005534 <UART_SetConfig+0x2ec>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053e2:	2bc0      	cmp	r3, #192	; 0xc0
 80053e4:	d013      	beq.n	800540e <UART_SetConfig+0x1c6>
 80053e6:	2bc0      	cmp	r3, #192	; 0xc0
 80053e8:	d814      	bhi.n	8005414 <UART_SetConfig+0x1cc>
 80053ea:	2b80      	cmp	r3, #128	; 0x80
 80053ec:	d009      	beq.n	8005402 <UART_SetConfig+0x1ba>
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d810      	bhi.n	8005414 <UART_SetConfig+0x1cc>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <UART_SetConfig+0x1b4>
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d006      	beq.n	8005408 <UART_SetConfig+0x1c0>
 80053fa:	e00b      	b.n	8005414 <UART_SetConfig+0x1cc>
 80053fc:	2300      	movs	r3, #0
 80053fe:	76fb      	strb	r3, [r7, #27]
 8005400:	e063      	b.n	80054ca <UART_SetConfig+0x282>
 8005402:	2302      	movs	r3, #2
 8005404:	76fb      	strb	r3, [r7, #27]
 8005406:	e060      	b.n	80054ca <UART_SetConfig+0x282>
 8005408:	2304      	movs	r3, #4
 800540a:	76fb      	strb	r3, [r7, #27]
 800540c:	e05d      	b.n	80054ca <UART_SetConfig+0x282>
 800540e:	2308      	movs	r3, #8
 8005410:	76fb      	strb	r3, [r7, #27]
 8005412:	e05a      	b.n	80054ca <UART_SetConfig+0x282>
 8005414:	2310      	movs	r3, #16
 8005416:	76fb      	strb	r3, [r7, #27]
 8005418:	e057      	b.n	80054ca <UART_SetConfig+0x282>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a49      	ldr	r2, [pc, #292]	; (8005544 <UART_SetConfig+0x2fc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d125      	bne.n	8005470 <UART_SetConfig+0x228>
 8005424:	4b43      	ldr	r3, [pc, #268]	; (8005534 <UART_SetConfig+0x2ec>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005432:	d017      	beq.n	8005464 <UART_SetConfig+0x21c>
 8005434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005438:	d817      	bhi.n	800546a <UART_SetConfig+0x222>
 800543a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543e:	d00b      	beq.n	8005458 <UART_SetConfig+0x210>
 8005440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005444:	d811      	bhi.n	800546a <UART_SetConfig+0x222>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <UART_SetConfig+0x20a>
 800544a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544e:	d006      	beq.n	800545e <UART_SetConfig+0x216>
 8005450:	e00b      	b.n	800546a <UART_SetConfig+0x222>
 8005452:	2300      	movs	r3, #0
 8005454:	76fb      	strb	r3, [r7, #27]
 8005456:	e038      	b.n	80054ca <UART_SetConfig+0x282>
 8005458:	2302      	movs	r3, #2
 800545a:	76fb      	strb	r3, [r7, #27]
 800545c:	e035      	b.n	80054ca <UART_SetConfig+0x282>
 800545e:	2304      	movs	r3, #4
 8005460:	76fb      	strb	r3, [r7, #27]
 8005462:	e032      	b.n	80054ca <UART_SetConfig+0x282>
 8005464:	2308      	movs	r3, #8
 8005466:	76fb      	strb	r3, [r7, #27]
 8005468:	e02f      	b.n	80054ca <UART_SetConfig+0x282>
 800546a:	2310      	movs	r3, #16
 800546c:	76fb      	strb	r3, [r7, #27]
 800546e:	e02c      	b.n	80054ca <UART_SetConfig+0x282>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2d      	ldr	r2, [pc, #180]	; (800552c <UART_SetConfig+0x2e4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d125      	bne.n	80054c6 <UART_SetConfig+0x27e>
 800547a:	4b2e      	ldr	r3, [pc, #184]	; (8005534 <UART_SetConfig+0x2ec>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005488:	d017      	beq.n	80054ba <UART_SetConfig+0x272>
 800548a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800548e:	d817      	bhi.n	80054c0 <UART_SetConfig+0x278>
 8005490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005494:	d00b      	beq.n	80054ae <UART_SetConfig+0x266>
 8005496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549a:	d811      	bhi.n	80054c0 <UART_SetConfig+0x278>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <UART_SetConfig+0x260>
 80054a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a4:	d006      	beq.n	80054b4 <UART_SetConfig+0x26c>
 80054a6:	e00b      	b.n	80054c0 <UART_SetConfig+0x278>
 80054a8:	2300      	movs	r3, #0
 80054aa:	76fb      	strb	r3, [r7, #27]
 80054ac:	e00d      	b.n	80054ca <UART_SetConfig+0x282>
 80054ae:	2302      	movs	r3, #2
 80054b0:	76fb      	strb	r3, [r7, #27]
 80054b2:	e00a      	b.n	80054ca <UART_SetConfig+0x282>
 80054b4:	2304      	movs	r3, #4
 80054b6:	76fb      	strb	r3, [r7, #27]
 80054b8:	e007      	b.n	80054ca <UART_SetConfig+0x282>
 80054ba:	2308      	movs	r3, #8
 80054bc:	76fb      	strb	r3, [r7, #27]
 80054be:	e004      	b.n	80054ca <UART_SetConfig+0x282>
 80054c0:	2310      	movs	r3, #16
 80054c2:	76fb      	strb	r3, [r7, #27]
 80054c4:	e001      	b.n	80054ca <UART_SetConfig+0x282>
 80054c6:	2310      	movs	r3, #16
 80054c8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a17      	ldr	r2, [pc, #92]	; (800552c <UART_SetConfig+0x2e4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	f040 8087 	bne.w	80055e4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054d6:	7efb      	ldrb	r3, [r7, #27]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d837      	bhi.n	800554c <UART_SetConfig+0x304>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <UART_SetConfig+0x29c>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	08005509 	.word	0x08005509
 80054e8:	0800554d 	.word	0x0800554d
 80054ec:	08005511 	.word	0x08005511
 80054f0:	0800554d 	.word	0x0800554d
 80054f4:	08005517 	.word	0x08005517
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	0800554d 	.word	0x0800554d
 8005500:	0800554d 	.word	0x0800554d
 8005504:	0800551f 	.word	0x0800551f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005508:	f7fe f95e 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 800550c:	6178      	str	r0, [r7, #20]
        break;
 800550e:	e022      	b.n	8005556 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005510:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <UART_SetConfig+0x300>)
 8005512:	617b      	str	r3, [r7, #20]
        break;
 8005514:	e01f      	b.n	8005556 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005516:	f7fe f8bf 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 800551a:	6178      	str	r0, [r7, #20]
        break;
 800551c:	e01b      	b.n	8005556 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005522:	617b      	str	r3, [r7, #20]
        break;
 8005524:	e017      	b.n	8005556 <UART_SetConfig+0x30e>
 8005526:	bf00      	nop
 8005528:	efff69f3 	.word	0xefff69f3
 800552c:	40008000 	.word	0x40008000
 8005530:	40013800 	.word	0x40013800
 8005534:	40021000 	.word	0x40021000
 8005538:	40004400 	.word	0x40004400
 800553c:	40004800 	.word	0x40004800
 8005540:	40004c00 	.word	0x40004c00
 8005544:	40005000 	.word	0x40005000
 8005548:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	76bb      	strb	r3, [r7, #26]
        break;
 8005554:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80f1 	beq.w	8005740 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	4413      	add	r3, r2
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	429a      	cmp	r2, r3
 800556c:	d305      	bcc.n	800557a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	429a      	cmp	r2, r3
 8005578:	d902      	bls.n	8005580 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	76bb      	strb	r3, [r7, #26]
 800557e:	e0df      	b.n	8005740 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	4618      	mov	r0, r3
 8005584:	f04f 0100 	mov.w	r1, #0
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	020b      	lsls	r3, r1, #8
 8005592:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005596:	0202      	lsls	r2, r0, #8
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	6849      	ldr	r1, [r1, #4]
 800559c:	0849      	lsrs	r1, r1, #1
 800559e:	4608      	mov	r0, r1
 80055a0:	f04f 0100 	mov.w	r1, #0
 80055a4:	1814      	adds	r4, r2, r0
 80055a6:	eb43 0501 	adc.w	r5, r3, r1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fa fe62 	bl	8000280 <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4613      	mov	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ca:	d308      	bcc.n	80055de <UART_SetConfig+0x396>
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d2:	d204      	bcs.n	80055de <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	60da      	str	r2, [r3, #12]
 80055dc:	e0b0      	b.n	8005740 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	76bb      	strb	r3, [r7, #26]
 80055e2:	e0ad      	b.n	8005740 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	d15c      	bne.n	80056a8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80055ee:	7efb      	ldrb	r3, [r7, #27]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d828      	bhi.n	8005646 <UART_SetConfig+0x3fe>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <UART_SetConfig+0x3b4>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005621 	.word	0x08005621
 8005600:	08005629 	.word	0x08005629
 8005604:	08005631 	.word	0x08005631
 8005608:	08005647 	.word	0x08005647
 800560c:	08005637 	.word	0x08005637
 8005610:	08005647 	.word	0x08005647
 8005614:	08005647 	.word	0x08005647
 8005618:	08005647 	.word	0x08005647
 800561c:	0800563f 	.word	0x0800563f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005620:	f7fe f8d2 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 8005624:	6178      	str	r0, [r7, #20]
        break;
 8005626:	e013      	b.n	8005650 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005628:	f7fe f8e4 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 800562c:	6178      	str	r0, [r7, #20]
        break;
 800562e:	e00f      	b.n	8005650 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005630:	4b49      	ldr	r3, [pc, #292]	; (8005758 <UART_SetConfig+0x510>)
 8005632:	617b      	str	r3, [r7, #20]
        break;
 8005634:	e00c      	b.n	8005650 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005636:	f7fe f82f 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 800563a:	6178      	str	r0, [r7, #20]
        break;
 800563c:	e008      	b.n	8005650 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005642:	617b      	str	r3, [r7, #20]
        break;
 8005644:	e004      	b.n	8005650 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	76bb      	strb	r3, [r7, #26]
        break;
 800564e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d074      	beq.n	8005740 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	005a      	lsls	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	441a      	add	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	fbb2 f3f3 	udiv	r3, r2, r3
 800566a:	b29b      	uxth	r3, r3
 800566c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b0f      	cmp	r3, #15
 8005672:	d916      	bls.n	80056a2 <UART_SetConfig+0x45a>
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567a:	d212      	bcs.n	80056a2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f023 030f 	bic.w	r3, r3, #15
 8005684:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	085b      	lsrs	r3, r3, #1
 800568a:	b29b      	uxth	r3, r3
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	b29a      	uxth	r2, r3
 8005692:	89fb      	ldrh	r3, [r7, #14]
 8005694:	4313      	orrs	r3, r2
 8005696:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	89fa      	ldrh	r2, [r7, #14]
 800569e:	60da      	str	r2, [r3, #12]
 80056a0:	e04e      	b.n	8005740 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	76bb      	strb	r3, [r7, #26]
 80056a6:	e04b      	b.n	8005740 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056a8:	7efb      	ldrb	r3, [r7, #27]
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d827      	bhi.n	80056fe <UART_SetConfig+0x4b6>
 80056ae:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <UART_SetConfig+0x46c>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	080056d9 	.word	0x080056d9
 80056b8:	080056e1 	.word	0x080056e1
 80056bc:	080056e9 	.word	0x080056e9
 80056c0:	080056ff 	.word	0x080056ff
 80056c4:	080056ef 	.word	0x080056ef
 80056c8:	080056ff 	.word	0x080056ff
 80056cc:	080056ff 	.word	0x080056ff
 80056d0:	080056ff 	.word	0x080056ff
 80056d4:	080056f7 	.word	0x080056f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d8:	f7fe f876 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 80056dc:	6178      	str	r0, [r7, #20]
        break;
 80056de:	e013      	b.n	8005708 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056e0:	f7fe f888 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 80056e4:	6178      	str	r0, [r7, #20]
        break;
 80056e6:	e00f      	b.n	8005708 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e8:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <UART_SetConfig+0x510>)
 80056ea:	617b      	str	r3, [r7, #20]
        break;
 80056ec:	e00c      	b.n	8005708 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ee:	f7fd ffd3 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 80056f2:	6178      	str	r0, [r7, #20]
        break;
 80056f4:	e008      	b.n	8005708 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fa:	617b      	str	r3, [r7, #20]
        break;
 80056fc:	e004      	b.n	8005708 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	76bb      	strb	r3, [r7, #26]
        break;
 8005706:	bf00      	nop
    }

    if (pclk != 0U)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d018      	beq.n	8005740 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	085a      	lsrs	r2, r3, #1
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	441a      	add	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	b29b      	uxth	r3, r3
 8005722:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2b0f      	cmp	r3, #15
 8005728:	d908      	bls.n	800573c <UART_SetConfig+0x4f4>
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005730:	d204      	bcs.n	800573c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	60da      	str	r2, [r3, #12]
 800573a:	e001      	b.n	8005740 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800574c:	7ebb      	ldrb	r3, [r7, #26]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bdb0      	pop	{r4, r5, r7, pc}
 8005756:	bf00      	nop
 8005758:	00f42400 	.word	0x00f42400

0800575c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01a      	beq.n	8005872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800585a:	d10a      	bne.n	8005872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
  }
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058b0:	f7fc f9ae 	bl	8001c10 <HAL_GetTick>
 80058b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d10e      	bne.n	80058e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f82d 	bl	8005932 <UART_WaitOnFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e023      	b.n	800592a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d10e      	bne.n	800590e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f817 	bl	8005932 <UART_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e00d      	b.n	800592a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	4613      	mov	r3, r2
 8005940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005942:	e05e      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d05a      	beq.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594c:	f7fc f960 	bl	8001c10 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	429a      	cmp	r2, r3
 800595a:	d302      	bcc.n	8005962 <UART_WaitOnFlagUntilTimeout+0x30>
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d11b      	bne.n	800599a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005970:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e043      	b.n	8005a22 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d02c      	beq.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b6:	d124      	bne.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059c0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0201 	bic.w	r2, r2, #1
 80059e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e00f      	b.n	8005a22 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	bf0c      	ite	eq
 8005a12:	2301      	moveq	r3, #1
 8005a14:	2300      	movne	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d091      	beq.n	8005944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	d10e      	bne.n	8005a7e <UART_Start_Receive_IT+0x52>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d105      	bne.n	8005a74 <UART_Start_Receive_IT+0x48>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a72:	e02d      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	22ff      	movs	r2, #255	; 0xff
 8005a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a7c:	e028      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10d      	bne.n	8005aa2 <UART_Start_Receive_IT+0x76>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <UART_Start_Receive_IT+0x6c>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	22ff      	movs	r2, #255	; 0xff
 8005a92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a96:	e01b      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	227f      	movs	r2, #127	; 0x7f
 8005a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aa0:	e016      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aaa:	d10d      	bne.n	8005ac8 <UART_Start_Receive_IT+0x9c>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <UART_Start_Receive_IT+0x92>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	227f      	movs	r2, #127	; 0x7f
 8005ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005abc:	e008      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	223f      	movs	r2, #63	; 0x3f
 8005ac2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ac6:	e003      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2222      	movs	r2, #34	; 0x22
 8005adc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af6:	d107      	bne.n	8005b08 <UART_Start_Receive_IT+0xdc>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d103      	bne.n	8005b08 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <UART_Start_Receive_IT+0x108>)
 8005b04:	665a      	str	r2, [r3, #100]	; 0x64
 8005b06:	e002      	b.n	8005b0e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a0b      	ldr	r2, [pc, #44]	; (8005b38 <UART_Start_Receive_IT+0x10c>)
 8005b0c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005b24:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	08005dc1 	.word	0x08005dc1
 8005b38:	08005ce9 	.word	0x08005ce9

08005b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b52:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0201 	bic.w	r2, r2, #1
 8005b62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d107      	bne.n	8005b7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0210 	bic.w	r2, r2, #16
 8005b7a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff fb2f 	bl	800521c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd2:	2b21      	cmp	r3, #33	; 0x21
 8005bd4:	d12b      	bne.n	8005c2e <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d110      	bne.n	8005c04 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bf0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c00:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005c02:	e014      	b.n	8005c2e <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c08:	781a      	ldrb	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	b292      	uxth	r2, r2
 8005c10:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c46:	2b21      	cmp	r3, #33	; 0x21
 8005c48:	d12f      	bne.n	8005caa <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d110      	bne.n	8005c78 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c64:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c74:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005c76:	e018      	b.n	8005caa <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	881a      	ldrh	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c8a:	b292      	uxth	r2, r2
 8005c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c92:	1c9a      	adds	r2, r3, #2
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005caa:	bf00      	nop
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ccc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fa fc4c 	bl	8000578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cf6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cfc:	2b22      	cmp	r3, #34	; 0x22
 8005cfe:	d151      	bne.n	8005da4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d06:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d08:	89bb      	ldrh	r3, [r7, #12]
 8005d0a:	b2d9      	uxtb	r1, r3
 8005d0c:	89fb      	ldrh	r3, [r7, #14]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d14:	400a      	ands	r2, r1
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d13a      	bne.n	8005db8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d50:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0201 	bic.w	r2, r2, #1
 8005d60:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10f      	bne.n	8005d96 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0210 	bic.w	r2, r2, #16
 8005d84:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fa4e 	bl	8005230 <HAL_UARTEx_RxEventCallback>
 8005d94:	e002      	b.n	8005d9c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fa fbfe 	bl	8000598 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005da2:	e009      	b.n	8005db8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	8b1b      	ldrh	r3, [r3, #24]
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0208 	orr.w	r2, r2, #8
 8005db4:	b292      	uxth	r2, r2
 8005db6:	831a      	strh	r2, [r3, #24]
}
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dce:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd4:	2b22      	cmp	r3, #34	; 0x22
 8005dd6:	d151      	bne.n	8005e7c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005dde:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005de6:	89ba      	ldrh	r2, [r7, #12]
 8005de8:	89fb      	ldrh	r3, [r7, #14]
 8005dea:	4013      	ands	r3, r2
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	1c9a      	adds	r2, r3, #2
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d13a      	bne.n	8005e90 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e28:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d10f      	bne.n	8005e6e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0210 	bic.w	r2, r2, #16
 8005e5c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff f9e2 	bl	8005230 <HAL_UARTEx_RxEventCallback>
 8005e6c:	e002      	b.n	8005e74 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fa fb92 	bl	8000598 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e7a:	e009      	b.n	8005e90 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	8b1b      	ldrh	r3, [r3, #24]
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0208 	orr.w	r2, r2, #8
 8005e8c:	b292      	uxth	r2, r2
 8005e8e:	831a      	strh	r2, [r3, #24]
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eac:	b084      	sub	sp, #16
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	f107 001c 	add.w	r0, r7, #28
 8005eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa24 	bl	8006318 <USB_CoreReset>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	639a      	str	r2, [r3, #56]	; 0x38
 8005ee6:	e005      	b.n	8005ef4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f00:	b004      	add	sp, #16
 8005f02:	4770      	bx	lr

08005f04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f023 0201 	bic.w	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b082      	sub	sp, #8
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d106      	bne.n	8005f52 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]
 8005f50:	e00b      	b.n	8005f6a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d106      	bne.n	8005f66 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60da      	str	r2, [r3, #12]
 8005f64:	e001      	b.n	8005f6a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e003      	b.n	8005f72 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005f6a:	2032      	movs	r0, #50	; 0x32
 8005f6c:	f7fb fe5c 	bl	8001c28 <HAL_Delay>

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b086      	sub	sp, #24
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f96:	2300      	movs	r3, #0
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	e009      	b.n	8005fb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	3340      	adds	r3, #64	; 0x40
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3301      	adds	r3, #1
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2b0e      	cmp	r3, #14
 8005fb4:	d9f2      	bls.n	8005f9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11c      	bne.n	8005ff6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fca:	f043 0302 	orr.w	r3, r3, #2
 8005fce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	e005      	b.n	8006002 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006008:	461a      	mov	r2, r3
 800600a:	2300      	movs	r3, #0
 800600c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006014:	4619      	mov	r1, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601c:	461a      	mov	r2, r3
 800601e:	680b      	ldr	r3, [r1, #0]
 8006020:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006022:	2103      	movs	r1, #3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f93d 	bl	80062a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800602a:	2110      	movs	r1, #16
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f8f1 	bl	8006214 <USB_FlushTxFifo>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f90f 	bl	8006260 <USB_FlushRxFifo>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	461a      	mov	r2, r3
 8006054:	2300      	movs	r3, #0
 8006056:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605e:	461a      	mov	r2, r3
 8006060:	2300      	movs	r3, #0
 8006062:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606a:	461a      	mov	r2, r3
 800606c:	2300      	movs	r3, #0
 800606e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	e043      	b.n	80060fe <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800608c:	d118      	bne.n	80060c0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	461a      	mov	r2, r3
 80060a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	e013      	b.n	80060d2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	461a      	mov	r2, r3
 80060b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e008      	b.n	80060d2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	461a      	mov	r2, r3
 80060ce:	2300      	movs	r3, #0
 80060d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060de:	461a      	mov	r2, r3
 80060e0:	2300      	movs	r3, #0
 80060e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	461a      	mov	r2, r3
 80060f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	3301      	adds	r3, #1
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	429a      	cmp	r2, r3
 8006104:	d3b7      	bcc.n	8006076 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	e043      	b.n	8006194 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800611e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006122:	d118      	bne.n	8006156 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006136:	461a      	mov	r2, r3
 8006138:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	e013      	b.n	8006168 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	461a      	mov	r2, r3
 800614e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e008      	b.n	8006168 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006162:	461a      	mov	r2, r3
 8006164:	2300      	movs	r3, #0
 8006166:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006174:	461a      	mov	r2, r3
 8006176:	2300      	movs	r3, #0
 8006178:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	461a      	mov	r2, r3
 8006188:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800618c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	3301      	adds	r3, #1
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	429a      	cmp	r2, r3
 800619a:	d3b7      	bcc.n	800610c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f043 0210 	orr.w	r2, r3, #16
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <USB_DevInit+0x294>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f043 0208 	orr.w	r2, r3, #8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d107      	bne.n	80061fe <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061f6:	f043 0304 	orr.w	r3, r3, #4
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800620a:	b004      	add	sp, #16
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	803c3800 	.word	0x803c3800

08006214 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	019b      	lsls	r3, r3, #6
 8006226:	f043 0220 	orr.w	r2, r3, #32
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a09      	ldr	r2, [pc, #36]	; (800625c <USB_FlushTxFifo+0x48>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e006      	b.n	800624e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b20      	cmp	r3, #32
 800624a:	d0f0      	beq.n	800622e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	00030d40 	.word	0x00030d40

08006260 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2210      	movs	r2, #16
 8006270:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3301      	adds	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <USB_FlushRxFifo+0x40>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d901      	bls.n	8006284 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e006      	b.n	8006292 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b10      	cmp	r3, #16
 800628e:	d0f0      	beq.n	8006272 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	00030d40 	.word	0x00030d40

080062a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062c4:	4313      	orrs	r3, r2
 80062c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062f0:	f023 0303 	bic.w	r3, r3, #3
 80062f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006304:	f043 0302 	orr.w	r3, r3, #2
 8006308:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a13      	ldr	r2, [pc, #76]	; (800637c <USB_CoreReset+0x64>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e01b      	b.n	800636e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	daf2      	bge.n	8006324 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f043 0201 	orr.w	r2, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3301      	adds	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <USB_CoreReset+0x64>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d901      	bls.n	8006360 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e006      	b.n	800636e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d0f0      	beq.n	800634e <USB_CoreReset+0x36>

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	00030d40 	.word	0x00030d40

08006380 <__errno>:
 8006380:	4b01      	ldr	r3, [pc, #4]	; (8006388 <__errno+0x8>)
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	2000000c 	.word	0x2000000c

0800638c <__libc_init_array>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	4d0d      	ldr	r5, [pc, #52]	; (80063c4 <__libc_init_array+0x38>)
 8006390:	4c0d      	ldr	r4, [pc, #52]	; (80063c8 <__libc_init_array+0x3c>)
 8006392:	1b64      	subs	r4, r4, r5
 8006394:	10a4      	asrs	r4, r4, #2
 8006396:	2600      	movs	r6, #0
 8006398:	42a6      	cmp	r6, r4
 800639a:	d109      	bne.n	80063b0 <__libc_init_array+0x24>
 800639c:	4d0b      	ldr	r5, [pc, #44]	; (80063cc <__libc_init_array+0x40>)
 800639e:	4c0c      	ldr	r4, [pc, #48]	; (80063d0 <__libc_init_array+0x44>)
 80063a0:	f000 fc62 	bl	8006c68 <_init>
 80063a4:	1b64      	subs	r4, r4, r5
 80063a6:	10a4      	asrs	r4, r4, #2
 80063a8:	2600      	movs	r6, #0
 80063aa:	42a6      	cmp	r6, r4
 80063ac:	d105      	bne.n	80063ba <__libc_init_array+0x2e>
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b4:	4798      	blx	r3
 80063b6:	3601      	adds	r6, #1
 80063b8:	e7ee      	b.n	8006398 <__libc_init_array+0xc>
 80063ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80063be:	4798      	blx	r3
 80063c0:	3601      	adds	r6, #1
 80063c2:	e7f2      	b.n	80063aa <__libc_init_array+0x1e>
 80063c4:	08006ea0 	.word	0x08006ea0
 80063c8:	08006ea0 	.word	0x08006ea0
 80063cc:	08006ea0 	.word	0x08006ea0
 80063d0:	08006ea4 	.word	0x08006ea4

080063d4 <memset>:
 80063d4:	4402      	add	r2, r0
 80063d6:	4603      	mov	r3, r0
 80063d8:	4293      	cmp	r3, r2
 80063da:	d100      	bne.n	80063de <memset+0xa>
 80063dc:	4770      	bx	lr
 80063de:	f803 1b01 	strb.w	r1, [r3], #1
 80063e2:	e7f9      	b.n	80063d8 <memset+0x4>

080063e4 <sniprintf>:
 80063e4:	b40c      	push	{r2, r3}
 80063e6:	b530      	push	{r4, r5, lr}
 80063e8:	4b17      	ldr	r3, [pc, #92]	; (8006448 <sniprintf+0x64>)
 80063ea:	1e0c      	subs	r4, r1, #0
 80063ec:	681d      	ldr	r5, [r3, #0]
 80063ee:	b09d      	sub	sp, #116	; 0x74
 80063f0:	da08      	bge.n	8006404 <sniprintf+0x20>
 80063f2:	238b      	movs	r3, #139	; 0x8b
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295
 80063fa:	b01d      	add	sp, #116	; 0x74
 80063fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006400:	b002      	add	sp, #8
 8006402:	4770      	bx	lr
 8006404:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006408:	f8ad 3014 	strh.w	r3, [sp, #20]
 800640c:	bf14      	ite	ne
 800640e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006412:	4623      	moveq	r3, r4
 8006414:	9304      	str	r3, [sp, #16]
 8006416:	9307      	str	r3, [sp, #28]
 8006418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800641c:	9002      	str	r0, [sp, #8]
 800641e:	9006      	str	r0, [sp, #24]
 8006420:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006424:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006426:	ab21      	add	r3, sp, #132	; 0x84
 8006428:	a902      	add	r1, sp, #8
 800642a:	4628      	mov	r0, r5
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	f000 f869 	bl	8006504 <_svfiprintf_r>
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	bfbc      	itt	lt
 8006436:	238b      	movlt	r3, #139	; 0x8b
 8006438:	602b      	strlt	r3, [r5, #0]
 800643a:	2c00      	cmp	r4, #0
 800643c:	d0dd      	beq.n	80063fa <sniprintf+0x16>
 800643e:	9b02      	ldr	r3, [sp, #8]
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	e7d9      	b.n	80063fa <sniprintf+0x16>
 8006446:	bf00      	nop
 8006448:	2000000c 	.word	0x2000000c

0800644c <__ssputs_r>:
 800644c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	688e      	ldr	r6, [r1, #8]
 8006452:	429e      	cmp	r6, r3
 8006454:	4682      	mov	sl, r0
 8006456:	460c      	mov	r4, r1
 8006458:	4690      	mov	r8, r2
 800645a:	461f      	mov	r7, r3
 800645c:	d838      	bhi.n	80064d0 <__ssputs_r+0x84>
 800645e:	898a      	ldrh	r2, [r1, #12]
 8006460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006464:	d032      	beq.n	80064cc <__ssputs_r+0x80>
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	6909      	ldr	r1, [r1, #16]
 800646a:	eba5 0901 	sub.w	r9, r5, r1
 800646e:	6965      	ldr	r5, [r4, #20]
 8006470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006478:	3301      	adds	r3, #1
 800647a:	444b      	add	r3, r9
 800647c:	106d      	asrs	r5, r5, #1
 800647e:	429d      	cmp	r5, r3
 8006480:	bf38      	it	cc
 8006482:	461d      	movcc	r5, r3
 8006484:	0553      	lsls	r3, r2, #21
 8006486:	d531      	bpl.n	80064ec <__ssputs_r+0xa0>
 8006488:	4629      	mov	r1, r5
 800648a:	f000 fb47 	bl	8006b1c <_malloc_r>
 800648e:	4606      	mov	r6, r0
 8006490:	b950      	cbnz	r0, 80064a8 <__ssputs_r+0x5c>
 8006492:	230c      	movs	r3, #12
 8006494:	f8ca 3000 	str.w	r3, [sl]
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800649e:	81a3      	strh	r3, [r4, #12]
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a8:	6921      	ldr	r1, [r4, #16]
 80064aa:	464a      	mov	r2, r9
 80064ac:	f000 fabe 	bl	8006a2c <memcpy>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	6126      	str	r6, [r4, #16]
 80064be:	6165      	str	r5, [r4, #20]
 80064c0:	444e      	add	r6, r9
 80064c2:	eba5 0509 	sub.w	r5, r5, r9
 80064c6:	6026      	str	r6, [r4, #0]
 80064c8:	60a5      	str	r5, [r4, #8]
 80064ca:	463e      	mov	r6, r7
 80064cc:	42be      	cmp	r6, r7
 80064ce:	d900      	bls.n	80064d2 <__ssputs_r+0x86>
 80064d0:	463e      	mov	r6, r7
 80064d2:	4632      	mov	r2, r6
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	4641      	mov	r1, r8
 80064d8:	f000 fab6 	bl	8006a48 <memmove>
 80064dc:	68a3      	ldr	r3, [r4, #8]
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	1b9b      	subs	r3, r3, r6
 80064e2:	4432      	add	r2, r6
 80064e4:	60a3      	str	r3, [r4, #8]
 80064e6:	6022      	str	r2, [r4, #0]
 80064e8:	2000      	movs	r0, #0
 80064ea:	e7db      	b.n	80064a4 <__ssputs_r+0x58>
 80064ec:	462a      	mov	r2, r5
 80064ee:	f000 fb6f 	bl	8006bd0 <_realloc_r>
 80064f2:	4606      	mov	r6, r0
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d1e1      	bne.n	80064bc <__ssputs_r+0x70>
 80064f8:	6921      	ldr	r1, [r4, #16]
 80064fa:	4650      	mov	r0, sl
 80064fc:	f000 fabe 	bl	8006a7c <_free_r>
 8006500:	e7c7      	b.n	8006492 <__ssputs_r+0x46>
	...

08006504 <_svfiprintf_r>:
 8006504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	4698      	mov	r8, r3
 800650a:	898b      	ldrh	r3, [r1, #12]
 800650c:	061b      	lsls	r3, r3, #24
 800650e:	b09d      	sub	sp, #116	; 0x74
 8006510:	4607      	mov	r7, r0
 8006512:	460d      	mov	r5, r1
 8006514:	4614      	mov	r4, r2
 8006516:	d50e      	bpl.n	8006536 <_svfiprintf_r+0x32>
 8006518:	690b      	ldr	r3, [r1, #16]
 800651a:	b963      	cbnz	r3, 8006536 <_svfiprintf_r+0x32>
 800651c:	2140      	movs	r1, #64	; 0x40
 800651e:	f000 fafd 	bl	8006b1c <_malloc_r>
 8006522:	6028      	str	r0, [r5, #0]
 8006524:	6128      	str	r0, [r5, #16]
 8006526:	b920      	cbnz	r0, 8006532 <_svfiprintf_r+0x2e>
 8006528:	230c      	movs	r3, #12
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	e0d1      	b.n	80066d6 <_svfiprintf_r+0x1d2>
 8006532:	2340      	movs	r3, #64	; 0x40
 8006534:	616b      	str	r3, [r5, #20]
 8006536:	2300      	movs	r3, #0
 8006538:	9309      	str	r3, [sp, #36]	; 0x24
 800653a:	2320      	movs	r3, #32
 800653c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006540:	f8cd 800c 	str.w	r8, [sp, #12]
 8006544:	2330      	movs	r3, #48	; 0x30
 8006546:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066f0 <_svfiprintf_r+0x1ec>
 800654a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800654e:	f04f 0901 	mov.w	r9, #1
 8006552:	4623      	mov	r3, r4
 8006554:	469a      	mov	sl, r3
 8006556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800655a:	b10a      	cbz	r2, 8006560 <_svfiprintf_r+0x5c>
 800655c:	2a25      	cmp	r2, #37	; 0x25
 800655e:	d1f9      	bne.n	8006554 <_svfiprintf_r+0x50>
 8006560:	ebba 0b04 	subs.w	fp, sl, r4
 8006564:	d00b      	beq.n	800657e <_svfiprintf_r+0x7a>
 8006566:	465b      	mov	r3, fp
 8006568:	4622      	mov	r2, r4
 800656a:	4629      	mov	r1, r5
 800656c:	4638      	mov	r0, r7
 800656e:	f7ff ff6d 	bl	800644c <__ssputs_r>
 8006572:	3001      	adds	r0, #1
 8006574:	f000 80aa 	beq.w	80066cc <_svfiprintf_r+0x1c8>
 8006578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800657a:	445a      	add	r2, fp
 800657c:	9209      	str	r2, [sp, #36]	; 0x24
 800657e:	f89a 3000 	ldrb.w	r3, [sl]
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 80a2 	beq.w	80066cc <_svfiprintf_r+0x1c8>
 8006588:	2300      	movs	r3, #0
 800658a:	f04f 32ff 	mov.w	r2, #4294967295
 800658e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006592:	f10a 0a01 	add.w	sl, sl, #1
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	9307      	str	r3, [sp, #28]
 800659a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800659e:	931a      	str	r3, [sp, #104]	; 0x68
 80065a0:	4654      	mov	r4, sl
 80065a2:	2205      	movs	r2, #5
 80065a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a8:	4851      	ldr	r0, [pc, #324]	; (80066f0 <_svfiprintf_r+0x1ec>)
 80065aa:	f7f9 fe19 	bl	80001e0 <memchr>
 80065ae:	9a04      	ldr	r2, [sp, #16]
 80065b0:	b9d8      	cbnz	r0, 80065ea <_svfiprintf_r+0xe6>
 80065b2:	06d0      	lsls	r0, r2, #27
 80065b4:	bf44      	itt	mi
 80065b6:	2320      	movmi	r3, #32
 80065b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065bc:	0711      	lsls	r1, r2, #28
 80065be:	bf44      	itt	mi
 80065c0:	232b      	movmi	r3, #43	; 0x2b
 80065c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065c6:	f89a 3000 	ldrb.w	r3, [sl]
 80065ca:	2b2a      	cmp	r3, #42	; 0x2a
 80065cc:	d015      	beq.n	80065fa <_svfiprintf_r+0xf6>
 80065ce:	9a07      	ldr	r2, [sp, #28]
 80065d0:	4654      	mov	r4, sl
 80065d2:	2000      	movs	r0, #0
 80065d4:	f04f 0c0a 	mov.w	ip, #10
 80065d8:	4621      	mov	r1, r4
 80065da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065de:	3b30      	subs	r3, #48	; 0x30
 80065e0:	2b09      	cmp	r3, #9
 80065e2:	d94e      	bls.n	8006682 <_svfiprintf_r+0x17e>
 80065e4:	b1b0      	cbz	r0, 8006614 <_svfiprintf_r+0x110>
 80065e6:	9207      	str	r2, [sp, #28]
 80065e8:	e014      	b.n	8006614 <_svfiprintf_r+0x110>
 80065ea:	eba0 0308 	sub.w	r3, r0, r8
 80065ee:	fa09 f303 	lsl.w	r3, r9, r3
 80065f2:	4313      	orrs	r3, r2
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	46a2      	mov	sl, r4
 80065f8:	e7d2      	b.n	80065a0 <_svfiprintf_r+0x9c>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	1d19      	adds	r1, r3, #4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	9103      	str	r1, [sp, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	bfbb      	ittet	lt
 8006606:	425b      	neglt	r3, r3
 8006608:	f042 0202 	orrlt.w	r2, r2, #2
 800660c:	9307      	strge	r3, [sp, #28]
 800660e:	9307      	strlt	r3, [sp, #28]
 8006610:	bfb8      	it	lt
 8006612:	9204      	strlt	r2, [sp, #16]
 8006614:	7823      	ldrb	r3, [r4, #0]
 8006616:	2b2e      	cmp	r3, #46	; 0x2e
 8006618:	d10c      	bne.n	8006634 <_svfiprintf_r+0x130>
 800661a:	7863      	ldrb	r3, [r4, #1]
 800661c:	2b2a      	cmp	r3, #42	; 0x2a
 800661e:	d135      	bne.n	800668c <_svfiprintf_r+0x188>
 8006620:	9b03      	ldr	r3, [sp, #12]
 8006622:	1d1a      	adds	r2, r3, #4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	9203      	str	r2, [sp, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	bfb8      	it	lt
 800662c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006630:	3402      	adds	r4, #2
 8006632:	9305      	str	r3, [sp, #20]
 8006634:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006700 <_svfiprintf_r+0x1fc>
 8006638:	7821      	ldrb	r1, [r4, #0]
 800663a:	2203      	movs	r2, #3
 800663c:	4650      	mov	r0, sl
 800663e:	f7f9 fdcf 	bl	80001e0 <memchr>
 8006642:	b140      	cbz	r0, 8006656 <_svfiprintf_r+0x152>
 8006644:	2340      	movs	r3, #64	; 0x40
 8006646:	eba0 000a 	sub.w	r0, r0, sl
 800664a:	fa03 f000 	lsl.w	r0, r3, r0
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	4303      	orrs	r3, r0
 8006652:	3401      	adds	r4, #1
 8006654:	9304      	str	r3, [sp, #16]
 8006656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800665a:	4826      	ldr	r0, [pc, #152]	; (80066f4 <_svfiprintf_r+0x1f0>)
 800665c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006660:	2206      	movs	r2, #6
 8006662:	f7f9 fdbd 	bl	80001e0 <memchr>
 8006666:	2800      	cmp	r0, #0
 8006668:	d038      	beq.n	80066dc <_svfiprintf_r+0x1d8>
 800666a:	4b23      	ldr	r3, [pc, #140]	; (80066f8 <_svfiprintf_r+0x1f4>)
 800666c:	bb1b      	cbnz	r3, 80066b6 <_svfiprintf_r+0x1b2>
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	3307      	adds	r3, #7
 8006672:	f023 0307 	bic.w	r3, r3, #7
 8006676:	3308      	adds	r3, #8
 8006678:	9303      	str	r3, [sp, #12]
 800667a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667c:	4433      	add	r3, r6
 800667e:	9309      	str	r3, [sp, #36]	; 0x24
 8006680:	e767      	b.n	8006552 <_svfiprintf_r+0x4e>
 8006682:	fb0c 3202 	mla	r2, ip, r2, r3
 8006686:	460c      	mov	r4, r1
 8006688:	2001      	movs	r0, #1
 800668a:	e7a5      	b.n	80065d8 <_svfiprintf_r+0xd4>
 800668c:	2300      	movs	r3, #0
 800668e:	3401      	adds	r4, #1
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	4619      	mov	r1, r3
 8006694:	f04f 0c0a 	mov.w	ip, #10
 8006698:	4620      	mov	r0, r4
 800669a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800669e:	3a30      	subs	r2, #48	; 0x30
 80066a0:	2a09      	cmp	r2, #9
 80066a2:	d903      	bls.n	80066ac <_svfiprintf_r+0x1a8>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0c5      	beq.n	8006634 <_svfiprintf_r+0x130>
 80066a8:	9105      	str	r1, [sp, #20]
 80066aa:	e7c3      	b.n	8006634 <_svfiprintf_r+0x130>
 80066ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80066b0:	4604      	mov	r4, r0
 80066b2:	2301      	movs	r3, #1
 80066b4:	e7f0      	b.n	8006698 <_svfiprintf_r+0x194>
 80066b6:	ab03      	add	r3, sp, #12
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	462a      	mov	r2, r5
 80066bc:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <_svfiprintf_r+0x1f8>)
 80066be:	a904      	add	r1, sp, #16
 80066c0:	4638      	mov	r0, r7
 80066c2:	f3af 8000 	nop.w
 80066c6:	1c42      	adds	r2, r0, #1
 80066c8:	4606      	mov	r6, r0
 80066ca:	d1d6      	bne.n	800667a <_svfiprintf_r+0x176>
 80066cc:	89ab      	ldrh	r3, [r5, #12]
 80066ce:	065b      	lsls	r3, r3, #25
 80066d0:	f53f af2c 	bmi.w	800652c <_svfiprintf_r+0x28>
 80066d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066d6:	b01d      	add	sp, #116	; 0x74
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	ab03      	add	r3, sp, #12
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	462a      	mov	r2, r5
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <_svfiprintf_r+0x1f8>)
 80066e4:	a904      	add	r1, sp, #16
 80066e6:	4638      	mov	r0, r7
 80066e8:	f000 f87a 	bl	80067e0 <_printf_i>
 80066ec:	e7eb      	b.n	80066c6 <_svfiprintf_r+0x1c2>
 80066ee:	bf00      	nop
 80066f0:	08006e64 	.word	0x08006e64
 80066f4:	08006e6e 	.word	0x08006e6e
 80066f8:	00000000 	.word	0x00000000
 80066fc:	0800644d 	.word	0x0800644d
 8006700:	08006e6a 	.word	0x08006e6a

08006704 <_printf_common>:
 8006704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006708:	4616      	mov	r6, r2
 800670a:	4699      	mov	r9, r3
 800670c:	688a      	ldr	r2, [r1, #8]
 800670e:	690b      	ldr	r3, [r1, #16]
 8006710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006714:	4293      	cmp	r3, r2
 8006716:	bfb8      	it	lt
 8006718:	4613      	movlt	r3, r2
 800671a:	6033      	str	r3, [r6, #0]
 800671c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006720:	4607      	mov	r7, r0
 8006722:	460c      	mov	r4, r1
 8006724:	b10a      	cbz	r2, 800672a <_printf_common+0x26>
 8006726:	3301      	adds	r3, #1
 8006728:	6033      	str	r3, [r6, #0]
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	0699      	lsls	r1, r3, #26
 800672e:	bf42      	ittt	mi
 8006730:	6833      	ldrmi	r3, [r6, #0]
 8006732:	3302      	addmi	r3, #2
 8006734:	6033      	strmi	r3, [r6, #0]
 8006736:	6825      	ldr	r5, [r4, #0]
 8006738:	f015 0506 	ands.w	r5, r5, #6
 800673c:	d106      	bne.n	800674c <_printf_common+0x48>
 800673e:	f104 0a19 	add.w	sl, r4, #25
 8006742:	68e3      	ldr	r3, [r4, #12]
 8006744:	6832      	ldr	r2, [r6, #0]
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	42ab      	cmp	r3, r5
 800674a:	dc26      	bgt.n	800679a <_printf_common+0x96>
 800674c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006750:	1e13      	subs	r3, r2, #0
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	bf18      	it	ne
 8006756:	2301      	movne	r3, #1
 8006758:	0692      	lsls	r2, r2, #26
 800675a:	d42b      	bmi.n	80067b4 <_printf_common+0xb0>
 800675c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006760:	4649      	mov	r1, r9
 8006762:	4638      	mov	r0, r7
 8006764:	47c0      	blx	r8
 8006766:	3001      	adds	r0, #1
 8006768:	d01e      	beq.n	80067a8 <_printf_common+0xa4>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	68e5      	ldr	r5, [r4, #12]
 800676e:	6832      	ldr	r2, [r6, #0]
 8006770:	f003 0306 	and.w	r3, r3, #6
 8006774:	2b04      	cmp	r3, #4
 8006776:	bf08      	it	eq
 8006778:	1aad      	subeq	r5, r5, r2
 800677a:	68a3      	ldr	r3, [r4, #8]
 800677c:	6922      	ldr	r2, [r4, #16]
 800677e:	bf0c      	ite	eq
 8006780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006784:	2500      	movne	r5, #0
 8006786:	4293      	cmp	r3, r2
 8006788:	bfc4      	itt	gt
 800678a:	1a9b      	subgt	r3, r3, r2
 800678c:	18ed      	addgt	r5, r5, r3
 800678e:	2600      	movs	r6, #0
 8006790:	341a      	adds	r4, #26
 8006792:	42b5      	cmp	r5, r6
 8006794:	d11a      	bne.n	80067cc <_printf_common+0xc8>
 8006796:	2000      	movs	r0, #0
 8006798:	e008      	b.n	80067ac <_printf_common+0xa8>
 800679a:	2301      	movs	r3, #1
 800679c:	4652      	mov	r2, sl
 800679e:	4649      	mov	r1, r9
 80067a0:	4638      	mov	r0, r7
 80067a2:	47c0      	blx	r8
 80067a4:	3001      	adds	r0, #1
 80067a6:	d103      	bne.n	80067b0 <_printf_common+0xac>
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b0:	3501      	adds	r5, #1
 80067b2:	e7c6      	b.n	8006742 <_printf_common+0x3e>
 80067b4:	18e1      	adds	r1, r4, r3
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	2030      	movs	r0, #48	; 0x30
 80067ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067be:	4422      	add	r2, r4
 80067c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067c8:	3302      	adds	r3, #2
 80067ca:	e7c7      	b.n	800675c <_printf_common+0x58>
 80067cc:	2301      	movs	r3, #1
 80067ce:	4622      	mov	r2, r4
 80067d0:	4649      	mov	r1, r9
 80067d2:	4638      	mov	r0, r7
 80067d4:	47c0      	blx	r8
 80067d6:	3001      	adds	r0, #1
 80067d8:	d0e6      	beq.n	80067a8 <_printf_common+0xa4>
 80067da:	3601      	adds	r6, #1
 80067dc:	e7d9      	b.n	8006792 <_printf_common+0x8e>
	...

080067e0 <_printf_i>:
 80067e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e4:	460c      	mov	r4, r1
 80067e6:	4691      	mov	r9, r2
 80067e8:	7e27      	ldrb	r7, [r4, #24]
 80067ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067ec:	2f78      	cmp	r7, #120	; 0x78
 80067ee:	4680      	mov	r8, r0
 80067f0:	469a      	mov	sl, r3
 80067f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067f6:	d807      	bhi.n	8006808 <_printf_i+0x28>
 80067f8:	2f62      	cmp	r7, #98	; 0x62
 80067fa:	d80a      	bhi.n	8006812 <_printf_i+0x32>
 80067fc:	2f00      	cmp	r7, #0
 80067fe:	f000 80d8 	beq.w	80069b2 <_printf_i+0x1d2>
 8006802:	2f58      	cmp	r7, #88	; 0x58
 8006804:	f000 80a3 	beq.w	800694e <_printf_i+0x16e>
 8006808:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800680c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006810:	e03a      	b.n	8006888 <_printf_i+0xa8>
 8006812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006816:	2b15      	cmp	r3, #21
 8006818:	d8f6      	bhi.n	8006808 <_printf_i+0x28>
 800681a:	a001      	add	r0, pc, #4	; (adr r0, 8006820 <_printf_i+0x40>)
 800681c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006820:	08006879 	.word	0x08006879
 8006824:	0800688d 	.word	0x0800688d
 8006828:	08006809 	.word	0x08006809
 800682c:	08006809 	.word	0x08006809
 8006830:	08006809 	.word	0x08006809
 8006834:	08006809 	.word	0x08006809
 8006838:	0800688d 	.word	0x0800688d
 800683c:	08006809 	.word	0x08006809
 8006840:	08006809 	.word	0x08006809
 8006844:	08006809 	.word	0x08006809
 8006848:	08006809 	.word	0x08006809
 800684c:	08006999 	.word	0x08006999
 8006850:	080068bd 	.word	0x080068bd
 8006854:	0800697b 	.word	0x0800697b
 8006858:	08006809 	.word	0x08006809
 800685c:	08006809 	.word	0x08006809
 8006860:	080069bb 	.word	0x080069bb
 8006864:	08006809 	.word	0x08006809
 8006868:	080068bd 	.word	0x080068bd
 800686c:	08006809 	.word	0x08006809
 8006870:	08006809 	.word	0x08006809
 8006874:	08006983 	.word	0x08006983
 8006878:	680b      	ldr	r3, [r1, #0]
 800687a:	1d1a      	adds	r2, r3, #4
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	600a      	str	r2, [r1, #0]
 8006880:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006888:	2301      	movs	r3, #1
 800688a:	e0a3      	b.n	80069d4 <_printf_i+0x1f4>
 800688c:	6825      	ldr	r5, [r4, #0]
 800688e:	6808      	ldr	r0, [r1, #0]
 8006890:	062e      	lsls	r6, r5, #24
 8006892:	f100 0304 	add.w	r3, r0, #4
 8006896:	d50a      	bpl.n	80068ae <_printf_i+0xce>
 8006898:	6805      	ldr	r5, [r0, #0]
 800689a:	600b      	str	r3, [r1, #0]
 800689c:	2d00      	cmp	r5, #0
 800689e:	da03      	bge.n	80068a8 <_printf_i+0xc8>
 80068a0:	232d      	movs	r3, #45	; 0x2d
 80068a2:	426d      	negs	r5, r5
 80068a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a8:	485e      	ldr	r0, [pc, #376]	; (8006a24 <_printf_i+0x244>)
 80068aa:	230a      	movs	r3, #10
 80068ac:	e019      	b.n	80068e2 <_printf_i+0x102>
 80068ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068b2:	6805      	ldr	r5, [r0, #0]
 80068b4:	600b      	str	r3, [r1, #0]
 80068b6:	bf18      	it	ne
 80068b8:	b22d      	sxthne	r5, r5
 80068ba:	e7ef      	b.n	800689c <_printf_i+0xbc>
 80068bc:	680b      	ldr	r3, [r1, #0]
 80068be:	6825      	ldr	r5, [r4, #0]
 80068c0:	1d18      	adds	r0, r3, #4
 80068c2:	6008      	str	r0, [r1, #0]
 80068c4:	0628      	lsls	r0, r5, #24
 80068c6:	d501      	bpl.n	80068cc <_printf_i+0xec>
 80068c8:	681d      	ldr	r5, [r3, #0]
 80068ca:	e002      	b.n	80068d2 <_printf_i+0xf2>
 80068cc:	0669      	lsls	r1, r5, #25
 80068ce:	d5fb      	bpl.n	80068c8 <_printf_i+0xe8>
 80068d0:	881d      	ldrh	r5, [r3, #0]
 80068d2:	4854      	ldr	r0, [pc, #336]	; (8006a24 <_printf_i+0x244>)
 80068d4:	2f6f      	cmp	r7, #111	; 0x6f
 80068d6:	bf0c      	ite	eq
 80068d8:	2308      	moveq	r3, #8
 80068da:	230a      	movne	r3, #10
 80068dc:	2100      	movs	r1, #0
 80068de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068e2:	6866      	ldr	r6, [r4, #4]
 80068e4:	60a6      	str	r6, [r4, #8]
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	bfa2      	ittt	ge
 80068ea:	6821      	ldrge	r1, [r4, #0]
 80068ec:	f021 0104 	bicge.w	r1, r1, #4
 80068f0:	6021      	strge	r1, [r4, #0]
 80068f2:	b90d      	cbnz	r5, 80068f8 <_printf_i+0x118>
 80068f4:	2e00      	cmp	r6, #0
 80068f6:	d04d      	beq.n	8006994 <_printf_i+0x1b4>
 80068f8:	4616      	mov	r6, r2
 80068fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80068fe:	fb03 5711 	mls	r7, r3, r1, r5
 8006902:	5dc7      	ldrb	r7, [r0, r7]
 8006904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006908:	462f      	mov	r7, r5
 800690a:	42bb      	cmp	r3, r7
 800690c:	460d      	mov	r5, r1
 800690e:	d9f4      	bls.n	80068fa <_printf_i+0x11a>
 8006910:	2b08      	cmp	r3, #8
 8006912:	d10b      	bne.n	800692c <_printf_i+0x14c>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	07df      	lsls	r7, r3, #31
 8006918:	d508      	bpl.n	800692c <_printf_i+0x14c>
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	6861      	ldr	r1, [r4, #4]
 800691e:	4299      	cmp	r1, r3
 8006920:	bfde      	ittt	le
 8006922:	2330      	movle	r3, #48	; 0x30
 8006924:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006928:	f106 36ff 	addle.w	r6, r6, #4294967295
 800692c:	1b92      	subs	r2, r2, r6
 800692e:	6122      	str	r2, [r4, #16]
 8006930:	f8cd a000 	str.w	sl, [sp]
 8006934:	464b      	mov	r3, r9
 8006936:	aa03      	add	r2, sp, #12
 8006938:	4621      	mov	r1, r4
 800693a:	4640      	mov	r0, r8
 800693c:	f7ff fee2 	bl	8006704 <_printf_common>
 8006940:	3001      	adds	r0, #1
 8006942:	d14c      	bne.n	80069de <_printf_i+0x1fe>
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	b004      	add	sp, #16
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	4835      	ldr	r0, [pc, #212]	; (8006a24 <_printf_i+0x244>)
 8006950:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	680e      	ldr	r6, [r1, #0]
 8006958:	061f      	lsls	r7, r3, #24
 800695a:	f856 5b04 	ldr.w	r5, [r6], #4
 800695e:	600e      	str	r6, [r1, #0]
 8006960:	d514      	bpl.n	800698c <_printf_i+0x1ac>
 8006962:	07d9      	lsls	r1, r3, #31
 8006964:	bf44      	itt	mi
 8006966:	f043 0320 	orrmi.w	r3, r3, #32
 800696a:	6023      	strmi	r3, [r4, #0]
 800696c:	b91d      	cbnz	r5, 8006976 <_printf_i+0x196>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	f023 0320 	bic.w	r3, r3, #32
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	2310      	movs	r3, #16
 8006978:	e7b0      	b.n	80068dc <_printf_i+0xfc>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	f043 0320 	orr.w	r3, r3, #32
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	2378      	movs	r3, #120	; 0x78
 8006984:	4828      	ldr	r0, [pc, #160]	; (8006a28 <_printf_i+0x248>)
 8006986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800698a:	e7e3      	b.n	8006954 <_printf_i+0x174>
 800698c:	065e      	lsls	r6, r3, #25
 800698e:	bf48      	it	mi
 8006990:	b2ad      	uxthmi	r5, r5
 8006992:	e7e6      	b.n	8006962 <_printf_i+0x182>
 8006994:	4616      	mov	r6, r2
 8006996:	e7bb      	b.n	8006910 <_printf_i+0x130>
 8006998:	680b      	ldr	r3, [r1, #0]
 800699a:	6826      	ldr	r6, [r4, #0]
 800699c:	6960      	ldr	r0, [r4, #20]
 800699e:	1d1d      	adds	r5, r3, #4
 80069a0:	600d      	str	r5, [r1, #0]
 80069a2:	0635      	lsls	r5, r6, #24
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	d501      	bpl.n	80069ac <_printf_i+0x1cc>
 80069a8:	6018      	str	r0, [r3, #0]
 80069aa:	e002      	b.n	80069b2 <_printf_i+0x1d2>
 80069ac:	0671      	lsls	r1, r6, #25
 80069ae:	d5fb      	bpl.n	80069a8 <_printf_i+0x1c8>
 80069b0:	8018      	strh	r0, [r3, #0]
 80069b2:	2300      	movs	r3, #0
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	4616      	mov	r6, r2
 80069b8:	e7ba      	b.n	8006930 <_printf_i+0x150>
 80069ba:	680b      	ldr	r3, [r1, #0]
 80069bc:	1d1a      	adds	r2, r3, #4
 80069be:	600a      	str	r2, [r1, #0]
 80069c0:	681e      	ldr	r6, [r3, #0]
 80069c2:	6862      	ldr	r2, [r4, #4]
 80069c4:	2100      	movs	r1, #0
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7f9 fc0a 	bl	80001e0 <memchr>
 80069cc:	b108      	cbz	r0, 80069d2 <_printf_i+0x1f2>
 80069ce:	1b80      	subs	r0, r0, r6
 80069d0:	6060      	str	r0, [r4, #4]
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	6123      	str	r3, [r4, #16]
 80069d6:	2300      	movs	r3, #0
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069dc:	e7a8      	b.n	8006930 <_printf_i+0x150>
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	4632      	mov	r2, r6
 80069e2:	4649      	mov	r1, r9
 80069e4:	4640      	mov	r0, r8
 80069e6:	47d0      	blx	sl
 80069e8:	3001      	adds	r0, #1
 80069ea:	d0ab      	beq.n	8006944 <_printf_i+0x164>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	079b      	lsls	r3, r3, #30
 80069f0:	d413      	bmi.n	8006a1a <_printf_i+0x23a>
 80069f2:	68e0      	ldr	r0, [r4, #12]
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	4298      	cmp	r0, r3
 80069f8:	bfb8      	it	lt
 80069fa:	4618      	movlt	r0, r3
 80069fc:	e7a4      	b.n	8006948 <_printf_i+0x168>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4632      	mov	r2, r6
 8006a02:	4649      	mov	r1, r9
 8006a04:	4640      	mov	r0, r8
 8006a06:	47d0      	blx	sl
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d09b      	beq.n	8006944 <_printf_i+0x164>
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	68e3      	ldr	r3, [r4, #12]
 8006a10:	9903      	ldr	r1, [sp, #12]
 8006a12:	1a5b      	subs	r3, r3, r1
 8006a14:	42ab      	cmp	r3, r5
 8006a16:	dcf2      	bgt.n	80069fe <_printf_i+0x21e>
 8006a18:	e7eb      	b.n	80069f2 <_printf_i+0x212>
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	f104 0619 	add.w	r6, r4, #25
 8006a20:	e7f5      	b.n	8006a0e <_printf_i+0x22e>
 8006a22:	bf00      	nop
 8006a24:	08006e75 	.word	0x08006e75
 8006a28:	08006e86 	.word	0x08006e86

08006a2c <memcpy>:
 8006a2c:	440a      	add	r2, r1
 8006a2e:	4291      	cmp	r1, r2
 8006a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a34:	d100      	bne.n	8006a38 <memcpy+0xc>
 8006a36:	4770      	bx	lr
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a42:	4291      	cmp	r1, r2
 8006a44:	d1f9      	bne.n	8006a3a <memcpy+0xe>
 8006a46:	bd10      	pop	{r4, pc}

08006a48 <memmove>:
 8006a48:	4288      	cmp	r0, r1
 8006a4a:	b510      	push	{r4, lr}
 8006a4c:	eb01 0402 	add.w	r4, r1, r2
 8006a50:	d902      	bls.n	8006a58 <memmove+0x10>
 8006a52:	4284      	cmp	r4, r0
 8006a54:	4623      	mov	r3, r4
 8006a56:	d807      	bhi.n	8006a68 <memmove+0x20>
 8006a58:	1e43      	subs	r3, r0, #1
 8006a5a:	42a1      	cmp	r1, r4
 8006a5c:	d008      	beq.n	8006a70 <memmove+0x28>
 8006a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a66:	e7f8      	b.n	8006a5a <memmove+0x12>
 8006a68:	4402      	add	r2, r0
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	428a      	cmp	r2, r1
 8006a6e:	d100      	bne.n	8006a72 <memmove+0x2a>
 8006a70:	bd10      	pop	{r4, pc}
 8006a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a7a:	e7f7      	b.n	8006a6c <memmove+0x24>

08006a7c <_free_r>:
 8006a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	d048      	beq.n	8006b14 <_free_r+0x98>
 8006a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a86:	9001      	str	r0, [sp, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a8e:	bfb8      	it	lt
 8006a90:	18e4      	addlt	r4, r4, r3
 8006a92:	f000 f8d3 	bl	8006c3c <__malloc_lock>
 8006a96:	4a20      	ldr	r2, [pc, #128]	; (8006b18 <_free_r+0x9c>)
 8006a98:	9801      	ldr	r0, [sp, #4]
 8006a9a:	6813      	ldr	r3, [r2, #0]
 8006a9c:	4615      	mov	r5, r2
 8006a9e:	b933      	cbnz	r3, 8006aae <_free_r+0x32>
 8006aa0:	6063      	str	r3, [r4, #4]
 8006aa2:	6014      	str	r4, [r2, #0]
 8006aa4:	b003      	add	sp, #12
 8006aa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aaa:	f000 b8cd 	b.w	8006c48 <__malloc_unlock>
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	d90b      	bls.n	8006aca <_free_r+0x4e>
 8006ab2:	6821      	ldr	r1, [r4, #0]
 8006ab4:	1862      	adds	r2, r4, r1
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	bf04      	itt	eq
 8006aba:	681a      	ldreq	r2, [r3, #0]
 8006abc:	685b      	ldreq	r3, [r3, #4]
 8006abe:	6063      	str	r3, [r4, #4]
 8006ac0:	bf04      	itt	eq
 8006ac2:	1852      	addeq	r2, r2, r1
 8006ac4:	6022      	streq	r2, [r4, #0]
 8006ac6:	602c      	str	r4, [r5, #0]
 8006ac8:	e7ec      	b.n	8006aa4 <_free_r+0x28>
 8006aca:	461a      	mov	r2, r3
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	b10b      	cbz	r3, 8006ad4 <_free_r+0x58>
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	d9fa      	bls.n	8006aca <_free_r+0x4e>
 8006ad4:	6811      	ldr	r1, [r2, #0]
 8006ad6:	1855      	adds	r5, r2, r1
 8006ad8:	42a5      	cmp	r5, r4
 8006ada:	d10b      	bne.n	8006af4 <_free_r+0x78>
 8006adc:	6824      	ldr	r4, [r4, #0]
 8006ade:	4421      	add	r1, r4
 8006ae0:	1854      	adds	r4, r2, r1
 8006ae2:	42a3      	cmp	r3, r4
 8006ae4:	6011      	str	r1, [r2, #0]
 8006ae6:	d1dd      	bne.n	8006aa4 <_free_r+0x28>
 8006ae8:	681c      	ldr	r4, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	6053      	str	r3, [r2, #4]
 8006aee:	4421      	add	r1, r4
 8006af0:	6011      	str	r1, [r2, #0]
 8006af2:	e7d7      	b.n	8006aa4 <_free_r+0x28>
 8006af4:	d902      	bls.n	8006afc <_free_r+0x80>
 8006af6:	230c      	movs	r3, #12
 8006af8:	6003      	str	r3, [r0, #0]
 8006afa:	e7d3      	b.n	8006aa4 <_free_r+0x28>
 8006afc:	6825      	ldr	r5, [r4, #0]
 8006afe:	1961      	adds	r1, r4, r5
 8006b00:	428b      	cmp	r3, r1
 8006b02:	bf04      	itt	eq
 8006b04:	6819      	ldreq	r1, [r3, #0]
 8006b06:	685b      	ldreq	r3, [r3, #4]
 8006b08:	6063      	str	r3, [r4, #4]
 8006b0a:	bf04      	itt	eq
 8006b0c:	1949      	addeq	r1, r1, r5
 8006b0e:	6021      	streq	r1, [r4, #0]
 8006b10:	6054      	str	r4, [r2, #4]
 8006b12:	e7c7      	b.n	8006aa4 <_free_r+0x28>
 8006b14:	b003      	add	sp, #12
 8006b16:	bd30      	pop	{r4, r5, pc}
 8006b18:	200000c0 	.word	0x200000c0

08006b1c <_malloc_r>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	1ccd      	adds	r5, r1, #3
 8006b20:	f025 0503 	bic.w	r5, r5, #3
 8006b24:	3508      	adds	r5, #8
 8006b26:	2d0c      	cmp	r5, #12
 8006b28:	bf38      	it	cc
 8006b2a:	250c      	movcc	r5, #12
 8006b2c:	2d00      	cmp	r5, #0
 8006b2e:	4606      	mov	r6, r0
 8006b30:	db01      	blt.n	8006b36 <_malloc_r+0x1a>
 8006b32:	42a9      	cmp	r1, r5
 8006b34:	d903      	bls.n	8006b3e <_malloc_r+0x22>
 8006b36:	230c      	movs	r3, #12
 8006b38:	6033      	str	r3, [r6, #0]
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3e:	f000 f87d 	bl	8006c3c <__malloc_lock>
 8006b42:	4921      	ldr	r1, [pc, #132]	; (8006bc8 <_malloc_r+0xac>)
 8006b44:	680a      	ldr	r2, [r1, #0]
 8006b46:	4614      	mov	r4, r2
 8006b48:	b99c      	cbnz	r4, 8006b72 <_malloc_r+0x56>
 8006b4a:	4f20      	ldr	r7, [pc, #128]	; (8006bcc <_malloc_r+0xb0>)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	b923      	cbnz	r3, 8006b5a <_malloc_r+0x3e>
 8006b50:	4621      	mov	r1, r4
 8006b52:	4630      	mov	r0, r6
 8006b54:	f000 f862 	bl	8006c1c <_sbrk_r>
 8006b58:	6038      	str	r0, [r7, #0]
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f000 f85d 	bl	8006c1c <_sbrk_r>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	d123      	bne.n	8006bae <_malloc_r+0x92>
 8006b66:	230c      	movs	r3, #12
 8006b68:	6033      	str	r3, [r6, #0]
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f000 f86c 	bl	8006c48 <__malloc_unlock>
 8006b70:	e7e3      	b.n	8006b3a <_malloc_r+0x1e>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	1b5b      	subs	r3, r3, r5
 8006b76:	d417      	bmi.n	8006ba8 <_malloc_r+0x8c>
 8006b78:	2b0b      	cmp	r3, #11
 8006b7a:	d903      	bls.n	8006b84 <_malloc_r+0x68>
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	441c      	add	r4, r3
 8006b80:	6025      	str	r5, [r4, #0]
 8006b82:	e004      	b.n	8006b8e <_malloc_r+0x72>
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	42a2      	cmp	r2, r4
 8006b88:	bf0c      	ite	eq
 8006b8a:	600b      	streq	r3, [r1, #0]
 8006b8c:	6053      	strne	r3, [r2, #4]
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f000 f85a 	bl	8006c48 <__malloc_unlock>
 8006b94:	f104 000b 	add.w	r0, r4, #11
 8006b98:	1d23      	adds	r3, r4, #4
 8006b9a:	f020 0007 	bic.w	r0, r0, #7
 8006b9e:	1ac2      	subs	r2, r0, r3
 8006ba0:	d0cc      	beq.n	8006b3c <_malloc_r+0x20>
 8006ba2:	1a1b      	subs	r3, r3, r0
 8006ba4:	50a3      	str	r3, [r4, r2]
 8006ba6:	e7c9      	b.n	8006b3c <_malloc_r+0x20>
 8006ba8:	4622      	mov	r2, r4
 8006baa:	6864      	ldr	r4, [r4, #4]
 8006bac:	e7cc      	b.n	8006b48 <_malloc_r+0x2c>
 8006bae:	1cc4      	adds	r4, r0, #3
 8006bb0:	f024 0403 	bic.w	r4, r4, #3
 8006bb4:	42a0      	cmp	r0, r4
 8006bb6:	d0e3      	beq.n	8006b80 <_malloc_r+0x64>
 8006bb8:	1a21      	subs	r1, r4, r0
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f000 f82e 	bl	8006c1c <_sbrk_r>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d1dd      	bne.n	8006b80 <_malloc_r+0x64>
 8006bc4:	e7cf      	b.n	8006b66 <_malloc_r+0x4a>
 8006bc6:	bf00      	nop
 8006bc8:	200000c0 	.word	0x200000c0
 8006bcc:	200000c4 	.word	0x200000c4

08006bd0 <_realloc_r>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	4607      	mov	r7, r0
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	460e      	mov	r6, r1
 8006bd8:	b921      	cbnz	r1, 8006be4 <_realloc_r+0x14>
 8006bda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bde:	4611      	mov	r1, r2
 8006be0:	f7ff bf9c 	b.w	8006b1c <_malloc_r>
 8006be4:	b922      	cbnz	r2, 8006bf0 <_realloc_r+0x20>
 8006be6:	f7ff ff49 	bl	8006a7c <_free_r>
 8006bea:	4625      	mov	r5, r4
 8006bec:	4628      	mov	r0, r5
 8006bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf0:	f000 f830 	bl	8006c54 <_malloc_usable_size_r>
 8006bf4:	42a0      	cmp	r0, r4
 8006bf6:	d20f      	bcs.n	8006c18 <_realloc_r+0x48>
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f7ff ff8e 	bl	8006b1c <_malloc_r>
 8006c00:	4605      	mov	r5, r0
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d0f2      	beq.n	8006bec <_realloc_r+0x1c>
 8006c06:	4631      	mov	r1, r6
 8006c08:	4622      	mov	r2, r4
 8006c0a:	f7ff ff0f 	bl	8006a2c <memcpy>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4638      	mov	r0, r7
 8006c12:	f7ff ff33 	bl	8006a7c <_free_r>
 8006c16:	e7e9      	b.n	8006bec <_realloc_r+0x1c>
 8006c18:	4635      	mov	r5, r6
 8006c1a:	e7e7      	b.n	8006bec <_realloc_r+0x1c>

08006c1c <_sbrk_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d06      	ldr	r5, [pc, #24]	; (8006c38 <_sbrk_r+0x1c>)
 8006c20:	2300      	movs	r3, #0
 8006c22:	4604      	mov	r4, r0
 8006c24:	4608      	mov	r0, r1
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	f7fa fef8 	bl	8001a1c <_sbrk>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d102      	bne.n	8006c36 <_sbrk_r+0x1a>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	b103      	cbz	r3, 8006c36 <_sbrk_r+0x1a>
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	200007a0 	.word	0x200007a0

08006c3c <__malloc_lock>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	; (8006c44 <__malloc_lock+0x8>)
 8006c3e:	f000 b811 	b.w	8006c64 <__retarget_lock_acquire_recursive>
 8006c42:	bf00      	nop
 8006c44:	200007a8 	.word	0x200007a8

08006c48 <__malloc_unlock>:
 8006c48:	4801      	ldr	r0, [pc, #4]	; (8006c50 <__malloc_unlock+0x8>)
 8006c4a:	f000 b80c 	b.w	8006c66 <__retarget_lock_release_recursive>
 8006c4e:	bf00      	nop
 8006c50:	200007a8 	.word	0x200007a8

08006c54 <_malloc_usable_size_r>:
 8006c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c58:	1f18      	subs	r0, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	bfbc      	itt	lt
 8006c5e:	580b      	ldrlt	r3, [r1, r0]
 8006c60:	18c0      	addlt	r0, r0, r3
 8006c62:	4770      	bx	lr

08006c64 <__retarget_lock_acquire_recursive>:
 8006c64:	4770      	bx	lr

08006c66 <__retarget_lock_release_recursive>:
 8006c66:	4770      	bx	lr

08006c68 <_init>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	bf00      	nop
 8006c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6e:	bc08      	pop	{r3}
 8006c70:	469e      	mov	lr, r3
 8006c72:	4770      	bx	lr

08006c74 <_fini>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr
