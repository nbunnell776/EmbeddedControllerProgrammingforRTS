
UCSD-Embedded-Controller-Programming-For-RTS-Final-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b0  080065b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b8  080065b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08006630  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08006630  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148ea  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028bc  00000000  00000000  0003498a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00037248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  000383a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002850f  00000000  00000000  00039400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013367  00000000  00000000  0006190f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faeec  00000000  00000000  00074c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016fb62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c78  00000000  00000000  0016fbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006368 	.word	0x08006368

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006368 	.word	0x08006368

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_UART_TxCpltCallback>:
RTC_TimeTypeDef rtcTime;
RTC_DateTypeDef rtcDate;

// Define the IT callback functions
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	// Set our complete flag
	txInterruptComplete = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_UART_TxCpltCallback+0x1c>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c

08000598 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	// Set our complete flag
	rxInterruptComplete = 1;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <HAL_UART_RxCpltCallback+0x1c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000008d 	.word	0x2000008d

080005b8 <logMsg>:

// logMsg function prints a string, _out, to the console over the specified UART
void logMsg(UART_HandleTypeDef *huart, char *_out)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09c      	sub	sp, #112	; 0x70
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	// Clear the complete flag
	txInterruptComplete = 0;
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <logMsg+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

	char buffer[100] = {0};		// Large char buffer for string printing
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2260      	movs	r2, #96	; 0x60
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f005 fa7d 	bl	8005ad4 <memset>
    snprintf(buffer, sizeof(buffer), "%s\n", _out);
 80005da:	f107 000c 	add.w	r0, r7, #12
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <logMsg+0x68>)
 80005e2:	2164      	movs	r1, #100	; 0x64
 80005e4:	f005 fa7e 	bl	8005ae4 <sniprintf>
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) buffer, strlen(buffer));
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdef 	bl	80001d0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <logMsg+0x6c>)
 80005fe:	f004 f955 	bl	80048ac <HAL_UART_Transmit_IT>

    // Loiter until the IT complete flag is set
	while (!txInterruptComplete)
 8000602:	bf00      	nop
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <logMsg+0x64>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f083 0301 	eor.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f8      	bne.n	8000604 <logMsg+0x4c>
	{
		;
	}

	//HAL_IWDG_Refresh(&hiwdg);
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3770      	adds	r7, #112	; 0x70
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000008c 	.word	0x2000008c
 8000620:	08006380 	.word	0x08006380
 8000624:	20000100 	.word	0x20000100

08000628 <logGetMsg>:

// logMsg function returns a char, c, over the specified UART
char logGetMsg(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	// Clear the complete flag
	rxInterruptComplete = 0;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <logGetMsg+0x3c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]

  char c = '\0';				// Set default return value to NULL
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &c, sizeof(c));
 800063a:	f107 030f 	add.w	r3, r7, #15
 800063e:	2201      	movs	r2, #1
 8000640:	4619      	mov	r1, r3
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <logGetMsg+0x40>)
 8000644:	f004 f98e 	bl	8004964 <HAL_UART_Receive_IT>

  // Loiter until the IT complete flag is set
	while (!rxInterruptComplete)
 8000648:	bf00      	nop
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <logGetMsg+0x3c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f083 0301 	eor.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f8      	bne.n	800064a <logGetMsg+0x22>
	{
		;
	}

	return c;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000008d 	.word	0x2000008d
 8000668:	20000100 	.word	0x20000100

0800066c <FMC_IRQn_Init>:

// Added a dedicated init function here as MX_GPIO_Init() would
//  overwrite any added code after device cfg changes
void FMC_IRQn_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
	// Enable FMC interrupt
	uint32_t IRQn = FMC_IRQn;
 8000672:	2330      	movs	r3, #48	; 0x30
 8000674:	60fb      	str	r3, [r7, #12]
	uint32_t wordOffset = (IRQn >> 5);			// IRQn / 32
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	095b      	lsrs	r3, r3, #5
 800067a:	60bb      	str	r3, [r7, #8]
	uint32_t bitOffset = (IRQn & 0x1f);			// IRQn mod 32
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f003 031f 	and.w	r3, r3, #31
 8000682:	607b      	str	r3, [r7, #4]
	NVIC->ISER[wordOffset] = (1 << bitOffset);	// Enable INT
 8000684:	2201      	movs	r2, #1
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <FMC_IRQn_Init+0x38>)
 800068e:	4619      	mov	r1, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <FMC_IRQ_CpltCallback>:

// Callback function for the FMC interrupt
//  Toggle an LED to give indication of int and
//  set flag to be used in main routine
void FMC_IRQ_CpltCallback(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <FMC_IRQ_CpltCallback+0x18>)
 80006b2:	f001 fbf7 	bl	8001ea4 <HAL_GPIO_TogglePin>
	swInterruptComplete = 1;
 80006b6:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <FMC_IRQ_CpltCallback+0x1c>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000400 	.word	0x48000400
 80006c4:	2000008e 	.word	0x2000008e

080006c8 <myDelay1>:

// NOTE: APB1 Timer clocks prescaled down to 10MHz in Clock Config tool
void myDelay1(uint32_t mSec)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	if (mSec == 0)	// Dummy check that we have a real value
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d02a      	beq.n	800072c <myDelay1+0x64>
		return;

	TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable for config
 80006d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e0:	f023 0301 	bic.w	r3, r3, #1
 80006e4:	6013      	str	r3, [r2, #0]
	TIM2->SR = 0;				// Clear status reg
 80006e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
	TIM2->CNT = 0;				// Clear accrual
 80006ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->PSC = 9999;			// PSC = (10MHz / 1KHz) - 1
 80006f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = mSec - 1;		// Delay - 1
 8000700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3b01      	subs	r3, #1
 8000708:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;	// Re-enable timer
 800070a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6013      	str	r3, [r2, #0]

	while ((TIM2->SR & TIM_SR_UIF) == 0);	// Loop until the UIF flag is set in the SR
 800071a:	bf00      	nop
 800071c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f8      	beq.n	800071c <myDelay1+0x54>
 800072a:	e000      	b.n	800072e <myDelay1+0x66>
		return;
 800072c:	bf00      	nop
}
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <myDelay2>:

// Simple loop implementation to delay for a give number of mSec
void myDelay2(uint32_t mSec)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = 80000;	// LOAD * (1/80MHz) = target of 1 mSec
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <myDelay2+0x58>)
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <myDelay2+0x5c>)
 8000744:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;		// Clear value
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <myDelay2+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;	// Set clock source to internal
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <myDelay2+0x58>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <myDelay2+0x58>)
 8000752:	f043 0302 	orr.w	r3, r3, #2
 8000756:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <myDelay2+0x58>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <myDelay2+0x58>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6013      	str	r3, [r2, #0]


	while (mSec > 0)
 8000764:	e009      	b.n	800077a <myDelay2+0x42>
	{
		while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0)
 8000766:	bf00      	nop
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <myDelay2+0x58>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0f9      	beq.n	8000768 <myDelay2+0x30>
			{
				;	// Loiter while the CountFlag in bit 16 is not set
			}
		mSec--;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	607b      	str	r3, [r7, #4]
	while (mSec > 0)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f2      	bne.n	8000766 <myDelay2+0x2e>
	}
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010
 8000794:	00013880 	.word	0x00013880

08000798 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d108      	bne.n	80007bc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		tim3Accrual++;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007b4:	701a      	strb	r2, [r3, #0]
		tim3InterruptComplete = 1;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
	}
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40000400 	.word	0x40000400
 80007cc:	20000090 	.word	0x20000090
 80007d0:	2000008f 	.word	0x2000008f

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 ff9c 	bl	8001716 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f971 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e2:	f000 fb53 	bl	8000e8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007e6:	f000 fb21 	bl	8000e2c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80007ea:	f000 fa81 	bl	8000cf0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007ee:	f000 facd 	bl	8000d8c <MX_TIM3_Init>
  MX_RTC_Init();
 80007f2:	f000 f9eb 	bl	8000bcc <MX_RTC_Init>
  MX_IWDG_Init();
 80007f6:	f000 f9cb 	bl	8000b90 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  // Init SW interrupt
  FMC_IRQn_Init();
 80007fa:	f7ff ff37 	bl	800066c <FMC_IRQn_Init>

  // Init the overflow interrupt for TIM3
  HAL_TIM_Base_Start_IT(&htim3);
 80007fe:	4895      	ldr	r0, [pc, #596]	; (8000a54 <main+0x280>)
 8000800:	f003 fbae 	bl	8003f60 <HAL_TIM_Base_Start_IT>

  // Get time
  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000804:	2200      	movs	r2, #0
 8000806:	4994      	ldr	r1, [pc, #592]	; (8000a58 <main+0x284>)
 8000808:	4894      	ldr	r0, [pc, #592]	; (8000a5c <main+0x288>)
 800080a:	f003 f823 	bl	8003854 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800080e:	2200      	movs	r2, #0
 8000810:	4993      	ldr	r1, [pc, #588]	; (8000a60 <main+0x28c>)
 8000812:	4892      	ldr	r0, [pc, #584]	; (8000a5c <main+0x288>)
 8000814:	f003 f901 	bl	8003a1a <HAL_RTC_GetDate>

  HAL_IWDG_Refresh(&hiwdg);
 8000818:	4892      	ldr	r0, [pc, #584]	; (8000a64 <main+0x290>)
 800081a:	f001 fbc6 	bl	8001faa <HAL_IWDG_Refresh>

  // Header info with instructions for user at console
  logMsg(&huart1, "Welcome to Embedded controller programming");
 800081e:	4992      	ldr	r1, [pc, #584]	; (8000a68 <main+0x294>)
 8000820:	4892      	ldr	r0, [pc, #584]	; (8000a6c <main+0x298>)
 8000822:	f7ff fec9 	bl	80005b8 <logMsg>
  logMsg(&huart1, " - Enter g for toggling Green LED");
 8000826:	4992      	ldr	r1, [pc, #584]	; (8000a70 <main+0x29c>)
 8000828:	4890      	ldr	r0, [pc, #576]	; (8000a6c <main+0x298>)
 800082a:	f7ff fec5 	bl	80005b8 <logMsg>
  logMsg(&huart1, " - Enter b for toggling Blue LED");
 800082e:	4991      	ldr	r1, [pc, #580]	; (8000a74 <main+0x2a0>)
 8000830:	488e      	ldr	r0, [pc, #568]	; (8000a6c <main+0x298>)
 8000832:	f7ff fec1 	bl	80005b8 <logMsg>
  logMsg(&huart1, " - Enter s to generate SW interrupt");
 8000836:	4990      	ldr	r1, [pc, #576]	; (8000a78 <main+0x2a4>)
 8000838:	488c      	ldr	r0, [pc, #560]	; (8000a6c <main+0x298>)
 800083a:	f7ff febd 	bl	80005b8 <logMsg>
  logMsg(&huart1, " - Enter t to start timer 3");
 800083e:	498f      	ldr	r1, [pc, #572]	; (8000a7c <main+0x2a8>)
 8000840:	488a      	ldr	r0, [pc, #552]	; (8000a6c <main+0x298>)
 8000842:	f7ff feb9 	bl	80005b8 <logMsg>
  logMsg(&huart1, " - Enter w to trigger watchdog reset");
 8000846:	498e      	ldr	r1, [pc, #568]	; (8000a80 <main+0x2ac>)
 8000848:	4888      	ldr	r0, [pc, #544]	; (8000a6c <main+0x298>)
 800084a:	f7ff feb5 	bl	80005b8 <logMsg>
		myDelay2(500);
	}
	*/

    // Define an input char with default value of NULL
    char input = '\0';
 800084e:	2300      	movs	r3, #0
 8000850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    input = logGetMsg(&huart1);
 8000854:	4885      	ldr	r0, [pc, #532]	; (8000a6c <main+0x298>)
 8000856:	f7ff fee7 	bl	8000628 <logGetMsg>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


    // Evaluate input char and execute methods associated with command
    switch(input)
 8000860:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000864:	3b62      	subs	r3, #98	; 0x62
 8000866:	2b15      	cmp	r3, #21
 8000868:	f200 80ee 	bhi.w	8000a48 <main+0x274>
 800086c:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <main+0xa0>)
 800086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000872:	bf00      	nop
 8000874:	0800092d 	.word	0x0800092d
 8000878:	08000a49 	.word	0x08000a49
 800087c:	08000a49 	.word	0x08000a49
 8000880:	08000a49 	.word	0x08000a49
 8000884:	08000a49 	.word	0x08000a49
 8000888:	080008cd 	.word	0x080008cd
 800088c:	08000a49 	.word	0x08000a49
 8000890:	08000a49 	.word	0x08000a49
 8000894:	08000a49 	.word	0x08000a49
 8000898:	08000a49 	.word	0x08000a49
 800089c:	08000a49 	.word	0x08000a49
 80008a0:	08000a49 	.word	0x08000a49
 80008a4:	08000a49 	.word	0x08000a49
 80008a8:	08000a49 	.word	0x08000a49
 80008ac:	08000a49 	.word	0x08000a49
 80008b0:	08000a49 	.word	0x08000a49
 80008b4:	08000a49 	.word	0x08000a49
 80008b8:	0800098d 	.word	0x0800098d
 80008bc:	080009dd 	.word	0x080009dd
 80008c0:	08000a49 	.word	0x08000a49
 80008c4:	08000a49 	.word	0x08000a49
 80008c8:	08000a37 	.word	0x08000a37
    {

        case ('g'):
        {
			// Print received char, print message indicating delay, toggle green LED on and off with myDelay2()
            logMsg(&huart1, "g");
 80008cc:	496d      	ldr	r1, [pc, #436]	; (8000a84 <main+0x2b0>)
 80008ce:	4867      	ldr	r0, [pc, #412]	; (8000a6c <main+0x298>)
 80008d0:	f7ff fe72 	bl	80005b8 <logMsg>
			
            char buffer[50] = {0};				// Output buffer
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	222e      	movs	r2, #46	; 0x2e
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f005 f8f7 	bl	8005ad4 <memset>
			snprintf(buffer, sizeof(buffer), "Toggling green LED 3x on every 1000ms");
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4a67      	ldr	r2, [pc, #412]	; (8000a88 <main+0x2b4>)
 80008ea:	2132      	movs	r1, #50	; 0x32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f005 f8f9 	bl	8005ae4 <sniprintf>
			logMsg(&huart1, buffer);
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	485d      	ldr	r0, [pc, #372]	; (8000a6c <main+0x298>)
 80008f8:	f7ff fe5e 	bl	80005b8 <logMsg>
			
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80008fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000900:	4862      	ldr	r0, [pc, #392]	; (8000a8c <main+0x2b8>)
 8000902:	f001 facf 	bl	8001ea4 <HAL_GPIO_TogglePin>
			myDelay2(1000);
 8000906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090a:	f7ff ff15 	bl	8000738 <myDelay2>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800090e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000912:	485e      	ldr	r0, [pc, #376]	; (8000a8c <main+0x2b8>)
 8000914:	f001 fac6 	bl	8001ea4 <HAL_GPIO_TogglePin>
			myDelay2(1000);
 8000918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091c:	f7ff ff0c 	bl	8000738 <myDelay2>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000924:	4859      	ldr	r0, [pc, #356]	; (8000a8c <main+0x2b8>)
 8000926:	f001 fabd 	bl	8001ea4 <HAL_GPIO_TogglePin>
			
            break;
 800092a:	e092      	b.n	8000a52 <main+0x27e>
        }

        case ('b'):
        {
			// Print received char, print message indicating delay, toggle blue LED on and off with myDelay1()
            logMsg(&huart1, "b");
 800092c:	4958      	ldr	r1, [pc, #352]	; (8000a90 <main+0x2bc>)
 800092e:	484f      	ldr	r0, [pc, #316]	; (8000a6c <main+0x298>)
 8000930:	f7ff fe42 	bl	80005b8 <logMsg>
			
            char buffer[50] = {0};		// Output buffer
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	222e      	movs	r2, #46	; 0x2e
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f005 f8c7 	bl	8005ad4 <memset>
			snprintf(buffer, sizeof(buffer), "Toggling blue LED 3x on every 1000ms");
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4a52      	ldr	r2, [pc, #328]	; (8000a94 <main+0x2c0>)
 800094a:	2132      	movs	r1, #50	; 0x32
 800094c:	4618      	mov	r0, r3
 800094e:	f005 f8c9 	bl	8005ae4 <sniprintf>
			logMsg(&huart1, buffer);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	4845      	ldr	r0, [pc, #276]	; (8000a6c <main+0x298>)
 8000958:	f7ff fe2e 	bl	80005b8 <logMsg>
			
            HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 800095c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000960:	484d      	ldr	r0, [pc, #308]	; (8000a98 <main+0x2c4>)
 8000962:	f001 fa9f 	bl	8001ea4 <HAL_GPIO_TogglePin>
			myDelay1(1000);
 8000966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096a:	f7ff fead 	bl	80006c8 <myDelay1>
			HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 800096e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000972:	4849      	ldr	r0, [pc, #292]	; (8000a98 <main+0x2c4>)
 8000974:	f001 fa96 	bl	8001ea4 <HAL_GPIO_TogglePin>
			myDelay1(1000);
 8000978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097c:	f7ff fea4 	bl	80006c8 <myDelay1>
			HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 8000980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000984:	4844      	ldr	r0, [pc, #272]	; (8000a98 <main+0x2c4>)
 8000986:	f001 fa8d 	bl	8001ea4 <HAL_GPIO_TogglePin>
			
            break;
 800098a:	e062      	b.n	8000a52 <main+0x27e>
        }

        case ('s'):
        {
            logMsg(&huart1, "s");
 800098c:	4943      	ldr	r1, [pc, #268]	; (8000a9c <main+0x2c8>)
 800098e:	4837      	ldr	r0, [pc, #220]	; (8000a6c <main+0x298>)
 8000990:	f7ff fe12 	bl	80005b8 <logMsg>

            // Trigger SW interrupt at target IRQ, FMC or 48
            NVIC->STIR = FMC_IRQn;
 8000994:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <main+0x2cc>)
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00

            // Implement callback under FMC_IRQ_CpltCallback()
			while (!swInterruptComplete)
 800099c:	bf00      	nop
 800099e:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <main+0x2d0>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	f083 0301 	eor.w	r3, r3, #1
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f8      	bne.n	800099e <main+0x1ca>
			{
				;	// Loiter until flag is set
			}
			
			swInterruptComplete = 0;	// Reset flag
 80009ac:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <main+0x2d0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
			
			char buffer[50] = {0};		// Output buffer
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	222e      	movs	r2, #46	; 0x2e
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f005 f888 	bl	8005ad4 <memset>
            snprintf(buffer, sizeof(buffer), "SW Interrupt detected");
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4a38      	ldr	r2, [pc, #224]	; (8000aa8 <main+0x2d4>)
 80009c8:	2132      	movs	r1, #50	; 0x32
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 f88a 	bl	8005ae4 <sniprintf>
			logMsg(&huart1, buffer);
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4825      	ldr	r0, [pc, #148]	; (8000a6c <main+0x298>)
 80009d6:	f7ff fdef 	bl	80005b8 <logMsg>

            break;
 80009da:	e03a      	b.n	8000a52 <main+0x27e>
        }

        case ('t'):
        {
            logMsg(&huart1, "t");
 80009dc:	4933      	ldr	r1, [pc, #204]	; (8000aac <main+0x2d8>)
 80009de:	4823      	ldr	r0, [pc, #140]	; (8000a6c <main+0x298>)
 80009e0:	f7ff fdea 	bl	80005b8 <logMsg>

            // Implement event counter using timer 3
            tim3Accrual = 0;	// Reset accrual
 80009e4:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <main+0x2dc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]

            while (tim3Accrual < 10)
 80009ea:	e00a      	b.n	8000a02 <main+0x22e>
            {
            	tim3InterruptComplete = 0;
 80009ec:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <main+0x2e0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]

            	while (!tim3InterruptComplete)
 80009f2:	bf00      	nop
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <main+0x2e0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	f083 0301 	eor.w	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1f8      	bne.n	80009f4 <main+0x220>
            while (tim3Accrual < 10)
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <main+0x2dc>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b09      	cmp	r3, #9
 8000a08:	d9f0      	bls.n	80009ec <main+0x218>
				{
					;	// Loiter until target count is reached
				}
            }

            char buffer[50] = {0};		// Output buffer
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	222e      	movs	r2, #46	; 0x2e
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 f85c 	bl	8005ad4 <memset>
            snprintf(buffer, sizeof(buffer), "Total counted timer3 events: %d", tim3Accrual);
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <main+0x2dc>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	1d38      	adds	r0, r7, #4
 8000a22:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <main+0x2e4>)
 8000a24:	2132      	movs	r1, #50	; 0x32
 8000a26:	f005 f85d 	bl	8005ae4 <sniprintf>
            logMsg(&huart1, buffer);
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480f      	ldr	r0, [pc, #60]	; (8000a6c <main+0x298>)
 8000a30:	f7ff fdc2 	bl	80005b8 <logMsg>
            break;
 8000a34:	e00d      	b.n	8000a52 <main+0x27e>
        }

        case ('w'):
        {
            logMsg(&huart1, "w");
 8000a36:	4921      	ldr	r1, [pc, #132]	; (8000abc <main+0x2e8>)
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <main+0x298>)
 8000a3a:	f7ff fdbd 	bl	80005b8 <logMsg>

            // Implement code to delay 1 second and miss the watchdog pet. Should reset board
            myDelay2(1000);
 8000a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a42:	f7ff fe79 	bl	8000738 <myDelay2>

            break;
 8000a46:	e004      	b.n	8000a52 <main+0x27e>
        }

        // Default case. Print error message
        default:
        {
            logMsg(&huart1, "Unknown character received!\n");
 8000a48:	491d      	ldr	r1, [pc, #116]	; (8000ac0 <main+0x2ec>)
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <main+0x298>)
 8000a4c:	f7ff fdb4 	bl	80005b8 <logMsg>

            //char buffer[100] = {0};		// Large char buffer for string printing
			//snprintf(buffer, sizeof(buffer), "Current time is: %02d:%02d:%02d", rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds);
			//logMsg(&huart1, buffer);

			break;
 8000a50:	bf00      	nop
  {
 8000a52:	e6fc      	b.n	800084e <main+0x7a>
 8000a54:	200000b4 	.word	0x200000b4
 8000a58:	200001a8 	.word	0x200001a8
 8000a5c:	20000184 	.word	0x20000184
 8000a60:	200000a0 	.word	0x200000a0
 8000a64:	200000a4 	.word	0x200000a4
 8000a68:	0800639c 	.word	0x0800639c
 8000a6c:	20000100 	.word	0x20000100
 8000a70:	080063c8 	.word	0x080063c8
 8000a74:	080063ec 	.word	0x080063ec
 8000a78:	08006410 	.word	0x08006410
 8000a7c:	08006434 	.word	0x08006434
 8000a80:	08006450 	.word	0x08006450
 8000a84:	08006478 	.word	0x08006478
 8000a88:	0800647c 	.word	0x0800647c
 8000a8c:	48000400 	.word	0x48000400
 8000a90:	080064a4 	.word	0x080064a4
 8000a94:	080064a8 	.word	0x080064a8
 8000a98:	48000800 	.word	0x48000800
 8000a9c:	080064d0 	.word	0x080064d0
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	2000008e 	.word	0x2000008e
 8000aa8:	080064d4 	.word	0x080064d4
 8000aac:	080064ec 	.word	0x080064ec
 8000ab0:	20000090 	.word	0x20000090
 8000ab4:	2000008f 	.word	0x2000008f
 8000ab8:	080064f0 	.word	0x080064f0
 8000abc:	08006510 	.word	0x08006510
 8000ac0:	08006514 	.word	0x08006514

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b096      	sub	sp, #88	; 0x58
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2244      	movs	r2, #68	; 0x44
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 fffe 	bl	8005ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ae6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aea:	f001 fa8d 	bl	8002008 <HAL_PWREx_ControlVoltageScaling>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000af4:	f000 fbe0 	bl	80012b8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af8:	f001 fa68 	bl	8001fcc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <SystemClock_Config+0xc8>)
 8000afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b02:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <SystemClock_Config+0xc8>)
 8000b04:	f023 0318 	bic.w	r3, r3, #24
 8000b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000b0c:	231c      	movs	r3, #28
 8000b0e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b20:	2360      	movs	r3, #96	; 0x60
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b30:	2328      	movs	r3, #40	; 0x28
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b34:	2307      	movs	r3, #7
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fab5 	bl	80020b4 <HAL_RCC_OscConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b50:	f000 fbb2 	bl	80012b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b54:	230f      	movs	r3, #15
 8000b56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000b60:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 fe86 	bl	8002880 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b7a:	f000 fb9d 	bl	80012b8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b7e:	f002 fb6f 	bl	8003260 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b82:	bf00      	nop
 8000b84:	3758      	adds	r7, #88	; 0x58
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_IWDG_Init+0x34>)
 8000b96:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <MX_IWDG_Init+0x38>)
 8000b98:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_IWDG_Init+0x34>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 3999;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_IWDG_Init+0x34>)
 8000ba2:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000ba6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3999;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_IWDG_Init+0x34>)
 8000baa:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000bae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_IWDG_Init+0x34>)
 8000bb2:	f001 f9b4 	bl	8001f1e <HAL_IWDG_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000bbc:	f000 fb7c 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000a4 	.word	0x200000a4
 8000bc8:	40003000 	.word	0x40003000

08000bcc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b092      	sub	sp, #72	; 0x48
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	222c      	movs	r2, #44	; 0x2c
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 ff71 	bl	8005ad4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bf2:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000bf4:	4a3d      	ldr	r2, [pc, #244]	; (8000cec <MX_RTC_Init+0x120>)
 8000bf6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000bf8:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000bfa:	2240      	movs	r2, #64	; 0x40
 8000bfc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000c00:	227f      	movs	r2, #127	; 0x7f
 8000c02:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c22:	4831      	ldr	r0, [pc, #196]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000c24:	f002 fcfe 	bl	8003624 <HAL_RTC_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000c2e:	f000 fb43 	bl	80012b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x07;
 8000c32:	2307      	movs	r3, #7
 8000c34:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x30;
 8000c38:	2330      	movs	r3, #48	; 0x30
 8000c3a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c50:	2201      	movs	r2, #1
 8000c52:	4619      	mov	r1, r3
 8000c54:	4824      	ldr	r0, [pc, #144]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000c56:	f002 fd60 	bl	800371a <HAL_RTC_SetTime>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_RTC_Init+0x98>
  {
	Error_Handler();
 8000c60:	f000 fb2a 	bl	80012b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000c64:	2306      	movs	r3, #6
 8000c66:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_AUGUST;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x28;
 8000c70:	2328      	movs	r3, #40	; 0x28
 8000c72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x21;
 8000c76:	2321      	movs	r3, #33	; 0x21
 8000c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c80:	2201      	movs	r2, #1
 8000c82:	4619      	mov	r1, r3
 8000c84:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000c86:	f002 fe41 	bl	800390c <HAL_RTC_SetDate>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_RTC_Init+0xc8>
  {
	Error_Handler();
 8000c90:	f000 fb12 	bl	80012b8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x07;
 8000c94:	2307      	movs	r3, #7
 8000c96:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x30;
 8000c98:	2330      	movs	r3, #48	; 0x30
 8000c9a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x10;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  //sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS;
  //sAlarm.AlarmMask |= (RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_MINUTES);
  //sAlarm.AlarmMask &= ~RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmMask &= ~0x01ffffff;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	f003 437e 	and.w	r3, r3, #4261412864	; 0xfe000000
 8000cb2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_RTC_Init+0x11c>)
 8000cd0:	f002 fef0 	bl	8003ab4 <HAL_RTC_SetAlarm>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8000cda:	f000 faed 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3748      	adds	r7, #72	; 0x48
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000184 	.word	0x20000184
 8000cec:	40002800 	.word	0x40002800

08000cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d36:	4814      	ldr	r0, [pc, #80]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d38:	f003 f8ba 	bl	8003eb0 <HAL_TIM_Base_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d42:	f000 fab9 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d54:	f003 fa93 	bl	800427e <HAL_TIM_ConfigClockSource>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d5e:	f000 faab 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d70:	f003 fca8 	bl	80046c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d7a:	f000 fa9d 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3720      	adds	r7, #32
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200001bc 	.word	0x200001bc

08000d8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_TIM3_Init+0x98>)
 8000dac:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <MX_TIM3_Init+0x9c>)
 8000dae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_TIM3_Init+0x98>)
 8000db2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000db6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_TIM3_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MX_TIM3_Init+0x98>)
 8000dc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_TIM3_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_TIM3_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <MX_TIM3_Init+0x98>)
 8000dd4:	f003 f86c 	bl	8003eb0 <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000dde:	f000 fa6b 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_TIM3_Init+0x98>)
 8000df0:	f003 fa45 	bl	800427e <HAL_TIM_ConfigClockSource>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000dfa:	f000 fa5d 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <MX_TIM3_Init+0x98>)
 8000e0c:	f003 fc5a 	bl	80046c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000e16:	f000 fa4f 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000b4 	.word	0x200000b4
 8000e28:	40000400 	.word	0x40000400

08000e2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <MX_USART1_UART_Init+0x5c>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_USART1_UART_Init+0x58>)
 8000e70:	f003 fcce 	bl	8004810 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e7a:	f000 fa1d 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000100 	.word	0x20000100
 8000e88:	40013800 	.word	0x40013800

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea2:	4bb9      	ldr	r3, [pc, #740]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4ab8      	ldr	r2, [pc, #736]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4bb6      	ldr	r3, [pc, #728]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4bb3      	ldr	r3, [pc, #716]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4ab2      	ldr	r2, [pc, #712]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4bb0      	ldr	r3, [pc, #704]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	4bad      	ldr	r3, [pc, #692]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4aac      	ldr	r2, [pc, #688]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4baa      	ldr	r3, [pc, #680]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4ba7      	ldr	r3, [pc, #668]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4aa6      	ldr	r2, [pc, #664]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4ba4      	ldr	r3, [pc, #656]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4ba1      	ldr	r3, [pc, #644]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4aa0      	ldr	r2, [pc, #640]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b9e      	ldr	r3, [pc, #632]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1a:	4b9b      	ldr	r3, [pc, #620]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a9a      	ldr	r2, [pc, #616]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b98      	ldr	r3, [pc, #608]	; (8001188 <MX_GPIO_Init+0x2fc>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f38:	4894      	ldr	r0, [pc, #592]	; (800118c <MX_GPIO_Init+0x300>)
 8000f3a:	f000 ff9b 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f000 ff94 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f52:	488f      	ldr	r0, [pc, #572]	; (8001190 <MX_GPIO_Init+0x304>)
 8000f54:	f000 ff8e 	bl	8001e74 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f5e:	488d      	ldr	r0, [pc, #564]	; (8001194 <MX_GPIO_Init+0x308>)
 8000f60:	f000 ff88 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6a:	488a      	ldr	r0, [pc, #552]	; (8001194 <MX_GPIO_Init+0x308>)
 8000f6c:	f000 ff82 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f76:	4888      	ldr	r0, [pc, #544]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000f78:	f000 ff7c 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2120      	movs	r1, #32
 8000f80:	4883      	ldr	r0, [pc, #524]	; (8001190 <MX_GPIO_Init+0x304>)
 8000f82:	f000 ff77 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4880      	ldr	r0, [pc, #512]	; (800118c <MX_GPIO_Init+0x300>)
 8000f8c:	f000 ff72 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f90:	f240 1315 	movw	r3, #277	; 0x115
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4878      	ldr	r0, [pc, #480]	; (800118c <MX_GPIO_Init+0x300>)
 8000faa:	f000 fdb9 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000fae:	236a      	movs	r3, #106	; 0x6a
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb2:	4b7a      	ldr	r3, [pc, #488]	; (800119c <MX_GPIO_Init+0x310>)
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4872      	ldr	r0, [pc, #456]	; (800118c <MX_GPIO_Init+0x300>)
 8000fc2:	f000 fdad 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000fc6:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fcc:	4b73      	ldr	r3, [pc, #460]	; (800119c <MX_GPIO_Init+0x310>)
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	486f      	ldr	r0, [pc, #444]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000fdc:	f000 fda0 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000fe0:	233f      	movs	r3, #63	; 0x3f
 8000fe2:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4869      	ldr	r0, [pc, #420]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ff4:	f000 fd94 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001008:	2308      	movs	r3, #8
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f000 fd83 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800101a:	f248 1304 	movw	r3, #33028	; 0x8104
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f000 fd73 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800103a:	2310      	movs	r3, #16
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800103e:	230b      	movs	r3, #11
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f000 fd66 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001054:	23e0      	movs	r3, #224	; 0xe0
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001064:	2305      	movs	r3, #5
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f000 fd55 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001076:	2301      	movs	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <MX_GPIO_Init+0x310>)
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4841      	ldr	r0, [pc, #260]	; (8001190 <MX_GPIO_Init+0x304>)
 800108a:	f000 fd49 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800108e:	2302      	movs	r3, #2
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001092:	230b      	movs	r3, #11
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	483b      	ldr	r0, [pc, #236]	; (8001190 <MX_GPIO_Init+0x304>)
 80010a2:	f000 fd3d 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010a6:	f24f 0334 	movw	r3, #61492	; 0xf034
 80010aa:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4834      	ldr	r0, [pc, #208]	; (8001190 <MX_GPIO_Init+0x304>)
 80010c0:	f000 fd2e 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010c4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010d6:	2306      	movs	r3, #6
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	482a      	ldr	r0, [pc, #168]	; (800118c <MX_GPIO_Init+0x300>)
 80010e2:	f000 fd1d 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010e6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80010ea:	61fb      	str	r3, [r7, #28]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010f8:	230a      	movs	r3, #10
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4822      	ldr	r0, [pc, #136]	; (800118c <MX_GPIO_Init+0x300>)
 8001104:	f000 fd0c 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001108:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110e:	2312      	movs	r3, #18
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001112:	2301      	movs	r3, #1
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800111a:	2304      	movs	r3, #4
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	481a      	ldr	r0, [pc, #104]	; (8001190 <MX_GPIO_Init+0x304>)
 8001126:	f000 fcfb 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800112a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800113c:	2307      	movs	r3, #7
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4813      	ldr	r0, [pc, #76]	; (8001194 <MX_GPIO_Init+0x308>)
 8001148:	f000 fcea 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800114c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001150:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_GPIO_Init+0x310>)
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_GPIO_Init+0x308>)
 8001162:	f000 fcdd 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001166:	f243 0381 	movw	r3, #12417	; 0x3081
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_GPIO_Init+0x308>)
 8001180:	f000 fcce 	bl	8001b20 <HAL_GPIO_Init>
 8001184:	e00c      	b.n	80011a0 <MX_GPIO_Init+0x314>
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	48001000 	.word	0x48001000
 8001190:	48000400 	.word	0x48000400
 8001194:	48000c00 	.word	0x48000c00
 8001198:	48000800 	.word	0x48000800
 800119c:	10110000 	.word	0x10110000

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80011a0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	483c      	ldr	r0, [pc, #240]	; (80012ac <MX_GPIO_Init+0x420>)
 80011ba:	f000 fcb1 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f000 fca3 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011ec:	230a      	movs	r3, #10
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f000 fc91 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80011fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001210:	2306      	movs	r3, #6
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	4824      	ldr	r0, [pc, #144]	; (80012ac <MX_GPIO_Init+0x420>)
 800121c:	f000 fc80 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001230:	2305      	movs	r3, #5
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	481d      	ldr	r0, [pc, #116]	; (80012b0 <MX_GPIO_Init+0x424>)
 800123c:	f000 fc70 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001240:	2378      	movs	r3, #120	; 0x78
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001250:	2307      	movs	r3, #7
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4815      	ldr	r0, [pc, #84]	; (80012b0 <MX_GPIO_Init+0x424>)
 800125c:	f000 fc60 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001260:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001266:	2312      	movs	r3, #18
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001272:	2304      	movs	r3, #4
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_GPIO_Init+0x428>)
 800127e:	f000 fc4f 	bl	8001b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2017      	movs	r0, #23
 8001288:	f000 fb95 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800128c:	2017      	movs	r0, #23
 800128e:	f000 fbae 	bl	80019ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2028      	movs	r0, #40	; 0x28
 8001298:	f000 fb8d 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800129c:	2028      	movs	r0, #40	; 0x28
 800129e:	f000 fba6 	bl	80019ee <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3730      	adds	r7, #48	; 0x30
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48000c00 	.word	0x48000c00
 80012b4:	48000400 	.word	0x48000400

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <Error_Handler+0x8>
	...

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_MspInit+0x44>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_MspInit+0x44>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6613      	str	r3, [r2, #96]	; 0x60
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_MspInit+0x44>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x44>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x44>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x44>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0a4      	sub	sp, #144	; 0x90
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2288      	movs	r2, #136	; 0x88
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fbd9 	bl	8005ad4 <memset>
  if(hrtc->Instance==RTC)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_RTC_MspInit+0x5c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d118      	bne.n	800135e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800132c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4618      	mov	r0, r3
 8001340:	f001 fca4 	bl	8002c8c <HAL_RCCEx_PeriphCLKConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800134a:	f7ff ffb5 	bl	80012b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_RTC_MspInit+0x60>)
 8001350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001354:	4a05      	ldr	r2, [pc, #20]	; (800136c <HAL_RTC_MspInit+0x60>)
 8001356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3790      	adds	r7, #144	; 0x90
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40002800 	.word	0x40002800
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001390:	d131      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001392:	4b27      	ldr	r3, [pc, #156]	; (8001430 <HAL_TIM_Base_MspInit+0xc0>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	4a26      	ldr	r2, [pc, #152]	; (8001430 <HAL_TIM_Base_MspInit+0xc0>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6593      	str	r3, [r2, #88]	; 0x58
 800139e:	4b24      	ldr	r3, [pc, #144]	; (8001430 <HAL_TIM_Base_MspInit+0xc0>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <HAL_TIM_Base_MspInit+0xc0>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a20      	ldr	r2, [pc, #128]	; (8001430 <HAL_TIM_Base_MspInit+0xc0>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <HAL_TIM_Base_MspInit+0xc0>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 80013c2:	2308      	movs	r3, #8
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013d2:	2301      	movs	r3, #1
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f000 fb9e 	bl	8001b20 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	201c      	movs	r0, #28
 80013ea:	f000 fae4 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013ee:	201c      	movs	r0, #28
 80013f0:	f000 fafd 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013f4:	e018      	b.n	8001428 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM3)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_TIM_Base_MspInit+0xc4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d113      	bne.n	8001428 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_TIM_Base_MspInit+0xc0>)
 8001402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_TIM_Base_MspInit+0xc0>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	6593      	str	r3, [r2, #88]	; 0x58
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_TIM_Base_MspInit+0xc0>)
 800140e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	201d      	movs	r0, #29
 800141e:	f000 faca 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001422:	201d      	movs	r0, #29
 8001424:	f000 fae3 	bl	80019ee <HAL_NVIC_EnableIRQ>
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	40000400 	.word	0x40000400

08001438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0ac      	sub	sp, #176	; 0xb0
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2288      	movs	r2, #136	; 0x88
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f004 fb3b 	bl	8005ad4 <memset>
  if(huart->Instance==USART1)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a25      	ldr	r2, [pc, #148]	; (80014f8 <HAL_UART_MspInit+0xc0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d142      	bne.n	80014ee <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001468:	2301      	movs	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800146c:	2300      	movs	r3, #0
 800146e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4618      	mov	r0, r3
 8001476:	f001 fc09 	bl	8002c8c <HAL_RCCEx_PeriphCLKConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001480:	f7ff ff1a 	bl	80012b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_UART_MspInit+0xc4>)
 8001486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001488:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <HAL_UART_MspInit+0xc4>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148e:	6613      	str	r3, [r2, #96]	; 0x60
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_UART_MspInit+0xc4>)
 8001492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_UART_MspInit+0xc4>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	4a16      	ldr	r2, [pc, #88]	; (80014fc <HAL_UART_MspInit+0xc4>)
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_UART_MspInit+0xc4>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80014b4:	23c0      	movs	r3, #192	; 0xc0
 80014b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014cc:	2307      	movs	r3, #7
 80014ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014d6:	4619      	mov	r1, r3
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <HAL_UART_MspInit+0xc8>)
 80014da:	f000 fb21 	bl	8001b20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2025      	movs	r0, #37	; 0x25
 80014e4:	f000 fa67 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014e8:	2025      	movs	r0, #37	; 0x25
 80014ea:	f000 fa80 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	37b0      	adds	r7, #176	; 0xb0
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40013800 	.word	0x40013800
 80014fc:	40021000 	.word	0x40021000
 8001500:	48000400 	.word	0x48000400

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001550:	f000 f936 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800155c:	2020      	movs	r0, #32
 800155e:	f000 fcbb 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001562:	2040      	movs	r0, #64	; 0x40
 8001564:	f000 fcb8 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001568:	2080      	movs	r0, #128	; 0x80
 800156a:	f000 fcb5 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800156e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001572:	f000 fcb1 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <TIM2_IRQHandler+0x10>)
 8001582:	f002 fd5d 	bl	8004040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200001bc 	.word	0x200001bc

08001590 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM3_IRQHandler+0x10>)
 8001596:	f002 fd53 	bl	8004040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200000b4 	.word	0x200000b4

080015a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <USART1_IRQHandler+0x10>)
 80015aa:	f003 fa1f 	bl	80049ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000100 	.word	0x20000100

080015b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015c0:	f000 fc8a 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80015c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015c8:	f000 fc86 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015d0:	f000 fc82 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80015d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015d8:	f000 fc7e 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80015dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015e0:	f000 fc7a 	bl	8001ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <FMC_IRQHandler>:

/**
  * @brief This function handles a user-defined SW interrupt.
  */
void FMC_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	FMC_IRQ_CpltCallback();
 80015ec:	f7ff f85c 	bl	80006a8 <FMC_IRQ_CpltCallback>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f004 fa2c 	bl	8005a80 <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20018000 	.word	0x20018000
 8001654:	00000400 	.word	0x00000400
 8001658:	20000094 	.word	0x20000094
 800165c:	20000220 	.word	0x20000220

08001660 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <SystemInit+0x5c>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <SystemInit+0x5c>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <SystemInit+0x60>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <SystemInit+0x60>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <SystemInit+0x60>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <SystemInit+0x60>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <SystemInit+0x60>)
 800168c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001690:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001694:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <SystemInit+0x60>)
 8001698:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800169c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <SystemInit+0x60>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <SystemInit+0x60>)
 80016a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SystemInit+0x60>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	40021000 	.word	0x40021000

080016c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c8:	f7ff ffca 	bl	8001660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016ce:	e003      	b.n	80016d8 <LoopCopyDataInit>

080016d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016d6:	3104      	adds	r1, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016d8:	480a      	ldr	r0, [pc, #40]	; (8001704 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016e0:	d3f6      	bcc.n	80016d0 <CopyDataInit>
	ldr	r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <LoopForever+0x12>)
	b	LoopFillZerobss
 80016e4:	e002      	b.n	80016ec <LoopFillZerobss>

080016e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016e8:	f842 3b04 	str.w	r3, [r2], #4

080016ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <LoopForever+0x16>)
	cmp	r2, r3
 80016ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016f0:	d3f9      	bcc.n	80016e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f004 f9cb 	bl	8005a8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016f6:	f7ff f86d 	bl	80007d4 <main>

080016fa <LoopForever>:

LoopForever:
    b LoopForever
 80016fa:	e7fe      	b.n	80016fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001700:	080065c0 	.word	0x080065c0
	ldr	r0, =_sdata
 8001704:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001708:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800170c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001710:	2000021c 	.word	0x2000021c

08001714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC1_2_IRQHandler>

08001716 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f93d 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001726:	2000      	movs	r0, #0
 8001728:	f000 f80e 	bl	8001748 <HAL_InitTick>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	e001      	b.n	800173c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001738:	f7ff fdc4 	bl	80012c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800173c:	79fb      	ldrb	r3, [r7, #7]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_InitTick+0x6c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_InitTick+0x70>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_InitTick+0x6c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f949 	bl	8001a0a <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d809      	bhi.n	8001798 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f913 	bl	80019b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_InitTick+0x74>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e007      	b.n	80017a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e004      	b.n	80017a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e001      	b.n	80017a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000208 	.word	0x20000208

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000208 	.word	0x20000208

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60d3      	str	r3, [r2, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db0b      	blt.n	800188e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4907      	ldr	r1, [pc, #28]	; (800189c <__NVIC_EnableIRQ+0x38>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f7ff ff8e 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff29 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff3e 	bl	8001848 <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff8e 	bl	80018f4 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5d 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff31 	bl	8001864 <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffa2 	bl	800195c <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d008      	beq.n	8001a4c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e022      	b.n	8001a92 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 020e 	bic.w	r2, r2, #14
 8001a5a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	f003 021c 	and.w	r2, r3, #28
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d005      	beq.n	8001ac2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	e029      	b.n	8001b16 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 020e 	bic.w	r2, r2, #14
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f003 021c 	and.w	r2, r3, #28
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
    }
  }
  return status;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	e17f      	b.n	8001e30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8171 	beq.w	8001e2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d00b      	beq.n	8001b68 <HAL_GPIO_Init+0x48>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b5c:	2b11      	cmp	r3, #17
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b12      	cmp	r3, #18
 8001b66:	d130      	bne.n	8001bca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 0201 	and.w	r2, r3, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d118      	bne.n	8001c08 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	08db      	lsrs	r3, r3, #3
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x128>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b12      	cmp	r3, #18
 8001c46:	d123      	bne.n	8001c90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	6939      	ldr	r1, [r7, #16]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80ac 	beq.w	8001e2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b5f      	ldr	r3, [pc, #380]	; (8001e50 <HAL_GPIO_Init+0x330>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	4a5e      	ldr	r2, [pc, #376]	; (8001e50 <HAL_GPIO_Init+0x330>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cde:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <HAL_GPIO_Init+0x330>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cea:	4a5a      	ldr	r2, [pc, #360]	; (8001e54 <HAL_GPIO_Init+0x334>)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d14:	d025      	beq.n	8001d62 <HAL_GPIO_Init+0x242>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4f      	ldr	r2, [pc, #316]	; (8001e58 <HAL_GPIO_Init+0x338>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01f      	beq.n	8001d5e <HAL_GPIO_Init+0x23e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <HAL_GPIO_Init+0x33c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d019      	beq.n	8001d5a <HAL_GPIO_Init+0x23a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4d      	ldr	r2, [pc, #308]	; (8001e60 <HAL_GPIO_Init+0x340>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d013      	beq.n	8001d56 <HAL_GPIO_Init+0x236>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4c      	ldr	r2, [pc, #304]	; (8001e64 <HAL_GPIO_Init+0x344>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00d      	beq.n	8001d52 <HAL_GPIO_Init+0x232>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4b      	ldr	r2, [pc, #300]	; (8001e68 <HAL_GPIO_Init+0x348>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d007      	beq.n	8001d4e <HAL_GPIO_Init+0x22e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4a      	ldr	r2, [pc, #296]	; (8001e6c <HAL_GPIO_Init+0x34c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d101      	bne.n	8001d4a <HAL_GPIO_Init+0x22a>
 8001d46:	2306      	movs	r3, #6
 8001d48:	e00c      	b.n	8001d64 <HAL_GPIO_Init+0x244>
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	e00a      	b.n	8001d64 <HAL_GPIO_Init+0x244>
 8001d4e:	2305      	movs	r3, #5
 8001d50:	e008      	b.n	8001d64 <HAL_GPIO_Init+0x244>
 8001d52:	2304      	movs	r3, #4
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x244>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e004      	b.n	8001d64 <HAL_GPIO_Init+0x244>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_Init+0x244>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_Init+0x244>
 8001d62:	2300      	movs	r3, #0
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	f002 0203 	and.w	r2, r2, #3
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4093      	lsls	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d74:	4937      	ldr	r1, [pc, #220]	; (8001e54 <HAL_GPIO_Init+0x334>)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_GPIO_Init+0x350>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da6:	4a32      	ldr	r2, [pc, #200]	; (8001e70 <HAL_GPIO_Init+0x350>)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001dac:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_GPIO_Init+0x350>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd0:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_GPIO_Init+0x350>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_GPIO_Init+0x350>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_GPIO_Init+0x350>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_GPIO_Init+0x350>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <HAL_GPIO_Init+0x350>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f47f ae78 	bne.w	8001b30 <HAL_GPIO_Init+0x10>
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000
 8001e58:	48000400 	.word	0x48000400
 8001e5c:	48000800 	.word	0x48000800
 8001e60:	48000c00 	.word	0x48000c00
 8001e64:	48001000 	.word	0x48001000
 8001e68:	48001400 	.word	0x48001400
 8001e6c:	48001800 	.word	0x48001800
 8001e70:	40010400 	.word	0x40010400

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	43d9      	mvns	r1, r3
 8001ec2:	887b      	ldrh	r3, [r7, #2]
 8001ec4:	400b      	ands	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f806 	bl	8001f08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e038      	b.n	8001fa2 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001f38:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f245 5255 	movw	r2, #21845	; 0x5555
 8001f42:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6852      	ldr	r2, [r2, #4]
 8001f4c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6892      	ldr	r2, [r2, #8]
 8001f56:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001f58:	f7ff fc46 	bl	80017e8 <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001f5e:	e008      	b.n	8001f72 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001f60:	f7ff fc42 	bl	80017e8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b30      	cmp	r3, #48	; 0x30
 8001f6c:	d901      	bls.n	8001f72 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e017      	b.n	8001fa2 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f1      	bne.n	8001f60 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d005      	beq.n	8001f96 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68d2      	ldr	r2, [r2, #12]
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	e004      	b.n	8001fa0 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001fba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40007000 	.word	0x40007000

08001fec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40007000 	.word	0x40007000

08002008 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002016:	d130      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002018:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002024:	d038      	beq.n	8002098 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002034:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2232      	movs	r2, #50	; 0x32
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	0c9b      	lsrs	r3, r3, #18
 8002048:	3301      	adds	r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800204c:	e002      	b.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3b01      	subs	r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002060:	d102      	bne.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f2      	bne.n	800204e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002074:	d110      	bne.n	8002098 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e00f      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002086:	d007      	beq.n	8002098 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002090:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002096:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40007000 	.word	0x40007000
 80020ac:	20000000 	.word	0x20000000
 80020b0:	431bde83 	.word	0x431bde83

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e3d4      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c6:	4ba1      	ldr	r3, [pc, #644]	; (800234c <HAL_RCC_OscConfig+0x298>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d0:	4b9e      	ldr	r3, [pc, #632]	; (800234c <HAL_RCC_OscConfig+0x298>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80e4 	beq.w	80022b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_RCC_OscConfig+0x4a>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	f040 808b 	bne.w	800220c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	f040 8087 	bne.w	800220c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020fe:	4b93      	ldr	r3, [pc, #588]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x62>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e3ac      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	4b8c      	ldr	r3, [pc, #560]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <HAL_RCC_OscConfig+0x7c>
 8002126:	4b89      	ldr	r3, [pc, #548]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212e:	e005      	b.n	800213c <HAL_RCC_OscConfig+0x88>
 8002130:	4b86      	ldr	r3, [pc, #536]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213c:	4293      	cmp	r3, r2
 800213e:	d223      	bcs.n	8002188 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fd41 	bl	8002bcc <RCC_SetFlashLatencyFromMSIRange>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e38d      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002154:	4b7d      	ldr	r3, [pc, #500]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a7c      	ldr	r2, [pc, #496]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b7a      	ldr	r3, [pc, #488]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4977      	ldr	r1, [pc, #476]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002172:	4b76      	ldr	r3, [pc, #472]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	4972      	ldr	r1, [pc, #456]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
 8002186:	e025      	b.n	80021d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002188:	4b70      	ldr	r3, [pc, #448]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6f      	ldr	r2, [pc, #444]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b6d      	ldr	r3, [pc, #436]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	496a      	ldr	r1, [pc, #424]	; (800234c <HAL_RCC_OscConfig+0x298>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a6:	4b69      	ldr	r3, [pc, #420]	; (800234c <HAL_RCC_OscConfig+0x298>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	4965      	ldr	r1, [pc, #404]	; (800234c <HAL_RCC_OscConfig+0x298>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fd01 	bl	8002bcc <RCC_SetFlashLatencyFromMSIRange>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e34d      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d4:	f000 fc36 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b5c      	ldr	r3, [pc, #368]	; (800234c <HAL_RCC_OscConfig+0x298>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	495a      	ldr	r1, [pc, #360]	; (8002350 <HAL_RCC_OscConfig+0x29c>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	4a58      	ldr	r2, [pc, #352]	; (8002354 <HAL_RCC_OscConfig+0x2a0>)
 80021f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021f4:	4b58      	ldr	r3, [pc, #352]	; (8002358 <HAL_RCC_OscConfig+0x2a4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff faa5 	bl	8001748 <HAL_InitTick>
 80021fe:	4603      	mov	r3, r0
 8002200:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d052      	beq.n	80022ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	e331      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d032      	beq.n	800227a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002214:	4b4d      	ldr	r3, [pc, #308]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a4c      	ldr	r2, [pc, #304]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002220:	f7ff fae2 	bl	80017e8 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002228:	f7ff fade 	bl	80017e8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e31a      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800223a:	4b44      	ldr	r3, [pc, #272]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a40      	ldr	r2, [pc, #256]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b3e      	ldr	r3, [pc, #248]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	493b      	ldr	r1, [pc, #236]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002264:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	4936      	ldr	r1, [pc, #216]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	e01a      	b.n	80022b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800227a:	4b34      	ldr	r3, [pc, #208]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a33      	ldr	r2, [pc, #204]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002286:	f7ff faaf 	bl	80017e8 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228e:	f7ff faab 	bl	80017e8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e2e7      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCC_OscConfig+0x298>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x1da>
 80022ac:	e000      	b.n	80022b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d074      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x21a>
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d10e      	bne.n	80022e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d10b      	bne.n	80022e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_RCC_OscConfig+0x298>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d064      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2f0>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d160      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e2c4      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x24a>
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCC_OscConfig+0x298>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a15      	ldr	r2, [pc, #84]	; (800234c <HAL_RCC_OscConfig+0x298>)
 80022f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	e01d      	b.n	800233a <HAL_RCC_OscConfig+0x286>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x26e>
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800230e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <HAL_RCC_OscConfig+0x298>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x286>
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a06      	ldr	r2, [pc, #24]	; (800234c <HAL_RCC_OscConfig+0x298>)
 8002334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01c      	beq.n	800237c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7ff fa51 	bl	80017e8 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002348:	e011      	b.n	800236e <HAL_RCC_OscConfig+0x2ba>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	08006534 	.word	0x08006534
 8002354:	20000000 	.word	0x20000000
 8002358:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff fa44 	bl	80017e8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e280      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236e:	4baf      	ldr	r3, [pc, #700]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x2a8>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff fa34 	bl	80017e8 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7ff fa30 	bl	80017e8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e26c      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002396:	4ba5      	ldr	r3, [pc, #660]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x2d0>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d060      	beq.n	8002474 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_OscConfig+0x310>
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d119      	bne.n	80023f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d116      	bne.n	80023f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c4:	4b99      	ldr	r3, [pc, #612]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_OscConfig+0x328>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e249      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023dc:	4b93      	ldr	r3, [pc, #588]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	4990      	ldr	r1, [pc, #576]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f0:	e040      	b.n	8002474 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d023      	beq.n	8002442 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fa:	4b8c      	ldr	r3, [pc, #560]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a8b      	ldr	r2, [pc, #556]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7ff f9ef 	bl	80017e8 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240e:	f7ff f9eb 	bl	80017e8 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e227      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002420:	4b82      	ldr	r3, [pc, #520]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b7f      	ldr	r3, [pc, #508]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	497c      	ldr	r1, [pc, #496]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
 8002440:	e018      	b.n	8002474 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b7a      	ldr	r3, [pc, #488]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a79      	ldr	r2, [pc, #484]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7ff f9cb 	bl	80017e8 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002456:	f7ff f9c7 	bl	80017e8 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e203      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002468:	4b70      	ldr	r3, [pc, #448]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d03c      	beq.n	80024fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248e:	4a67      	ldr	r2, [pc, #412]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002498:	f7ff f9a6 	bl	80017e8 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a0:	f7ff f9a2 	bl	80017e8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1de      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b2:	4b5e      	ldr	r3, [pc, #376]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80024b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ef      	beq.n	80024a0 <HAL_RCC_OscConfig+0x3ec>
 80024c0:	e01b      	b.n	80024fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c2:	4b5a      	ldr	r3, [pc, #360]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80024c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c8:	4a58      	ldr	r2, [pc, #352]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80024ca:	f023 0301 	bic.w	r3, r3, #1
 80024ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7ff f989 	bl	80017e8 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024da:	f7ff f985 	bl	80017e8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1c1      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ec:	4b4f      	ldr	r3, [pc, #316]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1ef      	bne.n	80024da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80a6 	beq.w	8002654 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800250c:	4b47      	ldr	r3, [pc, #284]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10d      	bne.n	8002534 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	4b44      	ldr	r3, [pc, #272]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	4a43      	ldr	r2, [pc, #268]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800251e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002522:	6593      	str	r3, [r2, #88]	; 0x58
 8002524:	4b41      	ldr	r3, [pc, #260]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002530:	2301      	movs	r3, #1
 8002532:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002534:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <HAL_RCC_OscConfig+0x57c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d118      	bne.n	8002572 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_OscConfig+0x57c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <HAL_RCC_OscConfig+0x57c>)
 8002546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254c:	f7ff f94c 	bl	80017e8 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002554:	f7ff f948 	bl	80017e8 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e184      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002566:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_RCC_OscConfig+0x57c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d108      	bne.n	800258c <HAL_RCC_OscConfig+0x4d8>
 800257a:	4b2c      	ldr	r3, [pc, #176]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	4a2a      	ldr	r2, [pc, #168]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800258a:	e024      	b.n	80025d6 <HAL_RCC_OscConfig+0x522>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d110      	bne.n	80025b6 <HAL_RCC_OscConfig+0x502>
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_RCC_OscConfig+0x578>)
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259a:	4a24      	ldr	r2, [pc, #144]	; (800262c <HAL_RCC_OscConfig+0x578>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a4:	4b21      	ldr	r3, [pc, #132]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025aa:	4a20      	ldr	r2, [pc, #128]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b4:	e00f      	b.n	80025d6 <HAL_RCC_OscConfig+0x522>
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	4a1b      	ldr	r2, [pc, #108]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025ce:	f023 0304 	bic.w	r3, r3, #4
 80025d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7ff f903 	bl	80017e8 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7ff f8ff 	bl	80017e8 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e139      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_OscConfig+0x578>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0ed      	beq.n	80025e6 <HAL_RCC_OscConfig+0x532>
 800260a:	e01a      	b.n	8002642 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff f8ec 	bl	80017e8 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002612:	e00f      	b.n	8002634 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7ff f8e8 	bl	80017e8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d906      	bls.n	8002634 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e122      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002634:	4b90      	ldr	r3, [pc, #576]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e8      	bne.n	8002614 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	4a8a      	ldr	r2, [pc, #552]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 800264e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002652:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8108 	beq.w	800286e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	2b02      	cmp	r3, #2
 8002664:	f040 80d0 	bne.w	8002808 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002668:	4b83      	ldr	r3, [pc, #524]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	429a      	cmp	r2, r3
 800267a:	d130      	bne.n	80026de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	3b01      	subs	r3, #1
 8002688:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d127      	bne.n	80026de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d11f      	bne.n	80026de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026a8:	2a07      	cmp	r2, #7
 80026aa:	bf14      	ite	ne
 80026ac:	2201      	movne	r2, #1
 80026ae:	2200      	moveq	r2, #0
 80026b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d113      	bne.n	80026de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	3b01      	subs	r3, #1
 80026c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d109      	bne.n	80026de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d06e      	beq.n	80027bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	d069      	beq.n	80027b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026e4:	4b64      	ldr	r3, [pc, #400]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b7      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002700:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5c      	ldr	r2, [pc, #368]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800270c:	f7ff f86c 	bl	80017e8 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7ff f868 	bl	80017e8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0a4      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002726:	4b54      	ldr	r3, [pc, #336]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002732:	4b51      	ldr	r3, [pc, #324]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	4b51      	ldr	r3, [pc, #324]	; (800287c <HAL_RCC_OscConfig+0x7c8>)
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002742:	3a01      	subs	r2, #1
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	4311      	orrs	r1, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800274c:	0212      	lsls	r2, r2, #8
 800274e:	4311      	orrs	r1, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002754:	0852      	lsrs	r2, r2, #1
 8002756:	3a01      	subs	r2, #1
 8002758:	0552      	lsls	r2, r2, #21
 800275a:	4311      	orrs	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002760:	0852      	lsrs	r2, r2, #1
 8002762:	3a01      	subs	r2, #1
 8002764:	0652      	lsls	r2, r2, #25
 8002766:	4311      	orrs	r1, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800276c:	0912      	lsrs	r2, r2, #4
 800276e:	0452      	lsls	r2, r2, #17
 8002770:	430a      	orrs	r2, r1
 8002772:	4941      	ldr	r1, [pc, #260]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002778:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3e      	ldr	r2, [pc, #248]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002782:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002784:	4b3c      	ldr	r3, [pc, #240]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a3b      	ldr	r2, [pc, #236]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 800278a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002790:	f7ff f82a 	bl	80017e8 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7ff f826 	bl	80017e8 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e062      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	4b33      	ldr	r3, [pc, #204]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b6:	e05a      	b.n	800286e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e059      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d152      	bne.n	800286e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 80027ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 80027da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027e0:	f7ff f802 	bl	80017e8 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fffe 	bl	80017e8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e03a      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fa:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x734>
 8002806:	e032      	b.n	800286e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d02d      	beq.n	800286a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a19      	ldr	r2, [pc, #100]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002818:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	4a13      	ldr	r2, [pc, #76]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 800282c:	f023 0303 	bic.w	r3, r3, #3
 8002830:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a10      	ldr	r2, [pc, #64]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 8002838:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800283c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002840:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7fe ffd1 	bl	80017e8 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe ffcd 	bl	80017e8 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e009      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_OscConfig+0x7c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x796>
 8002868:	e001      	b.n	800286e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	f99d808c 	.word	0xf99d808c

08002880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0c8      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002894:	4b66      	ldr	r3, [pc, #408]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d910      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0207 	bic.w	r2, r3, #7
 80028aa:	4961      	ldr	r1, [pc, #388]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b5f      	ldr	r3, [pc, #380]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0b0      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d04c      	beq.n	800296a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d8:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d121      	bne.n	8002928 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e09e      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f0:	4b50      	ldr	r3, [pc, #320]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d115      	bne.n	8002928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e092      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002908:	4b4a      	ldr	r3, [pc, #296]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e086      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002918:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e07e      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002928:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 0203 	bic.w	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	493f      	ldr	r1, [pc, #252]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800293a:	f7fe ff55 	bl	80017e8 <HAL_GetTick>
 800293e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002940:	e00a      	b.n	8002958 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002942:	f7fe ff51 	bl	80017e8 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e066      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002958:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 020c 	and.w	r2, r3, #12
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	429a      	cmp	r2, r3
 8002968:	d1eb      	bne.n	8002942 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002976:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	492c      	ldr	r1, [pc, #176]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d210      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	4924      	ldr	r1, [pc, #144]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_RCC_ClockConfig+0x1b0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e036      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4918      	ldr	r1, [pc, #96]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4910      	ldr	r1, [pc, #64]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f6:	f000 f825 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCC_ClockConfig+0x1b4>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	490c      	ldr	r1, [pc, #48]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fe94 	bl	8001748 <HAL_InitTick>
 8002a20:	4603      	mov	r3, r0
 8002a22:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a24:	7afb      	ldrb	r3, [r7, #11]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08006534 	.word	0x08006534
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a52:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d121      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d11e      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a84:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e005      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a94:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	e004      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ac8:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d134      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0xa6>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d003      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ae8:	e005      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aec:	617b      	str	r3, [r7, #20]
      break;
 8002aee:	e005      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002af2:	617b      	str	r3, [r7, #20]
      break;
 8002af4:	e002      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	617b      	str	r3, [r7, #20]
      break;
 8002afa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	3301      	adds	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	fb02 f203 	mul.w	r2, r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	0e5b      	lsrs	r3, r3, #25
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	0800654c 	.word	0x0800654c
 8002b54:	00f42400 	.word	0x00f42400
 8002b58:	007a1200 	.word	0x007a1200

08002b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000000 	.word	0x20000000

08002b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b78:	f7ff fff0 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4904      	ldr	r1, [pc, #16]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08006544 	.word	0x08006544

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ba4:	f7ff ffda 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0adb      	lsrs	r3, r3, #11
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08006544 	.word	0x08006544

08002bcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bd8:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002be4:	f7ff fa02 	bl	8001fec <HAL_PWREx_GetVoltageRange>
 8002be8:	6178      	str	r0, [r7, #20]
 8002bea:	e014      	b.n	8002c16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf8:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c04:	f7ff f9f2 	bl	8001fec <HAL_PWREx_GetVoltageRange>
 8002c08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1c:	d10b      	bne.n	8002c36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b80      	cmp	r3, #128	; 0x80
 8002c22:	d919      	bls.n	8002c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2ba0      	cmp	r3, #160	; 0xa0
 8002c28:	d902      	bls.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	e013      	b.n	8002c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c30:	2301      	movs	r3, #1
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	e010      	b.n	8002c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d902      	bls.n	8002c42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	e00a      	b.n	8002c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b80      	cmp	r3, #128	; 0x80
 8002c46:	d102      	bne.n	8002c4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c48:	2302      	movs	r3, #2
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	e004      	b.n	8002c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b70      	cmp	r3, #112	; 0x70
 8002c52:	d101      	bne.n	8002c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c54:	2301      	movs	r3, #1
 8002c56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f023 0207 	bic.w	r2, r3, #7
 8002c60:	4909      	ldr	r1, [pc, #36]	; (8002c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d001      	beq.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40022000 	.word	0x40022000

08002c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c94:	2300      	movs	r3, #0
 8002c96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c98:	2300      	movs	r3, #0
 8002c9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d041      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cb0:	d02a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cb6:	d824      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc2:	d81e      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cce:	e018      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cd0:	4b86      	ldr	r3, [pc, #536]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4a85      	ldr	r2, [pc, #532]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cdc:	e015      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 facb 	bl	8003280 <RCCEx_PLLSAI1_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cee:	e00c      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3320      	adds	r3, #32
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fbb6 	bl	8003468 <RCCEx_PLLSAI2_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d00:	e003      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	74fb      	strb	r3, [r7, #19]
      break;
 8002d06:	e000      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d10:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d1e:	4973      	ldr	r1, [pc, #460]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d26:	e001      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d041      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d40:	d02a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d46:	d824      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d4c:	d008      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d52:	d81e      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d5c:	d010      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d5e:	e018      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a61      	ldr	r2, [pc, #388]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d6c:	e015      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fa83 	bl	8003280 <RCCEx_PLLSAI1_Config>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d7e:	e00c      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3320      	adds	r3, #32
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fb6e 	bl	8003468 <RCCEx_PLLSAI2_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d90:	e003      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	74fb      	strb	r3, [r7, #19]
      break;
 8002d96:	e000      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002da0:	4b52      	ldr	r3, [pc, #328]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dae:	494f      	ldr	r1, [pc, #316]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002db6:	e001      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a0 	beq.w	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de4:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	4a40      	ldr	r2, [pc, #256]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dee:	6593      	str	r3, [r2, #88]	; 0x58
 8002df0:	4b3e      	ldr	r3, [pc, #248]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e00:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fcec 	bl	80017e8 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e12:	e009      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fe fce8 	bl	80017e8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	74fb      	strb	r3, [r7, #19]
        break;
 8002e26:	e005      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e28:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d15c      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e3a:	4b2c      	ldr	r3, [pc, #176]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01f      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d019      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e64:	4b21      	ldr	r3, [pc, #132]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	4a20      	ldr	r2, [pc, #128]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e74:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fe fca7 	bl	80017e8 <HAL_GetTick>
 8002e9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e9c:	e00b      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fe fca3 	bl	80017e8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d902      	bls.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	74fb      	strb	r3, [r7, #19]
            break;
 8002eb4:	e006      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0ec      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eda:	4904      	ldr	r1, [pc, #16]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ee2:	e009      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	74bb      	strb	r3, [r7, #18]
 8002ee8:	e006      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef8:	7c7b      	ldrb	r3, [r7, #17]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d105      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efe:	4b9e      	ldr	r3, [pc, #632]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	4a9d      	ldr	r2, [pc, #628]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f16:	4b98      	ldr	r3, [pc, #608]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f023 0203 	bic.w	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	4994      	ldr	r1, [pc, #592]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f38:	4b8f      	ldr	r3, [pc, #572]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f023 020c 	bic.w	r2, r3, #12
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f46:	498c      	ldr	r1, [pc, #560]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f5a:	4b87      	ldr	r3, [pc, #540]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	4983      	ldr	r1, [pc, #524]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f7c:	4b7e      	ldr	r3, [pc, #504]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	497b      	ldr	r1, [pc, #492]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	4972      	ldr	r1, [pc, #456]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fc0:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	496a      	ldr	r1, [pc, #424]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fe2:	4b65      	ldr	r3, [pc, #404]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	4961      	ldr	r1, [pc, #388]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003004:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003012:	4959      	ldr	r1, [pc, #356]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003026:	4b54      	ldr	r3, [pc, #336]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003034:	4950      	ldr	r1, [pc, #320]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003048:	4b4b      	ldr	r3, [pc, #300]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	4948      	ldr	r1, [pc, #288]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800306a:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	493f      	ldr	r1, [pc, #252]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d028      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800308c:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309a:	4937      	ldr	r1, [pc, #220]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030aa:	d106      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ac:	4b32      	ldr	r3, [pc, #200]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a31      	ldr	r2, [pc, #196]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030b6:	60d3      	str	r3, [r2, #12]
 80030b8:	e011      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030c2:	d10c      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3304      	adds	r3, #4
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f8d8 	bl	8003280 <RCCEx_PLLSAI1_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d028      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030ea:	4b23      	ldr	r3, [pc, #140]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	491f      	ldr	r1, [pc, #124]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003108:	d106      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	4a1a      	ldr	r2, [pc, #104]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003114:	60d3      	str	r3, [r2, #12]
 8003116:	e011      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003120:	d10c      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f8a9 	bl	8003280 <RCCEx_PLLSAI1_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d02b      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003156:	4908      	ldr	r1, [pc, #32]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003166:	d109      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a02      	ldr	r2, [pc, #8]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003172:	60d3      	str	r3, [r2, #12]
 8003174:	e014      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f877 	bl	8003280 <RCCEx_PLLSAI1_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003196:	7cfb      	ldrb	r3, [r7, #19]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d02f      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ba:	4928      	ldr	r1, [pc, #160]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031ca:	d10d      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3304      	adds	r3, #4
 80031d0:	2102      	movs	r1, #2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f854 	bl	8003280 <RCCEx_PLLSAI1_Config>
 80031d8:	4603      	mov	r3, r0
 80031da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d014      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031e2:	7cfb      	ldrb	r3, [r7, #19]
 80031e4:	74bb      	strb	r3, [r7, #18]
 80031e6:	e011      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f0:	d10c      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3320      	adds	r3, #32
 80031f6:	2102      	movs	r1, #2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f935 	bl	8003468 <RCCEx_PLLSAI2_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003202:	7cfb      	ldrb	r3, [r7, #19]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003226:	490d      	ldr	r1, [pc, #52]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00b      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324a:	4904      	ldr	r1, [pc, #16]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003252:	7cbb      	ldrb	r3, [r7, #18]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a04      	ldr	r2, [pc, #16]	; (800327c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	6013      	str	r3, [r2, #0]
}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000

08003280 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800328e:	4b75      	ldr	r3, [pc, #468]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d018      	beq.n	80032cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800329a:	4b72      	ldr	r3, [pc, #456]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0203 	and.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d10d      	bne.n	80032c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
       ||
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032b2:	4b6c      	ldr	r3, [pc, #432]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
       ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d047      	beq.n	8003356 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
 80032ca:	e044      	b.n	8003356 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d018      	beq.n	8003306 <RCCEx_PLLSAI1_Config+0x86>
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d825      	bhi.n	8003324 <RCCEx_PLLSAI1_Config+0xa4>
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d002      	beq.n	80032e2 <RCCEx_PLLSAI1_Config+0x62>
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d009      	beq.n	80032f4 <RCCEx_PLLSAI1_Config+0x74>
 80032e0:	e020      	b.n	8003324 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032e2:	4b60      	ldr	r3, [pc, #384]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d11d      	bne.n	800332a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f2:	e01a      	b.n	800332a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032f4:	4b5b      	ldr	r3, [pc, #364]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d116      	bne.n	800332e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003304:	e013      	b.n	800332e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003306:	4b57      	ldr	r3, [pc, #348]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003312:	4b54      	ldr	r3, [pc, #336]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003322:	e006      	b.n	8003332 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      break;
 8003328:	e004      	b.n	8003334 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800332a:	bf00      	nop
 800332c:	e002      	b.n	8003334 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003332:	bf00      	nop
    }

    if(status == HAL_OK)
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10d      	bne.n	8003356 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800333a:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6819      	ldr	r1, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	430b      	orrs	r3, r1
 8003350:	4944      	ldr	r1, [pc, #272]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d17d      	bne.n	8003458 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800335c:	4b41      	ldr	r3, [pc, #260]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a40      	ldr	r2, [pc, #256]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003362:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003368:	f7fe fa3e 	bl	80017e8 <HAL_GetTick>
 800336c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800336e:	e009      	b.n	8003384 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003370:	f7fe fa3a 	bl	80017e8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d902      	bls.n	8003384 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	73fb      	strb	r3, [r7, #15]
        break;
 8003382:	e005      	b.n	8003390 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003384:	4b37      	ldr	r3, [pc, #220]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ef      	bne.n	8003370 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d160      	bne.n	8003458 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d111      	bne.n	80033c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800339c:	4b31      	ldr	r3, [pc, #196]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6892      	ldr	r2, [r2, #8]
 80033ac:	0211      	lsls	r1, r2, #8
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68d2      	ldr	r2, [r2, #12]
 80033b2:	0912      	lsrs	r2, r2, #4
 80033b4:	0452      	lsls	r2, r2, #17
 80033b6:	430a      	orrs	r2, r1
 80033b8:	492a      	ldr	r1, [pc, #168]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	610b      	str	r3, [r1, #16]
 80033be:	e027      	b.n	8003410 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d112      	bne.n	80033ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6892      	ldr	r2, [r2, #8]
 80033d6:	0211      	lsls	r1, r2, #8
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6912      	ldr	r2, [r2, #16]
 80033dc:	0852      	lsrs	r2, r2, #1
 80033de:	3a01      	subs	r2, #1
 80033e0:	0552      	lsls	r2, r2, #21
 80033e2:	430a      	orrs	r2, r1
 80033e4:	491f      	ldr	r1, [pc, #124]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	610b      	str	r3, [r1, #16]
 80033ea:	e011      	b.n	8003410 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6892      	ldr	r2, [r2, #8]
 80033fc:	0211      	lsls	r1, r2, #8
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6952      	ldr	r2, [r2, #20]
 8003402:	0852      	lsrs	r2, r2, #1
 8003404:	3a01      	subs	r2, #1
 8003406:	0652      	lsls	r2, r2, #25
 8003408:	430a      	orrs	r2, r1
 800340a:	4916      	ldr	r1, [pc, #88]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a13      	ldr	r2, [pc, #76]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800341a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fe f9e4 	bl	80017e8 <HAL_GetTick>
 8003420:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003422:	e009      	b.n	8003438 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003424:	f7fe f9e0 	bl	80017e8 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d902      	bls.n	8003438 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	73fb      	strb	r3, [r7, #15]
          break;
 8003436:	e005      	b.n	8003444 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ef      	beq.n	8003424 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	4904      	ldr	r1, [pc, #16]	; (8003464 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000

08003468 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003476:	4b6a      	ldr	r3, [pc, #424]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d018      	beq.n	80034b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003482:	4b67      	ldr	r3, [pc, #412]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0203 	and.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d10d      	bne.n	80034ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
       ||
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800349a:	4b61      	ldr	r3, [pc, #388]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
       ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d047      	beq.n	800353e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	e044      	b.n	800353e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d018      	beq.n	80034ee <RCCEx_PLLSAI2_Config+0x86>
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d825      	bhi.n	800350c <RCCEx_PLLSAI2_Config+0xa4>
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <RCCEx_PLLSAI2_Config+0x62>
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d009      	beq.n	80034dc <RCCEx_PLLSAI2_Config+0x74>
 80034c8:	e020      	b.n	800350c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ca:	4b55      	ldr	r3, [pc, #340]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d11d      	bne.n	8003512 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034da:	e01a      	b.n	8003512 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d116      	bne.n	8003516 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ec:	e013      	b.n	8003516 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ee:	4b4c      	ldr	r3, [pc, #304]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10f      	bne.n	800351a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034fa:	4b49      	ldr	r3, [pc, #292]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800350a:	e006      	b.n	800351a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	e004      	b.n	800351c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003512:	bf00      	nop
 8003514:	e002      	b.n	800351c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003516:	bf00      	nop
 8003518:	e000      	b.n	800351c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800351a:	bf00      	nop
    }

    if(status == HAL_OK)
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10d      	bne.n	800353e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003522:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	430b      	orrs	r3, r1
 8003538:	4939      	ldr	r1, [pc, #228]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353a:	4313      	orrs	r3, r2
 800353c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d167      	bne.n	8003614 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003544:	4b36      	ldr	r3, [pc, #216]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a35      	ldr	r2, [pc, #212]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003550:	f7fe f94a 	bl	80017e8 <HAL_GetTick>
 8003554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003556:	e009      	b.n	800356c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003558:	f7fe f946 	bl	80017e8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d902      	bls.n	800356c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	73fb      	strb	r3, [r7, #15]
        break;
 800356a:	e005      	b.n	8003578 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800356c:	4b2c      	ldr	r3, [pc, #176]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ef      	bne.n	8003558 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d14a      	bne.n	8003614 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003584:	4b26      	ldr	r3, [pc, #152]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6892      	ldr	r2, [r2, #8]
 8003594:	0211      	lsls	r1, r2, #8
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68d2      	ldr	r2, [r2, #12]
 800359a:	0912      	lsrs	r2, r2, #4
 800359c:	0452      	lsls	r2, r2, #17
 800359e:	430a      	orrs	r2, r1
 80035a0:	491f      	ldr	r1, [pc, #124]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	614b      	str	r3, [r1, #20]
 80035a6:	e011      	b.n	80035cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035a8:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6892      	ldr	r2, [r2, #8]
 80035b8:	0211      	lsls	r1, r2, #8
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6912      	ldr	r2, [r2, #16]
 80035be:	0852      	lsrs	r2, r2, #1
 80035c0:	3a01      	subs	r2, #1
 80035c2:	0652      	lsls	r2, r2, #25
 80035c4:	430a      	orrs	r2, r1
 80035c6:	4916      	ldr	r1, [pc, #88]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035cc:	4b14      	ldr	r3, [pc, #80]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe f906 	bl	80017e8 <HAL_GetTick>
 80035dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035de:	e009      	b.n	80035f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035e0:	f7fe f902 	bl	80017e8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d902      	bls.n	80035f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	73fb      	strb	r3, [r7, #15]
          break;
 80035f2:	e005      	b.n	8003600 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ef      	beq.n	80035e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4904      	ldr	r1, [pc, #16]	; (8003620 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003610:	4313      	orrs	r3, r2
 8003612:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000

08003624 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d06c      	beq.n	8003710 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fe5e 	bl	800130c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	22ca      	movs	r2, #202	; 0xca
 800365e:	625a      	str	r2, [r3, #36]	; 0x24
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2253      	movs	r2, #83	; 0x53
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fb76 	bl	8003d5a <RTC_EnterInitMode>
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d14b      	bne.n	8003710 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800368a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68d2      	ldr	r2, [r2, #12]
 80036b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6919      	ldr	r1, [r3, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	041a      	lsls	r2, r3, #16
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fb79 	bl	8003dc0 <RTC_ExitInitMode>
 80036ce:	4603      	mov	r3, r0
 80036d0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d11b      	bne.n	8003710 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0203 	bic.w	r2, r2, #3
 80036e6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	22ff      	movs	r2, #255	; 0xff
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800371a:	b590      	push	{r4, r7, lr}
 800371c:	b087      	sub	sp, #28
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_RTC_SetTime+0x1a>
 8003730:	2302      	movs	r3, #2
 8003732:	e08b      	b.n	800384c <HAL_RTC_SetTime+0x132>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	22ca      	movs	r2, #202	; 0xca
 800374a:	625a      	str	r2, [r3, #36]	; 0x24
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2253      	movs	r2, #83	; 0x53
 8003752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fb00 	bl	8003d5a <RTC_EnterInitMode>
 800375a:	4603      	mov	r3, r0
 800375c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d163      	bne.n	800382c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d126      	bne.n	80037b8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2200      	movs	r2, #0
 800377c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fb5a 	bl	8003e3c <RTC_ByteToBcd2>
 8003788:	4603      	mov	r3, r0
 800378a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fb53 	bl	8003e3c <RTC_ByteToBcd2>
 8003796:	4603      	mov	r3, r0
 8003798:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800379a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	789b      	ldrb	r3, [r3, #2]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fb4b 	bl	8003e3c <RTC_ByteToBcd2>
 80037a6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037a8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	78db      	ldrb	r3, [r3, #3]
 80037b0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e018      	b.n	80037ea <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	785b      	ldrb	r3, [r3, #1]
 80037d6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037d8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037de:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	78db      	ldrb	r3, [r3, #3]
 80037e4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037f8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003808:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6899      	ldr	r1, [r3, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	431a      	orrs	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 facc 	bl	8003dc0 <RTC_ExitInitMode>
 8003828:	4603      	mov	r3, r0
 800382a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	22ff      	movs	r2, #255	; 0xff
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800384a:	7cfb      	ldrb	r3, [r7, #19]
}
 800384c:	4618      	mov	r0, r3
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd90      	pop	{r4, r7, pc}

08003854 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003882:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003886:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	0c1b      	lsrs	r3, r3, #16
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	0d9b      	lsrs	r3, r3, #22
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d11a      	bne.n	8003902 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fad3 	bl	8003e7c <RTC_Bcd2ToByte>
 80038d6:	4603      	mov	r3, r0
 80038d8:	461a      	mov	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	785b      	ldrb	r3, [r3, #1]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 faca 	bl	8003e7c <RTC_Bcd2ToByte>
 80038e8:	4603      	mov	r3, r0
 80038ea:	461a      	mov	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	789b      	ldrb	r3, [r3, #2]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fac1 	bl	8003e7c <RTC_Bcd2ToByte>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_RTC_SetDate+0x1a>
 8003922:	2302      	movs	r3, #2
 8003924:	e075      	b.n	8003a12 <HAL_RTC_SetDate+0x106>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10e      	bne.n	800395a <HAL_RTC_SetDate+0x4e>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	785b      	ldrb	r3, [r3, #1]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	785b      	ldrb	r3, [r3, #1]
 800394c:	f023 0310 	bic.w	r3, r3, #16
 8003950:	b2db      	uxtb	r3, r3
 8003952:	330a      	adds	r3, #10
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11c      	bne.n	800399a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	78db      	ldrb	r3, [r3, #3]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fa69 	bl	8003e3c <RTC_ByteToBcd2>
 800396a:	4603      	mov	r3, r0
 800396c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	785b      	ldrb	r3, [r3, #1]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fa62 	bl	8003e3c <RTC_ByteToBcd2>
 8003978:	4603      	mov	r3, r0
 800397a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800397c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	789b      	ldrb	r3, [r3, #2]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fa5a 	bl	8003e3c <RTC_ByteToBcd2>
 8003988:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800398a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e00e      	b.n	80039b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	78db      	ldrb	r3, [r3, #3]
 800399e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	785b      	ldrb	r3, [r3, #1]
 80039a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	22ca      	movs	r2, #202	; 0xca
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2253      	movs	r2, #83	; 0x53
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f9c6 	bl	8003d5a <RTC_EnterInitMode>
 80039ce:	4603      	mov	r3, r0
 80039d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10c      	bne.n	80039f2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039e6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f9e9 	bl	8003dc0 <RTC_ExitInitMode>
 80039ee:	4603      	mov	r3, r0
 80039f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	22ff      	movs	r2, #255	; 0xff
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d103      	bne.n	8003a08 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd90      	pop	{r4, r7, pc}

08003a1a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a34:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	0b5b      	lsrs	r3, r3, #13
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11a      	bne.n	8003aaa <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	78db      	ldrb	r3, [r3, #3]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 f9ff 	bl	8003e7c <RTC_Bcd2ToByte>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f9f6 	bl	8003e7c <RTC_Bcd2ToByte>
 8003a90:	4603      	mov	r3, r0
 8003a92:	461a      	mov	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	789b      	ldrb	r3, [r3, #2]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f9ed 	bl	8003e7c <RTC_Bcd2ToByte>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_RTC_SetAlarm+0x1a>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e11b      	b.n	8003d06 <HAL_RTC_SetAlarm+0x252>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d137      	bne.n	8003b54 <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2200      	movs	r2, #0
 8003af6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 f99d 	bl	8003e3c <RTC_ByteToBcd2>
 8003b02:	4603      	mov	r3, r0
 8003b04:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f996 	bl	8003e3c <RTC_ByteToBcd2>
 8003b10:	4603      	mov	r3, r0
 8003b12:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b14:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	789b      	ldrb	r3, [r3, #2]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f98e 	bl	8003e3c <RTC_ByteToBcd2>
 8003b20:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b22:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	78db      	ldrb	r3, [r3, #3]
 8003b2a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b2c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f980 	bl	8003e3c <RTC_ByteToBcd2>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b40:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b48:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e023      	b.n	8003b9c <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2200      	movs	r2, #0
 8003b66:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b74:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b7a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	78db      	ldrb	r3, [r3, #3]
 8003b80:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b82:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b8a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b8c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b92:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	22ca      	movs	r2, #202	; 0xca
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2253      	movs	r2, #83	; 0x53
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc0:	d14a      	bne.n	8003c58 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bd0:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003be2:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bf2:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003bf4:	f7fd fdf8 	bl	80017e8 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003bfa:	e015      	b.n	8003c28 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bfc:	f7fd fdf4 	bl	80017e8 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c0a:	d90d      	bls.n	8003c28 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	22ff      	movs	r2, #255	; 0xff
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2203      	movs	r2, #3
 8003c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e06e      	b.n	8003d06 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0e2      	beq.n	8003bfc <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	e049      	b.n	8003cec <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c66:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003c78:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c88:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003c8a:	f7fd fdad 	bl	80017e8 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c90:	e015      	b.n	8003cbe <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c92:	f7fd fda9 	bl	80017e8 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ca0:	d90d      	bls.n	8003cbe <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	22ff      	movs	r2, #255	; 0xff
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2203      	movs	r2, #3
 8003cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e023      	b.n	8003d06 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0e2      	beq.n	8003c92 <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cea:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	22ff      	movs	r2, #255	; 0xff
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3724      	adds	r7, #36	; 0x24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd90      	pop	{r4, r7, pc}

08003d0e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d24:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003d26:	f7fd fd5f 	bl	80017e8 <HAL_GetTick>
 8003d2a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d2c:	e009      	b.n	8003d42 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d2e:	f7fd fd5b 	bl	80017e8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d3c:	d901      	bls.n	8003d42 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e007      	b.n	8003d52 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ee      	beq.n	8003d2e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d120      	bne.n	8003db6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003d7e:	f7fd fd33 	bl	80017e8 <HAL_GetTick>
 8003d82:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d84:	e00d      	b.n	8003da2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003d86:	f7fd fd2f 	bl	80017e8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d94:	d905      	bls.n	8003da2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <RTC_EnterInitMode+0x5c>
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d1e7      	bne.n	8003d86 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <RTC_ExitInitMode+0x78>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <RTC_ExitInitMode+0x78>)
 8003dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003dd8:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <RTC_ExitInitMode+0x78>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10c      	bne.n	8003dfe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff92 	bl	8003d0e <HAL_RTC_WaitForSynchro>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01e      	beq.n	8003e2e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2203      	movs	r2, #3
 8003df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	73fb      	strb	r3, [r7, #15]
 8003dfc:	e017      	b.n	8003e2e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <RTC_ExitInitMode+0x78>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <RTC_ExitInitMode+0x78>)
 8003e04:	f023 0320 	bic.w	r3, r3, #32
 8003e08:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ff7f 	bl	8003d0e <HAL_RTC_WaitForSynchro>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <RTC_ExitInitMode+0x78>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <RTC_ExitInitMode+0x78>)
 8003e28:	f043 0320 	orr.w	r3, r3, #32
 8003e2c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40002800 	.word	0x40002800

08003e3c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003e4e:	e005      	b.n	8003e5c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003e56:	7afb      	ldrb	r3, [r7, #11]
 8003e58:	3b0a      	subs	r3, #10
 8003e5a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003e5c:	7afb      	ldrb	r3, [r7, #11]
 8003e5e:	2b09      	cmp	r3, #9
 8003e60:	d8f6      	bhi.n	8003e50 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b2db      	uxtb	r3, r3
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	0092      	lsls	r2, r2, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	b2db      	uxtb	r3, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e049      	b.n	8003f56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd fa4a 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f000 fab4 	bl	800445c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d001      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e04f      	b.n	8004018 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a23      	ldr	r2, [pc, #140]	; (8004024 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d01d      	beq.n	8003fd6 <HAL_TIM_Base_Start_IT+0x76>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d018      	beq.n	8003fd6 <HAL_TIM_Base_Start_IT+0x76>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_TIM_Base_Start_IT+0xc8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <HAL_TIM_Base_Start_IT+0x76>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1e      	ldr	r2, [pc, #120]	; (800402c <HAL_TIM_Base_Start_IT+0xcc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_TIM_Base_Start_IT+0x76>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d009      	beq.n	8003fd6 <HAL_TIM_Base_Start_IT+0x76>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1b      	ldr	r2, [pc, #108]	; (8004034 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_TIM_Base_Start_IT+0x76>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d115      	bne.n	8004002 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <HAL_TIM_Base_Start_IT+0xdc>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b06      	cmp	r3, #6
 8003fe6:	d015      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0xb4>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fee:	d011      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	e008      	b.n	8004014 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e000      	b.n	8004016 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800
 8004030:	40000c00 	.word	0x40000c00
 8004034:	40013400 	.word	0x40013400
 8004038:	40014000 	.word	0x40014000
 800403c:	00010007 	.word	0x00010007

08004040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b02      	cmp	r3, #2
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0202 	mvn.w	r2, #2
 800406c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9cb 	bl	800441e <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f9bd 	bl	800440a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f9ce 	bl	8004432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0204 	mvn.w	r2, #4
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9a1 	bl	800441e <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f993 	bl	800440a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f9a4 	bl	8004432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d122      	bne.n	8004144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b08      	cmp	r3, #8
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0208 	mvn.w	r2, #8
 8004114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2204      	movs	r2, #4
 800411a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f977 	bl	800441e <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f969 	bl	800440a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f97a 	bl	8004432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b10      	cmp	r3, #16
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0210 	mvn.w	r2, #16
 8004168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2208      	movs	r2, #8
 800416e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f94d 	bl	800441e <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f93f 	bl	800440a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f950 	bl	8004432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0201 	mvn.w	r2, #1
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc faea 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fafc 	bl	80047e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d10e      	bne.n	800421e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 faef 	bl	80047fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d10e      	bne.n	800424a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d107      	bne.n	800424a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f8fe 	bl	8004446 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b20      	cmp	r3, #32
 8004256:	d10e      	bne.n	8004276 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b20      	cmp	r3, #32
 8004264:	d107      	bne.n	8004276 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f06f 0220 	mvn.w	r2, #32
 800426e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 faaf 	bl	80047d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_TIM_ConfigClockSource+0x18>
 8004292:	2302      	movs	r3, #2
 8004294:	e0b5      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x184>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	d03e      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0xd4>
 80042d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d8:	f200 8087 	bhi.w	80043ea <HAL_TIM_ConfigClockSource+0x16c>
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	f000 8085 	beq.w	80043ee <HAL_TIM_ConfigClockSource+0x170>
 80042e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e8:	d87f      	bhi.n	80043ea <HAL_TIM_ConfigClockSource+0x16c>
 80042ea:	2b70      	cmp	r3, #112	; 0x70
 80042ec:	d01a      	beq.n	8004324 <HAL_TIM_ConfigClockSource+0xa6>
 80042ee:	2b70      	cmp	r3, #112	; 0x70
 80042f0:	d87b      	bhi.n	80043ea <HAL_TIM_ConfigClockSource+0x16c>
 80042f2:	2b60      	cmp	r3, #96	; 0x60
 80042f4:	d050      	beq.n	8004398 <HAL_TIM_ConfigClockSource+0x11a>
 80042f6:	2b60      	cmp	r3, #96	; 0x60
 80042f8:	d877      	bhi.n	80043ea <HAL_TIM_ConfigClockSource+0x16c>
 80042fa:	2b50      	cmp	r3, #80	; 0x50
 80042fc:	d03c      	beq.n	8004378 <HAL_TIM_ConfigClockSource+0xfa>
 80042fe:	2b50      	cmp	r3, #80	; 0x50
 8004300:	d873      	bhi.n	80043ea <HAL_TIM_ConfigClockSource+0x16c>
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d058      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0x13a>
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d86f      	bhi.n	80043ea <HAL_TIM_ConfigClockSource+0x16c>
 800430a:	2b30      	cmp	r3, #48	; 0x30
 800430c:	d064      	beq.n	80043d8 <HAL_TIM_ConfigClockSource+0x15a>
 800430e:	2b30      	cmp	r3, #48	; 0x30
 8004310:	d86b      	bhi.n	80043ea <HAL_TIM_ConfigClockSource+0x16c>
 8004312:	2b20      	cmp	r3, #32
 8004314:	d060      	beq.n	80043d8 <HAL_TIM_ConfigClockSource+0x15a>
 8004316:	2b20      	cmp	r3, #32
 8004318:	d867      	bhi.n	80043ea <HAL_TIM_ConfigClockSource+0x16c>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d05c      	beq.n	80043d8 <HAL_TIM_ConfigClockSource+0x15a>
 800431e:	2b10      	cmp	r3, #16
 8004320:	d05a      	beq.n	80043d8 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004322:	e062      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6899      	ldr	r1, [r3, #8]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f000 f9a6 	bl	8004684 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004346:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	609a      	str	r2, [r3, #8]
      break;
 8004350:	e04e      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f000 f98f 	bl	8004684 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004374:	609a      	str	r2, [r3, #8]
      break;
 8004376:	e03b      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	461a      	mov	r2, r3
 8004386:	f000 f903 	bl	8004590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2150      	movs	r1, #80	; 0x50
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f95c 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 8004396:	e02b      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	461a      	mov	r2, r3
 80043a6:	f000 f922 	bl	80045ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2160      	movs	r1, #96	; 0x60
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f94c 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 80043b6:	e01b      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	461a      	mov	r2, r3
 80043c6:	f000 f8e3 	bl	8004590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2140      	movs	r1, #64	; 0x40
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f93c 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 80043d6:	e00b      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f000 f933 	bl	800464e <TIM_ITRx_SetConfig>
        break;
 80043e8:	e002      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80043ea:	bf00      	nop
 80043ec:	e000      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80043ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a40      	ldr	r2, [pc, #256]	; (8004570 <TIM_Base_SetConfig+0x114>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447a:	d00f      	beq.n	800449c <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3d      	ldr	r2, [pc, #244]	; (8004574 <TIM_Base_SetConfig+0x118>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00b      	beq.n	800449c <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a3c      	ldr	r2, [pc, #240]	; (8004578 <TIM_Base_SetConfig+0x11c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d007      	beq.n	800449c <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a3b      	ldr	r2, [pc, #236]	; (800457c <TIM_Base_SetConfig+0x120>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d003      	beq.n	800449c <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3a      	ldr	r2, [pc, #232]	; (8004580 <TIM_Base_SetConfig+0x124>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d108      	bne.n	80044ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2f      	ldr	r2, [pc, #188]	; (8004570 <TIM_Base_SetConfig+0x114>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01f      	beq.n	80044f6 <TIM_Base_SetConfig+0x9a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044bc:	d01b      	beq.n	80044f6 <TIM_Base_SetConfig+0x9a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <TIM_Base_SetConfig+0x118>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d017      	beq.n	80044f6 <TIM_Base_SetConfig+0x9a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2b      	ldr	r2, [pc, #172]	; (8004578 <TIM_Base_SetConfig+0x11c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <TIM_Base_SetConfig+0x9a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2a      	ldr	r2, [pc, #168]	; (800457c <TIM_Base_SetConfig+0x120>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00f      	beq.n	80044f6 <TIM_Base_SetConfig+0x9a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a29      	ldr	r2, [pc, #164]	; (8004580 <TIM_Base_SetConfig+0x124>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00b      	beq.n	80044f6 <TIM_Base_SetConfig+0x9a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a28      	ldr	r2, [pc, #160]	; (8004584 <TIM_Base_SetConfig+0x128>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <TIM_Base_SetConfig+0x9a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a27      	ldr	r2, [pc, #156]	; (8004588 <TIM_Base_SetConfig+0x12c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_Base_SetConfig+0x9a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a26      	ldr	r2, [pc, #152]	; (800458c <TIM_Base_SetConfig+0x130>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d108      	bne.n	8004508 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a10      	ldr	r2, [pc, #64]	; (8004570 <TIM_Base_SetConfig+0x114>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00f      	beq.n	8004554 <TIM_Base_SetConfig+0xf8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a12      	ldr	r2, [pc, #72]	; (8004580 <TIM_Base_SetConfig+0x124>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00b      	beq.n	8004554 <TIM_Base_SetConfig+0xf8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a11      	ldr	r2, [pc, #68]	; (8004584 <TIM_Base_SetConfig+0x128>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_Base_SetConfig+0xf8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a10      	ldr	r2, [pc, #64]	; (8004588 <TIM_Base_SetConfig+0x12c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_Base_SetConfig+0xf8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a0f      	ldr	r2, [pc, #60]	; (800458c <TIM_Base_SetConfig+0x130>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d103      	bne.n	800455c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	615a      	str	r2, [r3, #20]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40013400 	.word	0x40013400
 8004584:	40014000 	.word	0x40014000
 8004588:	40014400 	.word	0x40014400
 800458c:	40014800 	.word	0x40014800

08004590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f023 0201 	bic.w	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f023 030a 	bic.w	r3, r3, #10
 80045cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b087      	sub	sp, #28
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0210 	bic.w	r2, r3, #16
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	031b      	lsls	r3, r3, #12
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800462a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800464e:	b480      	push	{r7}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	f043 0307 	orr.w	r3, r3, #7
 8004670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	609a      	str	r2, [r3, #8]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800469e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	021a      	lsls	r2, r3, #8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	609a      	str	r2, [r3, #8]
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d8:	2302      	movs	r3, #2
 80046da:	e068      	b.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a2e      	ldr	r2, [pc, #184]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d004      	beq.n	8004710 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a2d      	ldr	r2, [pc, #180]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d108      	bne.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004716:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004728:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01d      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d018      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1b      	ldr	r2, [pc, #108]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1a      	ldr	r2, [pc, #104]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00e      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d009      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10c      	bne.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	4313      	orrs	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40013400 	.word	0x40013400
 80047c4:	40000400 	.word	0x40000400
 80047c8:	40000800 	.word	0x40000800
 80047cc:	40000c00 	.word	0x40000c00
 80047d0:	40014000 	.word	0x40014000

080047d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e040      	b.n	80048a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc fe00 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	; 0x24
 800483c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fae4 	bl	8004e1c <UART_SetConfig>
 8004854:	4603      	mov	r3, r0
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e022      	b.n	80048a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fd62 	bl	8005330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800487a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800488a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fde9 	bl	8005474 <UART_CheckIdleState>
 80048a2:	4603      	mov	r3, r0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d145      	bne.n	800494e <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_UART_Transmit_IT+0x22>
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e03e      	b.n	8004950 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_UART_Transmit_IT+0x34>
 80048dc:	2302      	movs	r3, #2
 80048de:	e037      	b.n	8004950 <HAL_UART_Transmit_IT+0xa4>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	88fa      	ldrh	r2, [r7, #6]
 80048fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2221      	movs	r2, #33	; 0x21
 8004910:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491a:	d107      	bne.n	800492c <HAL_UART_Transmit_IT+0x80>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a0d      	ldr	r2, [pc, #52]	; (800495c <HAL_UART_Transmit_IT+0xb0>)
 8004928:	669a      	str	r2, [r3, #104]	; 0x68
 800492a:	e002      	b.n	8004932 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a0c      	ldr	r2, [pc, #48]	; (8004960 <HAL_UART_Transmit_IT+0xb4>)
 8004930:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004948:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
  }
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	0800580f 	.word	0x0800580f
 8004960:	0800579b 	.word	0x0800579b

08004964 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004976:	2b20      	cmp	r3, #32
 8004978:	d131      	bne.n	80049de <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_UART_Receive_IT+0x22>
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e02a      	b.n	80049e0 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_UART_Receive_IT+0x34>
 8004994:	2302      	movs	r3, #2
 8004996:	e023      	b.n	80049e0 <HAL_UART_Receive_IT+0x7c>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a0f      	ldr	r2, [pc, #60]	; (80049e8 <HAL_UART_Receive_IT+0x84>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00e      	beq.n	80049ce <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80049cc:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	461a      	mov	r2, r3
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fe13 	bl	8005600 <UART_Start_Receive_IT>
 80049da:	4603      	mov	r3, r0
 80049dc:	e000      	b.n	80049e0 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40008000 	.word	0x40008000

080049ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a12:	4013      	ands	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d113      	bne.n	8004a44 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00e      	beq.n	8004a44 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 81ce 	beq.w	8004dd6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	4798      	blx	r3
      }
      return;
 8004a42:	e1c8      	b.n	8004dd6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 80e3 	beq.w	8004c12 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4ba6      	ldr	r3, [pc, #664]	; (8004cf4 <HAL_UART_IRQHandler+0x308>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80d8 	beq.w	8004c12 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d010      	beq.n	8004a8e <HAL_UART_IRQHandler+0xa2>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00b      	beq.n	8004a8e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d010      	beq.n	8004aba <HAL_UART_IRQHandler+0xce>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab0:	f043 0204 	orr.w	r2, r3, #4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d010      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xfa>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004adc:	f043 0202 	orr.w	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b12:	f043 0208 	orr.w	r2, r3, #8
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d011      	beq.n	8004b4a <HAL_UART_IRQHandler+0x15e>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00c      	beq.n	8004b4a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b40:	f043 0220 	orr.w	r2, r3, #32
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8142 	beq.w	8004dda <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00c      	beq.n	8004b7a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b80:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d004      	beq.n	8004b9a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d031      	beq.n	8004bfe <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fdb8 	bl	8005710 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d123      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bbc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d013      	beq.n	8004bee <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a4b      	ldr	r2, [pc, #300]	; (8004cf8 <HAL_UART_IRQHandler+0x30c>)
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fc ff63 	bl	8001a9e <HAL_DMA_Abort_IT>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d017      	beq.n	8004c0e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004be8:	4610      	mov	r0, r2
 8004bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	e00f      	b.n	8004c0e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8fe 	bl	8004df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	e00b      	b.n	8004c0e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f8fa 	bl	8004df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	e007      	b.n	8004c0e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8f6 	bl	8004df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c0c:	e0e5      	b.n	8004dda <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0e:	bf00      	nop
    return;
 8004c10:	e0e3      	b.n	8004dda <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	f040 80a9 	bne.w	8004d6e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 80a3 	beq.w	8004d6e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 809d 	beq.w	8004d6e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2210      	movs	r2, #16
 8004c3a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d158      	bne.n	8004cfc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004c54:	893b      	ldrh	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80c1 	beq.w	8004dde <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c62:	893a      	ldrh	r2, [r7, #8]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	f080 80ba 	bcs.w	8004dde <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	893a      	ldrh	r2, [r7, #8]
 8004c6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d12a      	bne.n	8004cd8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0210 	bic.w	r2, r2, #16
 8004ccc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fc fea5 	bl	8001a22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f889 	bl	8004e04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004cf2:	e074      	b.n	8004dde <HAL_UART_IRQHandler+0x3f2>
 8004cf4:	04000120 	.word	0x04000120
 8004cf8:	0800576f 	.word	0x0800576f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d063      	beq.n	8004de2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8004d1a:	897b      	ldrh	r3, [r7, #10]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d060      	beq.n	8004de2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d2e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0210 	bic.w	r2, r2, #16
 8004d60:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d62:	897b      	ldrh	r3, [r7, #10]
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f84c 	bl	8004e04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d6c:	e039      	b.n	8004de2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00d      	beq.n	8004d94 <HAL_UART_IRQHandler+0x3a8>
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fe6d 	bl	8005a6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d92:	e029      	b.n	8004de8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01a      	beq.n	8004de6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
    }
    return;
 8004db8:	e015      	b.n	8004de6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d011      	beq.n	8004de8 <HAL_UART_IRQHandler+0x3fc>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fd5b 	bl	800588a <UART_EndTransmit_IT>
    return;
 8004dd4:	e008      	b.n	8004de8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004dd6:	bf00      	nop
 8004dd8:	e006      	b.n	8004de8 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004dda:	bf00      	nop
 8004ddc:	e004      	b.n	8004de8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004dde:	bf00      	nop
 8004de0:	e002      	b.n	8004de8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004de2:	bf00      	nop
 8004de4:	e000      	b.n	8004de8 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004de6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop

08004df0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e1c:	b5b0      	push	{r4, r5, r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4bad      	ldr	r3, [pc, #692]	; (80050fc <UART_SetConfig+0x2e0>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	69f9      	ldr	r1, [r7, #28]
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4aa2      	ldr	r2, [pc, #648]	; (8005100 <UART_SetConfig+0x2e4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a99      	ldr	r2, [pc, #612]	; (8005104 <UART_SetConfig+0x2e8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d121      	bne.n	8004ee6 <UART_SetConfig+0xca>
 8004ea2:	4b99      	ldr	r3, [pc, #612]	; (8005108 <UART_SetConfig+0x2ec>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d817      	bhi.n	8004ee0 <UART_SetConfig+0xc4>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x9c>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08004ed5 	.word	0x08004ed5
 8004ec0:	08004ecf 	.word	0x08004ecf
 8004ec4:	08004edb 	.word	0x08004edb
 8004ec8:	2301      	movs	r3, #1
 8004eca:	76fb      	strb	r3, [r7, #27]
 8004ecc:	e0e7      	b.n	800509e <UART_SetConfig+0x282>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	76fb      	strb	r3, [r7, #27]
 8004ed2:	e0e4      	b.n	800509e <UART_SetConfig+0x282>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	76fb      	strb	r3, [r7, #27]
 8004ed8:	e0e1      	b.n	800509e <UART_SetConfig+0x282>
 8004eda:	2308      	movs	r3, #8
 8004edc:	76fb      	strb	r3, [r7, #27]
 8004ede:	e0de      	b.n	800509e <UART_SetConfig+0x282>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	76fb      	strb	r3, [r7, #27]
 8004ee4:	e0db      	b.n	800509e <UART_SetConfig+0x282>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a88      	ldr	r2, [pc, #544]	; (800510c <UART_SetConfig+0x2f0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d132      	bne.n	8004f56 <UART_SetConfig+0x13a>
 8004ef0:	4b85      	ldr	r3, [pc, #532]	; (8005108 <UART_SetConfig+0x2ec>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d828      	bhi.n	8004f50 <UART_SetConfig+0x134>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <UART_SetConfig+0xe8>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f39 	.word	0x08004f39
 8004f08:	08004f51 	.word	0x08004f51
 8004f0c:	08004f51 	.word	0x08004f51
 8004f10:	08004f51 	.word	0x08004f51
 8004f14:	08004f45 	.word	0x08004f45
 8004f18:	08004f51 	.word	0x08004f51
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f51 	.word	0x08004f51
 8004f24:	08004f3f 	.word	0x08004f3f
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f51 	.word	0x08004f51
 8004f34:	08004f4b 	.word	0x08004f4b
 8004f38:	2300      	movs	r3, #0
 8004f3a:	76fb      	strb	r3, [r7, #27]
 8004f3c:	e0af      	b.n	800509e <UART_SetConfig+0x282>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	76fb      	strb	r3, [r7, #27]
 8004f42:	e0ac      	b.n	800509e <UART_SetConfig+0x282>
 8004f44:	2304      	movs	r3, #4
 8004f46:	76fb      	strb	r3, [r7, #27]
 8004f48:	e0a9      	b.n	800509e <UART_SetConfig+0x282>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	76fb      	strb	r3, [r7, #27]
 8004f4e:	e0a6      	b.n	800509e <UART_SetConfig+0x282>
 8004f50:	2310      	movs	r3, #16
 8004f52:	76fb      	strb	r3, [r7, #27]
 8004f54:	e0a3      	b.n	800509e <UART_SetConfig+0x282>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a6d      	ldr	r2, [pc, #436]	; (8005110 <UART_SetConfig+0x2f4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d120      	bne.n	8004fa2 <UART_SetConfig+0x186>
 8004f60:	4b69      	ldr	r3, [pc, #420]	; (8005108 <UART_SetConfig+0x2ec>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f6a:	2b30      	cmp	r3, #48	; 0x30
 8004f6c:	d013      	beq.n	8004f96 <UART_SetConfig+0x17a>
 8004f6e:	2b30      	cmp	r3, #48	; 0x30
 8004f70:	d814      	bhi.n	8004f9c <UART_SetConfig+0x180>
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d009      	beq.n	8004f8a <UART_SetConfig+0x16e>
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d810      	bhi.n	8004f9c <UART_SetConfig+0x180>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <UART_SetConfig+0x168>
 8004f7e:	2b10      	cmp	r3, #16
 8004f80:	d006      	beq.n	8004f90 <UART_SetConfig+0x174>
 8004f82:	e00b      	b.n	8004f9c <UART_SetConfig+0x180>
 8004f84:	2300      	movs	r3, #0
 8004f86:	76fb      	strb	r3, [r7, #27]
 8004f88:	e089      	b.n	800509e <UART_SetConfig+0x282>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	76fb      	strb	r3, [r7, #27]
 8004f8e:	e086      	b.n	800509e <UART_SetConfig+0x282>
 8004f90:	2304      	movs	r3, #4
 8004f92:	76fb      	strb	r3, [r7, #27]
 8004f94:	e083      	b.n	800509e <UART_SetConfig+0x282>
 8004f96:	2308      	movs	r3, #8
 8004f98:	76fb      	strb	r3, [r7, #27]
 8004f9a:	e080      	b.n	800509e <UART_SetConfig+0x282>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	76fb      	strb	r3, [r7, #27]
 8004fa0:	e07d      	b.n	800509e <UART_SetConfig+0x282>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a5b      	ldr	r2, [pc, #364]	; (8005114 <UART_SetConfig+0x2f8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d120      	bne.n	8004fee <UART_SetConfig+0x1d2>
 8004fac:	4b56      	ldr	r3, [pc, #344]	; (8005108 <UART_SetConfig+0x2ec>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004fb8:	d013      	beq.n	8004fe2 <UART_SetConfig+0x1c6>
 8004fba:	2bc0      	cmp	r3, #192	; 0xc0
 8004fbc:	d814      	bhi.n	8004fe8 <UART_SetConfig+0x1cc>
 8004fbe:	2b80      	cmp	r3, #128	; 0x80
 8004fc0:	d009      	beq.n	8004fd6 <UART_SetConfig+0x1ba>
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d810      	bhi.n	8004fe8 <UART_SetConfig+0x1cc>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <UART_SetConfig+0x1b4>
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d006      	beq.n	8004fdc <UART_SetConfig+0x1c0>
 8004fce:	e00b      	b.n	8004fe8 <UART_SetConfig+0x1cc>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	76fb      	strb	r3, [r7, #27]
 8004fd4:	e063      	b.n	800509e <UART_SetConfig+0x282>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	76fb      	strb	r3, [r7, #27]
 8004fda:	e060      	b.n	800509e <UART_SetConfig+0x282>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	76fb      	strb	r3, [r7, #27]
 8004fe0:	e05d      	b.n	800509e <UART_SetConfig+0x282>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	76fb      	strb	r3, [r7, #27]
 8004fe6:	e05a      	b.n	800509e <UART_SetConfig+0x282>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	76fb      	strb	r3, [r7, #27]
 8004fec:	e057      	b.n	800509e <UART_SetConfig+0x282>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a49      	ldr	r2, [pc, #292]	; (8005118 <UART_SetConfig+0x2fc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d125      	bne.n	8005044 <UART_SetConfig+0x228>
 8004ff8:	4b43      	ldr	r3, [pc, #268]	; (8005108 <UART_SetConfig+0x2ec>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005006:	d017      	beq.n	8005038 <UART_SetConfig+0x21c>
 8005008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500c:	d817      	bhi.n	800503e <UART_SetConfig+0x222>
 800500e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005012:	d00b      	beq.n	800502c <UART_SetConfig+0x210>
 8005014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005018:	d811      	bhi.n	800503e <UART_SetConfig+0x222>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <UART_SetConfig+0x20a>
 800501e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005022:	d006      	beq.n	8005032 <UART_SetConfig+0x216>
 8005024:	e00b      	b.n	800503e <UART_SetConfig+0x222>
 8005026:	2300      	movs	r3, #0
 8005028:	76fb      	strb	r3, [r7, #27]
 800502a:	e038      	b.n	800509e <UART_SetConfig+0x282>
 800502c:	2302      	movs	r3, #2
 800502e:	76fb      	strb	r3, [r7, #27]
 8005030:	e035      	b.n	800509e <UART_SetConfig+0x282>
 8005032:	2304      	movs	r3, #4
 8005034:	76fb      	strb	r3, [r7, #27]
 8005036:	e032      	b.n	800509e <UART_SetConfig+0x282>
 8005038:	2308      	movs	r3, #8
 800503a:	76fb      	strb	r3, [r7, #27]
 800503c:	e02f      	b.n	800509e <UART_SetConfig+0x282>
 800503e:	2310      	movs	r3, #16
 8005040:	76fb      	strb	r3, [r7, #27]
 8005042:	e02c      	b.n	800509e <UART_SetConfig+0x282>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a2d      	ldr	r2, [pc, #180]	; (8005100 <UART_SetConfig+0x2e4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d125      	bne.n	800509a <UART_SetConfig+0x27e>
 800504e:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <UART_SetConfig+0x2ec>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800505c:	d017      	beq.n	800508e <UART_SetConfig+0x272>
 800505e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005062:	d817      	bhi.n	8005094 <UART_SetConfig+0x278>
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005068:	d00b      	beq.n	8005082 <UART_SetConfig+0x266>
 800506a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800506e:	d811      	bhi.n	8005094 <UART_SetConfig+0x278>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <UART_SetConfig+0x260>
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005078:	d006      	beq.n	8005088 <UART_SetConfig+0x26c>
 800507a:	e00b      	b.n	8005094 <UART_SetConfig+0x278>
 800507c:	2300      	movs	r3, #0
 800507e:	76fb      	strb	r3, [r7, #27]
 8005080:	e00d      	b.n	800509e <UART_SetConfig+0x282>
 8005082:	2302      	movs	r3, #2
 8005084:	76fb      	strb	r3, [r7, #27]
 8005086:	e00a      	b.n	800509e <UART_SetConfig+0x282>
 8005088:	2304      	movs	r3, #4
 800508a:	76fb      	strb	r3, [r7, #27]
 800508c:	e007      	b.n	800509e <UART_SetConfig+0x282>
 800508e:	2308      	movs	r3, #8
 8005090:	76fb      	strb	r3, [r7, #27]
 8005092:	e004      	b.n	800509e <UART_SetConfig+0x282>
 8005094:	2310      	movs	r3, #16
 8005096:	76fb      	strb	r3, [r7, #27]
 8005098:	e001      	b.n	800509e <UART_SetConfig+0x282>
 800509a:	2310      	movs	r3, #16
 800509c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a17      	ldr	r2, [pc, #92]	; (8005100 <UART_SetConfig+0x2e4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	f040 8087 	bne.w	80051b8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050aa:	7efb      	ldrb	r3, [r7, #27]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d837      	bhi.n	8005120 <UART_SetConfig+0x304>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x29c>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050dd 	.word	0x080050dd
 80050bc:	08005121 	.word	0x08005121
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	08005121 	.word	0x08005121
 80050c8:	080050eb 	.word	0x080050eb
 80050cc:	08005121 	.word	0x08005121
 80050d0:	08005121 	.word	0x08005121
 80050d4:	08005121 	.word	0x08005121
 80050d8:	080050f3 	.word	0x080050f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050dc:	f7fd fd4a 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 80050e0:	6178      	str	r0, [r7, #20]
        break;
 80050e2:	e022      	b.n	800512a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e4:	4b0d      	ldr	r3, [pc, #52]	; (800511c <UART_SetConfig+0x300>)
 80050e6:	617b      	str	r3, [r7, #20]
        break;
 80050e8:	e01f      	b.n	800512a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ea:	f7fd fcab 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80050ee:	6178      	str	r0, [r7, #20]
        break;
 80050f0:	e01b      	b.n	800512a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f6:	617b      	str	r3, [r7, #20]
        break;
 80050f8:	e017      	b.n	800512a <UART_SetConfig+0x30e>
 80050fa:	bf00      	nop
 80050fc:	efff69f3 	.word	0xefff69f3
 8005100:	40008000 	.word	0x40008000
 8005104:	40013800 	.word	0x40013800
 8005108:	40021000 	.word	0x40021000
 800510c:	40004400 	.word	0x40004400
 8005110:	40004800 	.word	0x40004800
 8005114:	40004c00 	.word	0x40004c00
 8005118:	40005000 	.word	0x40005000
 800511c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	76bb      	strb	r3, [r7, #26]
        break;
 8005128:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80f1 	beq.w	8005314 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	429a      	cmp	r2, r3
 8005140:	d305      	bcc.n	800514e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	429a      	cmp	r2, r3
 800514c:	d902      	bls.n	8005154 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	76bb      	strb	r3, [r7, #26]
 8005152:	e0df      	b.n	8005314 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4618      	mov	r0, r3
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	020b      	lsls	r3, r1, #8
 8005166:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800516a:	0202      	lsls	r2, r0, #8
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	6849      	ldr	r1, [r1, #4]
 8005170:	0849      	lsrs	r1, r1, #1
 8005172:	4608      	mov	r0, r1
 8005174:	f04f 0100 	mov.w	r1, #0
 8005178:	1814      	adds	r4, r2, r0
 800517a:	eb43 0501 	adc.w	r5, r3, r1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	461a      	mov	r2, r3
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	4620      	mov	r0, r4
 800518a:	4629      	mov	r1, r5
 800518c:	f7fb f878 	bl	8000280 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4613      	mov	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519e:	d308      	bcc.n	80051b2 <UART_SetConfig+0x396>
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a6:	d204      	bcs.n	80051b2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	60da      	str	r2, [r3, #12]
 80051b0:	e0b0      	b.n	8005314 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	76bb      	strb	r3, [r7, #26]
 80051b6:	e0ad      	b.n	8005314 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c0:	d15c      	bne.n	800527c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80051c2:	7efb      	ldrb	r3, [r7, #27]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d828      	bhi.n	800521a <UART_SetConfig+0x3fe>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x3b4>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080051fd 	.word	0x080051fd
 80051d8:	08005205 	.word	0x08005205
 80051dc:	0800521b 	.word	0x0800521b
 80051e0:	0800520b 	.word	0x0800520b
 80051e4:	0800521b 	.word	0x0800521b
 80051e8:	0800521b 	.word	0x0800521b
 80051ec:	0800521b 	.word	0x0800521b
 80051f0:	08005213 	.word	0x08005213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7fd fcbe 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 80051f8:	6178      	str	r0, [r7, #20]
        break;
 80051fa:	e013      	b.n	8005224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051fc:	f7fd fcd0 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8005200:	6178      	str	r0, [r7, #20]
        break;
 8005202:	e00f      	b.n	8005224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005204:	4b49      	ldr	r3, [pc, #292]	; (800532c <UART_SetConfig+0x510>)
 8005206:	617b      	str	r3, [r7, #20]
        break;
 8005208:	e00c      	b.n	8005224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520a:	f7fd fc1b 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 800520e:	6178      	str	r0, [r7, #20]
        break;
 8005210:	e008      	b.n	8005224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005216:	617b      	str	r3, [r7, #20]
        break;
 8005218:	e004      	b.n	8005224 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	76bb      	strb	r3, [r7, #26]
        break;
 8005222:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d074      	beq.n	8005314 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	005a      	lsls	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	b29b      	uxth	r3, r3
 8005240:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b0f      	cmp	r3, #15
 8005246:	d916      	bls.n	8005276 <UART_SetConfig+0x45a>
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524e:	d212      	bcs.n	8005276 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f023 030f 	bic.w	r3, r3, #15
 8005258:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	b29b      	uxth	r3, r3
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	b29a      	uxth	r2, r3
 8005266:	89fb      	ldrh	r3, [r7, #14]
 8005268:	4313      	orrs	r3, r2
 800526a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	89fa      	ldrh	r2, [r7, #14]
 8005272:	60da      	str	r2, [r3, #12]
 8005274:	e04e      	b.n	8005314 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	76bb      	strb	r3, [r7, #26]
 800527a:	e04b      	b.n	8005314 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800527c:	7efb      	ldrb	r3, [r7, #27]
 800527e:	2b08      	cmp	r3, #8
 8005280:	d827      	bhi.n	80052d2 <UART_SetConfig+0x4b6>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <UART_SetConfig+0x46c>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	080052d3 	.word	0x080052d3
 8005298:	080052c3 	.word	0x080052c3
 800529c:	080052d3 	.word	0x080052d3
 80052a0:	080052d3 	.word	0x080052d3
 80052a4:	080052d3 	.word	0x080052d3
 80052a8:	080052cb 	.word	0x080052cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ac:	f7fd fc62 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 80052b0:	6178      	str	r0, [r7, #20]
        break;
 80052b2:	e013      	b.n	80052dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b4:	f7fd fc74 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 80052b8:	6178      	str	r0, [r7, #20]
        break;
 80052ba:	e00f      	b.n	80052dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052bc:	4b1b      	ldr	r3, [pc, #108]	; (800532c <UART_SetConfig+0x510>)
 80052be:	617b      	str	r3, [r7, #20]
        break;
 80052c0:	e00c      	b.n	80052dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c2:	f7fd fbbf 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80052c6:	6178      	str	r0, [r7, #20]
        break;
 80052c8:	e008      	b.n	80052dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ce:	617b      	str	r3, [r7, #20]
        break;
 80052d0:	e004      	b.n	80052dc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	76bb      	strb	r3, [r7, #26]
        break;
 80052da:	bf00      	nop
    }

    if (pclk != 0U)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d018      	beq.n	8005314 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	085a      	lsrs	r2, r3, #1
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	441a      	add	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d908      	bls.n	8005310 <UART_SetConfig+0x4f4>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005304:	d204      	bcs.n	8005310 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	e001      	b.n	8005314 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005320:	7ebb      	ldrb	r3, [r7, #26]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bdb0      	pop	{r4, r5, r7, pc}
 800532a:	bf00      	nop
 800532c:	00f42400 	.word	0x00f42400

08005330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800542e:	d10a      	bne.n	8005446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af02      	add	r7, sp, #8
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005484:	f7fc f9b0 	bl	80017e8 <HAL_GetTick>
 8005488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d10e      	bne.n	80054b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f82d 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e023      	b.n	80054fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d10e      	bne.n	80054e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f817 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e00d      	b.n	80054fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005516:	e05e      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d05a      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005520:	f7fc f962 	bl	80017e8 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	429a      	cmp	r2, r3
 800552e:	d302      	bcc.n	8005536 <UART_WaitOnFlagUntilTimeout+0x30>
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11b      	bne.n	800556e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005544:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0201 	bic.w	r2, r2, #1
 8005554:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e043      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d02c      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558a:	d124      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005594:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055a4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0201 	bic.w	r2, r2, #1
 80055b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e00f      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d091      	beq.n	8005518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	4613      	mov	r3, r2
 800560c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005632:	d10e      	bne.n	8005652 <UART_Start_Receive_IT+0x52>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d105      	bne.n	8005648 <UART_Start_Receive_IT+0x48>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005646:	e02d      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	22ff      	movs	r2, #255	; 0xff
 800564c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005650:	e028      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <UART_Start_Receive_IT+0x76>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <UART_Start_Receive_IT+0x6c>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	22ff      	movs	r2, #255	; 0xff
 8005666:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800566a:	e01b      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	227f      	movs	r2, #127	; 0x7f
 8005670:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005674:	e016      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800567e:	d10d      	bne.n	800569c <UART_Start_Receive_IT+0x9c>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <UART_Start_Receive_IT+0x92>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	227f      	movs	r2, #127	; 0x7f
 800568c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005690:	e008      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	223f      	movs	r2, #63	; 0x3f
 8005696:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800569a:	e003      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2222      	movs	r2, #34	; 0x22
 80056b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ca:	d107      	bne.n	80056dc <UART_Start_Receive_IT+0xdc>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d103      	bne.n	80056dc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4a0c      	ldr	r2, [pc, #48]	; (8005708 <UART_Start_Receive_IT+0x108>)
 80056d8:	665a      	str	r2, [r3, #100]	; 0x64
 80056da:	e002      	b.n	80056e2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4a0b      	ldr	r2, [pc, #44]	; (800570c <UART_Start_Receive_IT+0x10c>)
 80056e0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80056f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	08005995 	.word	0x08005995
 800570c:	080058bd 	.word	0x080058bd

08005710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005726:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573c:	2b01      	cmp	r3, #1
 800573e:	d107      	bne.n	8005750 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0210 	bic.w	r2, r2, #16
 800574e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff fb2f 	bl	8004df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005792:	bf00      	nop
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a6:	2b21      	cmp	r3, #33	; 0x21
 80057a8:	d12b      	bne.n	8005802 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d110      	bne.n	80057d8 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057d4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80057d6:	e014      	b.n	8005802 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057dc:	781a      	ldrb	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	b292      	uxth	r2, r2
 80057e4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800581a:	2b21      	cmp	r3, #33	; 0x21
 800581c:	d12f      	bne.n	800587e <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d110      	bne.n	800584c <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005838:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005848:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800584a:	e018      	b.n	800587e <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005850:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800585e:	b292      	uxth	r2, r2
 8005860:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005866:	1c9a      	adds	r2, r3, #2
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800587e:	bf00      	nop
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fa fe62 	bl	8000578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058b4:	bf00      	nop
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058ca:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d0:	2b22      	cmp	r3, #34	; 0x22
 80058d2:	d151      	bne.n	8005978 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058da:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058dc:	89bb      	ldrh	r3, [r7, #12]
 80058de:	b2d9      	uxtb	r1, r3
 80058e0:	89fb      	ldrh	r3, [r7, #14]
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e8:	400a      	ands	r2, r1
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d13a      	bne.n	800598c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005924:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005946:	2b01      	cmp	r3, #1
 8005948:	d10f      	bne.n	800596a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0210 	bic.w	r2, r2, #16
 8005958:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005960:	4619      	mov	r1, r3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fa4e 	bl	8004e04 <HAL_UARTEx_RxEventCallback>
 8005968:	e002      	b.n	8005970 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fa fe14 	bl	8000598 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005976:	e009      	b.n	800598c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	8b1b      	ldrh	r3, [r3, #24]
 800597e:	b29a      	uxth	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0208 	orr.w	r2, r2, #8
 8005988:	b292      	uxth	r2, r2
 800598a:	831a      	strh	r2, [r3, #24]
}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a8:	2b22      	cmp	r3, #34	; 0x22
 80059aa:	d151      	bne.n	8005a50 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059b2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80059ba:	89ba      	ldrh	r2, [r7, #12]
 80059bc:	89fb      	ldrh	r3, [r7, #14]
 80059be:	4013      	ands	r3, r2
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	1c9a      	adds	r2, r3, #2
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d13a      	bne.n	8005a64 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d10f      	bne.n	8005a42 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0210 	bic.w	r2, r2, #16
 8005a30:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff f9e2 	bl	8004e04 <HAL_UARTEx_RxEventCallback>
 8005a40:	e002      	b.n	8005a48 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fa fda8 	bl	8000598 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a4e:	e009      	b.n	8005a64 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	8b1b      	ldrh	r3, [r3, #24]
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0208 	orr.w	r2, r2, #8
 8005a60:	b292      	uxth	r2, r2
 8005a62:	831a      	strh	r2, [r3, #24]
}
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <__errno>:
 8005a80:	4b01      	ldr	r3, [pc, #4]	; (8005a88 <__errno+0x8>)
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	2000000c 	.word	0x2000000c

08005a8c <__libc_init_array>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	4d0d      	ldr	r5, [pc, #52]	; (8005ac4 <__libc_init_array+0x38>)
 8005a90:	4c0d      	ldr	r4, [pc, #52]	; (8005ac8 <__libc_init_array+0x3c>)
 8005a92:	1b64      	subs	r4, r4, r5
 8005a94:	10a4      	asrs	r4, r4, #2
 8005a96:	2600      	movs	r6, #0
 8005a98:	42a6      	cmp	r6, r4
 8005a9a:	d109      	bne.n	8005ab0 <__libc_init_array+0x24>
 8005a9c:	4d0b      	ldr	r5, [pc, #44]	; (8005acc <__libc_init_array+0x40>)
 8005a9e:	4c0c      	ldr	r4, [pc, #48]	; (8005ad0 <__libc_init_array+0x44>)
 8005aa0:	f000 fc62 	bl	8006368 <_init>
 8005aa4:	1b64      	subs	r4, r4, r5
 8005aa6:	10a4      	asrs	r4, r4, #2
 8005aa8:	2600      	movs	r6, #0
 8005aaa:	42a6      	cmp	r6, r4
 8005aac:	d105      	bne.n	8005aba <__libc_init_array+0x2e>
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab4:	4798      	blx	r3
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7ee      	b.n	8005a98 <__libc_init_array+0xc>
 8005aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abe:	4798      	blx	r3
 8005ac0:	3601      	adds	r6, #1
 8005ac2:	e7f2      	b.n	8005aaa <__libc_init_array+0x1e>
 8005ac4:	080065b8 	.word	0x080065b8
 8005ac8:	080065b8 	.word	0x080065b8
 8005acc:	080065b8 	.word	0x080065b8
 8005ad0:	080065bc 	.word	0x080065bc

08005ad4 <memset>:
 8005ad4:	4402      	add	r2, r0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d100      	bne.n	8005ade <memset+0xa>
 8005adc:	4770      	bx	lr
 8005ade:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae2:	e7f9      	b.n	8005ad8 <memset+0x4>

08005ae4 <sniprintf>:
 8005ae4:	b40c      	push	{r2, r3}
 8005ae6:	b530      	push	{r4, r5, lr}
 8005ae8:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <sniprintf+0x64>)
 8005aea:	1e0c      	subs	r4, r1, #0
 8005aec:	681d      	ldr	r5, [r3, #0]
 8005aee:	b09d      	sub	sp, #116	; 0x74
 8005af0:	da08      	bge.n	8005b04 <sniprintf+0x20>
 8005af2:	238b      	movs	r3, #139	; 0x8b
 8005af4:	602b      	str	r3, [r5, #0]
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295
 8005afa:	b01d      	add	sp, #116	; 0x74
 8005afc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b00:	b002      	add	sp, #8
 8005b02:	4770      	bx	lr
 8005b04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b0c:	bf14      	ite	ne
 8005b0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b12:	4623      	moveq	r3, r4
 8005b14:	9304      	str	r3, [sp, #16]
 8005b16:	9307      	str	r3, [sp, #28]
 8005b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b1c:	9002      	str	r0, [sp, #8]
 8005b1e:	9006      	str	r0, [sp, #24]
 8005b20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b26:	ab21      	add	r3, sp, #132	; 0x84
 8005b28:	a902      	add	r1, sp, #8
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	9301      	str	r3, [sp, #4]
 8005b2e:	f000 f869 	bl	8005c04 <_svfiprintf_r>
 8005b32:	1c43      	adds	r3, r0, #1
 8005b34:	bfbc      	itt	lt
 8005b36:	238b      	movlt	r3, #139	; 0x8b
 8005b38:	602b      	strlt	r3, [r5, #0]
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	d0dd      	beq.n	8005afa <sniprintf+0x16>
 8005b3e:	9b02      	ldr	r3, [sp, #8]
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e7d9      	b.n	8005afa <sniprintf+0x16>
 8005b46:	bf00      	nop
 8005b48:	2000000c 	.word	0x2000000c

08005b4c <__ssputs_r>:
 8005b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	688e      	ldr	r6, [r1, #8]
 8005b52:	429e      	cmp	r6, r3
 8005b54:	4682      	mov	sl, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	4690      	mov	r8, r2
 8005b5a:	461f      	mov	r7, r3
 8005b5c:	d838      	bhi.n	8005bd0 <__ssputs_r+0x84>
 8005b5e:	898a      	ldrh	r2, [r1, #12]
 8005b60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b64:	d032      	beq.n	8005bcc <__ssputs_r+0x80>
 8005b66:	6825      	ldr	r5, [r4, #0]
 8005b68:	6909      	ldr	r1, [r1, #16]
 8005b6a:	eba5 0901 	sub.w	r9, r5, r1
 8005b6e:	6965      	ldr	r5, [r4, #20]
 8005b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b78:	3301      	adds	r3, #1
 8005b7a:	444b      	add	r3, r9
 8005b7c:	106d      	asrs	r5, r5, #1
 8005b7e:	429d      	cmp	r5, r3
 8005b80:	bf38      	it	cc
 8005b82:	461d      	movcc	r5, r3
 8005b84:	0553      	lsls	r3, r2, #21
 8005b86:	d531      	bpl.n	8005bec <__ssputs_r+0xa0>
 8005b88:	4629      	mov	r1, r5
 8005b8a:	f000 fb47 	bl	800621c <_malloc_r>
 8005b8e:	4606      	mov	r6, r0
 8005b90:	b950      	cbnz	r0, 8005ba8 <__ssputs_r+0x5c>
 8005b92:	230c      	movs	r3, #12
 8005b94:	f8ca 3000 	str.w	r3, [sl]
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba8:	6921      	ldr	r1, [r4, #16]
 8005baa:	464a      	mov	r2, r9
 8005bac:	f000 fabe 	bl	800612c <memcpy>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	6126      	str	r6, [r4, #16]
 8005bbe:	6165      	str	r5, [r4, #20]
 8005bc0:	444e      	add	r6, r9
 8005bc2:	eba5 0509 	sub.w	r5, r5, r9
 8005bc6:	6026      	str	r6, [r4, #0]
 8005bc8:	60a5      	str	r5, [r4, #8]
 8005bca:	463e      	mov	r6, r7
 8005bcc:	42be      	cmp	r6, r7
 8005bce:	d900      	bls.n	8005bd2 <__ssputs_r+0x86>
 8005bd0:	463e      	mov	r6, r7
 8005bd2:	4632      	mov	r2, r6
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	f000 fab6 	bl	8006148 <memmove>
 8005bdc:	68a3      	ldr	r3, [r4, #8]
 8005bde:	6822      	ldr	r2, [r4, #0]
 8005be0:	1b9b      	subs	r3, r3, r6
 8005be2:	4432      	add	r2, r6
 8005be4:	60a3      	str	r3, [r4, #8]
 8005be6:	6022      	str	r2, [r4, #0]
 8005be8:	2000      	movs	r0, #0
 8005bea:	e7db      	b.n	8005ba4 <__ssputs_r+0x58>
 8005bec:	462a      	mov	r2, r5
 8005bee:	f000 fb6f 	bl	80062d0 <_realloc_r>
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d1e1      	bne.n	8005bbc <__ssputs_r+0x70>
 8005bf8:	6921      	ldr	r1, [r4, #16]
 8005bfa:	4650      	mov	r0, sl
 8005bfc:	f000 fabe 	bl	800617c <_free_r>
 8005c00:	e7c7      	b.n	8005b92 <__ssputs_r+0x46>
	...

08005c04 <_svfiprintf_r>:
 8005c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c08:	4698      	mov	r8, r3
 8005c0a:	898b      	ldrh	r3, [r1, #12]
 8005c0c:	061b      	lsls	r3, r3, #24
 8005c0e:	b09d      	sub	sp, #116	; 0x74
 8005c10:	4607      	mov	r7, r0
 8005c12:	460d      	mov	r5, r1
 8005c14:	4614      	mov	r4, r2
 8005c16:	d50e      	bpl.n	8005c36 <_svfiprintf_r+0x32>
 8005c18:	690b      	ldr	r3, [r1, #16]
 8005c1a:	b963      	cbnz	r3, 8005c36 <_svfiprintf_r+0x32>
 8005c1c:	2140      	movs	r1, #64	; 0x40
 8005c1e:	f000 fafd 	bl	800621c <_malloc_r>
 8005c22:	6028      	str	r0, [r5, #0]
 8005c24:	6128      	str	r0, [r5, #16]
 8005c26:	b920      	cbnz	r0, 8005c32 <_svfiprintf_r+0x2e>
 8005c28:	230c      	movs	r3, #12
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	e0d1      	b.n	8005dd6 <_svfiprintf_r+0x1d2>
 8005c32:	2340      	movs	r3, #64	; 0x40
 8005c34:	616b      	str	r3, [r5, #20]
 8005c36:	2300      	movs	r3, #0
 8005c38:	9309      	str	r3, [sp, #36]	; 0x24
 8005c3a:	2320      	movs	r3, #32
 8005c3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c44:	2330      	movs	r3, #48	; 0x30
 8005c46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005df0 <_svfiprintf_r+0x1ec>
 8005c4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c4e:	f04f 0901 	mov.w	r9, #1
 8005c52:	4623      	mov	r3, r4
 8005c54:	469a      	mov	sl, r3
 8005c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c5a:	b10a      	cbz	r2, 8005c60 <_svfiprintf_r+0x5c>
 8005c5c:	2a25      	cmp	r2, #37	; 0x25
 8005c5e:	d1f9      	bne.n	8005c54 <_svfiprintf_r+0x50>
 8005c60:	ebba 0b04 	subs.w	fp, sl, r4
 8005c64:	d00b      	beq.n	8005c7e <_svfiprintf_r+0x7a>
 8005c66:	465b      	mov	r3, fp
 8005c68:	4622      	mov	r2, r4
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	f7ff ff6d 	bl	8005b4c <__ssputs_r>
 8005c72:	3001      	adds	r0, #1
 8005c74:	f000 80aa 	beq.w	8005dcc <_svfiprintf_r+0x1c8>
 8005c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c7a:	445a      	add	r2, fp
 8005c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80a2 	beq.w	8005dcc <_svfiprintf_r+0x1c8>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c92:	f10a 0a01 	add.w	sl, sl, #1
 8005c96:	9304      	str	r3, [sp, #16]
 8005c98:	9307      	str	r3, [sp, #28]
 8005c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8005ca0:	4654      	mov	r4, sl
 8005ca2:	2205      	movs	r2, #5
 8005ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca8:	4851      	ldr	r0, [pc, #324]	; (8005df0 <_svfiprintf_r+0x1ec>)
 8005caa:	f7fa fa99 	bl	80001e0 <memchr>
 8005cae:	9a04      	ldr	r2, [sp, #16]
 8005cb0:	b9d8      	cbnz	r0, 8005cea <_svfiprintf_r+0xe6>
 8005cb2:	06d0      	lsls	r0, r2, #27
 8005cb4:	bf44      	itt	mi
 8005cb6:	2320      	movmi	r3, #32
 8005cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cbc:	0711      	lsls	r1, r2, #28
 8005cbe:	bf44      	itt	mi
 8005cc0:	232b      	movmi	r3, #43	; 0x2b
 8005cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005cca:	2b2a      	cmp	r3, #42	; 0x2a
 8005ccc:	d015      	beq.n	8005cfa <_svfiprintf_r+0xf6>
 8005cce:	9a07      	ldr	r2, [sp, #28]
 8005cd0:	4654      	mov	r4, sl
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	f04f 0c0a 	mov.w	ip, #10
 8005cd8:	4621      	mov	r1, r4
 8005cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cde:	3b30      	subs	r3, #48	; 0x30
 8005ce0:	2b09      	cmp	r3, #9
 8005ce2:	d94e      	bls.n	8005d82 <_svfiprintf_r+0x17e>
 8005ce4:	b1b0      	cbz	r0, 8005d14 <_svfiprintf_r+0x110>
 8005ce6:	9207      	str	r2, [sp, #28]
 8005ce8:	e014      	b.n	8005d14 <_svfiprintf_r+0x110>
 8005cea:	eba0 0308 	sub.w	r3, r0, r8
 8005cee:	fa09 f303 	lsl.w	r3, r9, r3
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	46a2      	mov	sl, r4
 8005cf8:	e7d2      	b.n	8005ca0 <_svfiprintf_r+0x9c>
 8005cfa:	9b03      	ldr	r3, [sp, #12]
 8005cfc:	1d19      	adds	r1, r3, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	9103      	str	r1, [sp, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bfbb      	ittet	lt
 8005d06:	425b      	neglt	r3, r3
 8005d08:	f042 0202 	orrlt.w	r2, r2, #2
 8005d0c:	9307      	strge	r3, [sp, #28]
 8005d0e:	9307      	strlt	r3, [sp, #28]
 8005d10:	bfb8      	it	lt
 8005d12:	9204      	strlt	r2, [sp, #16]
 8005d14:	7823      	ldrb	r3, [r4, #0]
 8005d16:	2b2e      	cmp	r3, #46	; 0x2e
 8005d18:	d10c      	bne.n	8005d34 <_svfiprintf_r+0x130>
 8005d1a:	7863      	ldrb	r3, [r4, #1]
 8005d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d1e:	d135      	bne.n	8005d8c <_svfiprintf_r+0x188>
 8005d20:	9b03      	ldr	r3, [sp, #12]
 8005d22:	1d1a      	adds	r2, r3, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	9203      	str	r2, [sp, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bfb8      	it	lt
 8005d2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d30:	3402      	adds	r4, #2
 8005d32:	9305      	str	r3, [sp, #20]
 8005d34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e00 <_svfiprintf_r+0x1fc>
 8005d38:	7821      	ldrb	r1, [r4, #0]
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	4650      	mov	r0, sl
 8005d3e:	f7fa fa4f 	bl	80001e0 <memchr>
 8005d42:	b140      	cbz	r0, 8005d56 <_svfiprintf_r+0x152>
 8005d44:	2340      	movs	r3, #64	; 0x40
 8005d46:	eba0 000a 	sub.w	r0, r0, sl
 8005d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d4e:	9b04      	ldr	r3, [sp, #16]
 8005d50:	4303      	orrs	r3, r0
 8005d52:	3401      	adds	r4, #1
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d5a:	4826      	ldr	r0, [pc, #152]	; (8005df4 <_svfiprintf_r+0x1f0>)
 8005d5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d60:	2206      	movs	r2, #6
 8005d62:	f7fa fa3d 	bl	80001e0 <memchr>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d038      	beq.n	8005ddc <_svfiprintf_r+0x1d8>
 8005d6a:	4b23      	ldr	r3, [pc, #140]	; (8005df8 <_svfiprintf_r+0x1f4>)
 8005d6c:	bb1b      	cbnz	r3, 8005db6 <_svfiprintf_r+0x1b2>
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	3307      	adds	r3, #7
 8005d72:	f023 0307 	bic.w	r3, r3, #7
 8005d76:	3308      	adds	r3, #8
 8005d78:	9303      	str	r3, [sp, #12]
 8005d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7c:	4433      	add	r3, r6
 8005d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d80:	e767      	b.n	8005c52 <_svfiprintf_r+0x4e>
 8005d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d86:	460c      	mov	r4, r1
 8005d88:	2001      	movs	r0, #1
 8005d8a:	e7a5      	b.n	8005cd8 <_svfiprintf_r+0xd4>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	3401      	adds	r4, #1
 8005d90:	9305      	str	r3, [sp, #20]
 8005d92:	4619      	mov	r1, r3
 8005d94:	f04f 0c0a 	mov.w	ip, #10
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d9e:	3a30      	subs	r2, #48	; 0x30
 8005da0:	2a09      	cmp	r2, #9
 8005da2:	d903      	bls.n	8005dac <_svfiprintf_r+0x1a8>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0c5      	beq.n	8005d34 <_svfiprintf_r+0x130>
 8005da8:	9105      	str	r1, [sp, #20]
 8005daa:	e7c3      	b.n	8005d34 <_svfiprintf_r+0x130>
 8005dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8005db0:	4604      	mov	r4, r0
 8005db2:	2301      	movs	r3, #1
 8005db4:	e7f0      	b.n	8005d98 <_svfiprintf_r+0x194>
 8005db6:	ab03      	add	r3, sp, #12
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	462a      	mov	r2, r5
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <_svfiprintf_r+0x1f8>)
 8005dbe:	a904      	add	r1, sp, #16
 8005dc0:	4638      	mov	r0, r7
 8005dc2:	f3af 8000 	nop.w
 8005dc6:	1c42      	adds	r2, r0, #1
 8005dc8:	4606      	mov	r6, r0
 8005dca:	d1d6      	bne.n	8005d7a <_svfiprintf_r+0x176>
 8005dcc:	89ab      	ldrh	r3, [r5, #12]
 8005dce:	065b      	lsls	r3, r3, #25
 8005dd0:	f53f af2c 	bmi.w	8005c2c <_svfiprintf_r+0x28>
 8005dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dd6:	b01d      	add	sp, #116	; 0x74
 8005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	ab03      	add	r3, sp, #12
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	462a      	mov	r2, r5
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <_svfiprintf_r+0x1f8>)
 8005de4:	a904      	add	r1, sp, #16
 8005de6:	4638      	mov	r0, r7
 8005de8:	f000 f87a 	bl	8005ee0 <_printf_i>
 8005dec:	e7eb      	b.n	8005dc6 <_svfiprintf_r+0x1c2>
 8005dee:	bf00      	nop
 8005df0:	0800657c 	.word	0x0800657c
 8005df4:	08006586 	.word	0x08006586
 8005df8:	00000000 	.word	0x00000000
 8005dfc:	08005b4d 	.word	0x08005b4d
 8005e00:	08006582 	.word	0x08006582

08005e04 <_printf_common>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	4616      	mov	r6, r2
 8005e0a:	4699      	mov	r9, r3
 8005e0c:	688a      	ldr	r2, [r1, #8]
 8005e0e:	690b      	ldr	r3, [r1, #16]
 8005e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e14:	4293      	cmp	r3, r2
 8005e16:	bfb8      	it	lt
 8005e18:	4613      	movlt	r3, r2
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e20:	4607      	mov	r7, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	b10a      	cbz	r2, 8005e2a <_printf_common+0x26>
 8005e26:	3301      	adds	r3, #1
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	0699      	lsls	r1, r3, #26
 8005e2e:	bf42      	ittt	mi
 8005e30:	6833      	ldrmi	r3, [r6, #0]
 8005e32:	3302      	addmi	r3, #2
 8005e34:	6033      	strmi	r3, [r6, #0]
 8005e36:	6825      	ldr	r5, [r4, #0]
 8005e38:	f015 0506 	ands.w	r5, r5, #6
 8005e3c:	d106      	bne.n	8005e4c <_printf_common+0x48>
 8005e3e:	f104 0a19 	add.w	sl, r4, #25
 8005e42:	68e3      	ldr	r3, [r4, #12]
 8005e44:	6832      	ldr	r2, [r6, #0]
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	dc26      	bgt.n	8005e9a <_printf_common+0x96>
 8005e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e50:	1e13      	subs	r3, r2, #0
 8005e52:	6822      	ldr	r2, [r4, #0]
 8005e54:	bf18      	it	ne
 8005e56:	2301      	movne	r3, #1
 8005e58:	0692      	lsls	r2, r2, #26
 8005e5a:	d42b      	bmi.n	8005eb4 <_printf_common+0xb0>
 8005e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e60:	4649      	mov	r1, r9
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c0      	blx	r8
 8005e66:	3001      	adds	r0, #1
 8005e68:	d01e      	beq.n	8005ea8 <_printf_common+0xa4>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	68e5      	ldr	r5, [r4, #12]
 8005e6e:	6832      	ldr	r2, [r6, #0]
 8005e70:	f003 0306 	and.w	r3, r3, #6
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	bf08      	it	eq
 8005e78:	1aad      	subeq	r5, r5, r2
 8005e7a:	68a3      	ldr	r3, [r4, #8]
 8005e7c:	6922      	ldr	r2, [r4, #16]
 8005e7e:	bf0c      	ite	eq
 8005e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e84:	2500      	movne	r5, #0
 8005e86:	4293      	cmp	r3, r2
 8005e88:	bfc4      	itt	gt
 8005e8a:	1a9b      	subgt	r3, r3, r2
 8005e8c:	18ed      	addgt	r5, r5, r3
 8005e8e:	2600      	movs	r6, #0
 8005e90:	341a      	adds	r4, #26
 8005e92:	42b5      	cmp	r5, r6
 8005e94:	d11a      	bne.n	8005ecc <_printf_common+0xc8>
 8005e96:	2000      	movs	r0, #0
 8005e98:	e008      	b.n	8005eac <_printf_common+0xa8>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4652      	mov	r2, sl
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	47c0      	blx	r8
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d103      	bne.n	8005eb0 <_printf_common+0xac>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb0:	3501      	adds	r5, #1
 8005eb2:	e7c6      	b.n	8005e42 <_printf_common+0x3e>
 8005eb4:	18e1      	adds	r1, r4, r3
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	2030      	movs	r0, #48	; 0x30
 8005eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ebe:	4422      	add	r2, r4
 8005ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ec8:	3302      	adds	r3, #2
 8005eca:	e7c7      	b.n	8005e5c <_printf_common+0x58>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4622      	mov	r2, r4
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	47c0      	blx	r8
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d0e6      	beq.n	8005ea8 <_printf_common+0xa4>
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7d9      	b.n	8005e92 <_printf_common+0x8e>
	...

08005ee0 <_printf_i>:
 8005ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	4691      	mov	r9, r2
 8005ee8:	7e27      	ldrb	r7, [r4, #24]
 8005eea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005eec:	2f78      	cmp	r7, #120	; 0x78
 8005eee:	4680      	mov	r8, r0
 8005ef0:	469a      	mov	sl, r3
 8005ef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef6:	d807      	bhi.n	8005f08 <_printf_i+0x28>
 8005ef8:	2f62      	cmp	r7, #98	; 0x62
 8005efa:	d80a      	bhi.n	8005f12 <_printf_i+0x32>
 8005efc:	2f00      	cmp	r7, #0
 8005efe:	f000 80d8 	beq.w	80060b2 <_printf_i+0x1d2>
 8005f02:	2f58      	cmp	r7, #88	; 0x58
 8005f04:	f000 80a3 	beq.w	800604e <_printf_i+0x16e>
 8005f08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f10:	e03a      	b.n	8005f88 <_printf_i+0xa8>
 8005f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f16:	2b15      	cmp	r3, #21
 8005f18:	d8f6      	bhi.n	8005f08 <_printf_i+0x28>
 8005f1a:	a001      	add	r0, pc, #4	; (adr r0, 8005f20 <_printf_i+0x40>)
 8005f1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f20:	08005f79 	.word	0x08005f79
 8005f24:	08005f8d 	.word	0x08005f8d
 8005f28:	08005f09 	.word	0x08005f09
 8005f2c:	08005f09 	.word	0x08005f09
 8005f30:	08005f09 	.word	0x08005f09
 8005f34:	08005f09 	.word	0x08005f09
 8005f38:	08005f8d 	.word	0x08005f8d
 8005f3c:	08005f09 	.word	0x08005f09
 8005f40:	08005f09 	.word	0x08005f09
 8005f44:	08005f09 	.word	0x08005f09
 8005f48:	08005f09 	.word	0x08005f09
 8005f4c:	08006099 	.word	0x08006099
 8005f50:	08005fbd 	.word	0x08005fbd
 8005f54:	0800607b 	.word	0x0800607b
 8005f58:	08005f09 	.word	0x08005f09
 8005f5c:	08005f09 	.word	0x08005f09
 8005f60:	080060bb 	.word	0x080060bb
 8005f64:	08005f09 	.word	0x08005f09
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08005f09 	.word	0x08005f09
 8005f70:	08005f09 	.word	0x08005f09
 8005f74:	08006083 	.word	0x08006083
 8005f78:	680b      	ldr	r3, [r1, #0]
 8005f7a:	1d1a      	adds	r2, r3, #4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	600a      	str	r2, [r1, #0]
 8005f80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0a3      	b.n	80060d4 <_printf_i+0x1f4>
 8005f8c:	6825      	ldr	r5, [r4, #0]
 8005f8e:	6808      	ldr	r0, [r1, #0]
 8005f90:	062e      	lsls	r6, r5, #24
 8005f92:	f100 0304 	add.w	r3, r0, #4
 8005f96:	d50a      	bpl.n	8005fae <_printf_i+0xce>
 8005f98:	6805      	ldr	r5, [r0, #0]
 8005f9a:	600b      	str	r3, [r1, #0]
 8005f9c:	2d00      	cmp	r5, #0
 8005f9e:	da03      	bge.n	8005fa8 <_printf_i+0xc8>
 8005fa0:	232d      	movs	r3, #45	; 0x2d
 8005fa2:	426d      	negs	r5, r5
 8005fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa8:	485e      	ldr	r0, [pc, #376]	; (8006124 <_printf_i+0x244>)
 8005faa:	230a      	movs	r3, #10
 8005fac:	e019      	b.n	8005fe2 <_printf_i+0x102>
 8005fae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fb2:	6805      	ldr	r5, [r0, #0]
 8005fb4:	600b      	str	r3, [r1, #0]
 8005fb6:	bf18      	it	ne
 8005fb8:	b22d      	sxthne	r5, r5
 8005fba:	e7ef      	b.n	8005f9c <_printf_i+0xbc>
 8005fbc:	680b      	ldr	r3, [r1, #0]
 8005fbe:	6825      	ldr	r5, [r4, #0]
 8005fc0:	1d18      	adds	r0, r3, #4
 8005fc2:	6008      	str	r0, [r1, #0]
 8005fc4:	0628      	lsls	r0, r5, #24
 8005fc6:	d501      	bpl.n	8005fcc <_printf_i+0xec>
 8005fc8:	681d      	ldr	r5, [r3, #0]
 8005fca:	e002      	b.n	8005fd2 <_printf_i+0xf2>
 8005fcc:	0669      	lsls	r1, r5, #25
 8005fce:	d5fb      	bpl.n	8005fc8 <_printf_i+0xe8>
 8005fd0:	881d      	ldrh	r5, [r3, #0]
 8005fd2:	4854      	ldr	r0, [pc, #336]	; (8006124 <_printf_i+0x244>)
 8005fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2308      	moveq	r3, #8
 8005fda:	230a      	movne	r3, #10
 8005fdc:	2100      	movs	r1, #0
 8005fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fe2:	6866      	ldr	r6, [r4, #4]
 8005fe4:	60a6      	str	r6, [r4, #8]
 8005fe6:	2e00      	cmp	r6, #0
 8005fe8:	bfa2      	ittt	ge
 8005fea:	6821      	ldrge	r1, [r4, #0]
 8005fec:	f021 0104 	bicge.w	r1, r1, #4
 8005ff0:	6021      	strge	r1, [r4, #0]
 8005ff2:	b90d      	cbnz	r5, 8005ff8 <_printf_i+0x118>
 8005ff4:	2e00      	cmp	r6, #0
 8005ff6:	d04d      	beq.n	8006094 <_printf_i+0x1b4>
 8005ff8:	4616      	mov	r6, r2
 8005ffa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ffe:	fb03 5711 	mls	r7, r3, r1, r5
 8006002:	5dc7      	ldrb	r7, [r0, r7]
 8006004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006008:	462f      	mov	r7, r5
 800600a:	42bb      	cmp	r3, r7
 800600c:	460d      	mov	r5, r1
 800600e:	d9f4      	bls.n	8005ffa <_printf_i+0x11a>
 8006010:	2b08      	cmp	r3, #8
 8006012:	d10b      	bne.n	800602c <_printf_i+0x14c>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	07df      	lsls	r7, r3, #31
 8006018:	d508      	bpl.n	800602c <_printf_i+0x14c>
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	6861      	ldr	r1, [r4, #4]
 800601e:	4299      	cmp	r1, r3
 8006020:	bfde      	ittt	le
 8006022:	2330      	movle	r3, #48	; 0x30
 8006024:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006028:	f106 36ff 	addle.w	r6, r6, #4294967295
 800602c:	1b92      	subs	r2, r2, r6
 800602e:	6122      	str	r2, [r4, #16]
 8006030:	f8cd a000 	str.w	sl, [sp]
 8006034:	464b      	mov	r3, r9
 8006036:	aa03      	add	r2, sp, #12
 8006038:	4621      	mov	r1, r4
 800603a:	4640      	mov	r0, r8
 800603c:	f7ff fee2 	bl	8005e04 <_printf_common>
 8006040:	3001      	adds	r0, #1
 8006042:	d14c      	bne.n	80060de <_printf_i+0x1fe>
 8006044:	f04f 30ff 	mov.w	r0, #4294967295
 8006048:	b004      	add	sp, #16
 800604a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604e:	4835      	ldr	r0, [pc, #212]	; (8006124 <_printf_i+0x244>)
 8006050:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	680e      	ldr	r6, [r1, #0]
 8006058:	061f      	lsls	r7, r3, #24
 800605a:	f856 5b04 	ldr.w	r5, [r6], #4
 800605e:	600e      	str	r6, [r1, #0]
 8006060:	d514      	bpl.n	800608c <_printf_i+0x1ac>
 8006062:	07d9      	lsls	r1, r3, #31
 8006064:	bf44      	itt	mi
 8006066:	f043 0320 	orrmi.w	r3, r3, #32
 800606a:	6023      	strmi	r3, [r4, #0]
 800606c:	b91d      	cbnz	r5, 8006076 <_printf_i+0x196>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	f023 0320 	bic.w	r3, r3, #32
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	2310      	movs	r3, #16
 8006078:	e7b0      	b.n	8005fdc <_printf_i+0xfc>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	f043 0320 	orr.w	r3, r3, #32
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	2378      	movs	r3, #120	; 0x78
 8006084:	4828      	ldr	r0, [pc, #160]	; (8006128 <_printf_i+0x248>)
 8006086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800608a:	e7e3      	b.n	8006054 <_printf_i+0x174>
 800608c:	065e      	lsls	r6, r3, #25
 800608e:	bf48      	it	mi
 8006090:	b2ad      	uxthmi	r5, r5
 8006092:	e7e6      	b.n	8006062 <_printf_i+0x182>
 8006094:	4616      	mov	r6, r2
 8006096:	e7bb      	b.n	8006010 <_printf_i+0x130>
 8006098:	680b      	ldr	r3, [r1, #0]
 800609a:	6826      	ldr	r6, [r4, #0]
 800609c:	6960      	ldr	r0, [r4, #20]
 800609e:	1d1d      	adds	r5, r3, #4
 80060a0:	600d      	str	r5, [r1, #0]
 80060a2:	0635      	lsls	r5, r6, #24
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	d501      	bpl.n	80060ac <_printf_i+0x1cc>
 80060a8:	6018      	str	r0, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <_printf_i+0x1d2>
 80060ac:	0671      	lsls	r1, r6, #25
 80060ae:	d5fb      	bpl.n	80060a8 <_printf_i+0x1c8>
 80060b0:	8018      	strh	r0, [r3, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	4616      	mov	r6, r2
 80060b8:	e7ba      	b.n	8006030 <_printf_i+0x150>
 80060ba:	680b      	ldr	r3, [r1, #0]
 80060bc:	1d1a      	adds	r2, r3, #4
 80060be:	600a      	str	r2, [r1, #0]
 80060c0:	681e      	ldr	r6, [r3, #0]
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	2100      	movs	r1, #0
 80060c6:	4630      	mov	r0, r6
 80060c8:	f7fa f88a 	bl	80001e0 <memchr>
 80060cc:	b108      	cbz	r0, 80060d2 <_printf_i+0x1f2>
 80060ce:	1b80      	subs	r0, r0, r6
 80060d0:	6060      	str	r0, [r4, #4]
 80060d2:	6863      	ldr	r3, [r4, #4]
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	2300      	movs	r3, #0
 80060d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060dc:	e7a8      	b.n	8006030 <_printf_i+0x150>
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	4632      	mov	r2, r6
 80060e2:	4649      	mov	r1, r9
 80060e4:	4640      	mov	r0, r8
 80060e6:	47d0      	blx	sl
 80060e8:	3001      	adds	r0, #1
 80060ea:	d0ab      	beq.n	8006044 <_printf_i+0x164>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	079b      	lsls	r3, r3, #30
 80060f0:	d413      	bmi.n	800611a <_printf_i+0x23a>
 80060f2:	68e0      	ldr	r0, [r4, #12]
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	4298      	cmp	r0, r3
 80060f8:	bfb8      	it	lt
 80060fa:	4618      	movlt	r0, r3
 80060fc:	e7a4      	b.n	8006048 <_printf_i+0x168>
 80060fe:	2301      	movs	r3, #1
 8006100:	4632      	mov	r2, r6
 8006102:	4649      	mov	r1, r9
 8006104:	4640      	mov	r0, r8
 8006106:	47d0      	blx	sl
 8006108:	3001      	adds	r0, #1
 800610a:	d09b      	beq.n	8006044 <_printf_i+0x164>
 800610c:	3501      	adds	r5, #1
 800610e:	68e3      	ldr	r3, [r4, #12]
 8006110:	9903      	ldr	r1, [sp, #12]
 8006112:	1a5b      	subs	r3, r3, r1
 8006114:	42ab      	cmp	r3, r5
 8006116:	dcf2      	bgt.n	80060fe <_printf_i+0x21e>
 8006118:	e7eb      	b.n	80060f2 <_printf_i+0x212>
 800611a:	2500      	movs	r5, #0
 800611c:	f104 0619 	add.w	r6, r4, #25
 8006120:	e7f5      	b.n	800610e <_printf_i+0x22e>
 8006122:	bf00      	nop
 8006124:	0800658d 	.word	0x0800658d
 8006128:	0800659e 	.word	0x0800659e

0800612c <memcpy>:
 800612c:	440a      	add	r2, r1
 800612e:	4291      	cmp	r1, r2
 8006130:	f100 33ff 	add.w	r3, r0, #4294967295
 8006134:	d100      	bne.n	8006138 <memcpy+0xc>
 8006136:	4770      	bx	lr
 8006138:	b510      	push	{r4, lr}
 800613a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006142:	4291      	cmp	r1, r2
 8006144:	d1f9      	bne.n	800613a <memcpy+0xe>
 8006146:	bd10      	pop	{r4, pc}

08006148 <memmove>:
 8006148:	4288      	cmp	r0, r1
 800614a:	b510      	push	{r4, lr}
 800614c:	eb01 0402 	add.w	r4, r1, r2
 8006150:	d902      	bls.n	8006158 <memmove+0x10>
 8006152:	4284      	cmp	r4, r0
 8006154:	4623      	mov	r3, r4
 8006156:	d807      	bhi.n	8006168 <memmove+0x20>
 8006158:	1e43      	subs	r3, r0, #1
 800615a:	42a1      	cmp	r1, r4
 800615c:	d008      	beq.n	8006170 <memmove+0x28>
 800615e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006166:	e7f8      	b.n	800615a <memmove+0x12>
 8006168:	4402      	add	r2, r0
 800616a:	4601      	mov	r1, r0
 800616c:	428a      	cmp	r2, r1
 800616e:	d100      	bne.n	8006172 <memmove+0x2a>
 8006170:	bd10      	pop	{r4, pc}
 8006172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800617a:	e7f7      	b.n	800616c <memmove+0x24>

0800617c <_free_r>:
 800617c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800617e:	2900      	cmp	r1, #0
 8006180:	d048      	beq.n	8006214 <_free_r+0x98>
 8006182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006186:	9001      	str	r0, [sp, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f1a1 0404 	sub.w	r4, r1, #4
 800618e:	bfb8      	it	lt
 8006190:	18e4      	addlt	r4, r4, r3
 8006192:	f000 f8d3 	bl	800633c <__malloc_lock>
 8006196:	4a20      	ldr	r2, [pc, #128]	; (8006218 <_free_r+0x9c>)
 8006198:	9801      	ldr	r0, [sp, #4]
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	4615      	mov	r5, r2
 800619e:	b933      	cbnz	r3, 80061ae <_free_r+0x32>
 80061a0:	6063      	str	r3, [r4, #4]
 80061a2:	6014      	str	r4, [r2, #0]
 80061a4:	b003      	add	sp, #12
 80061a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061aa:	f000 b8cd 	b.w	8006348 <__malloc_unlock>
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	d90b      	bls.n	80061ca <_free_r+0x4e>
 80061b2:	6821      	ldr	r1, [r4, #0]
 80061b4:	1862      	adds	r2, r4, r1
 80061b6:	4293      	cmp	r3, r2
 80061b8:	bf04      	itt	eq
 80061ba:	681a      	ldreq	r2, [r3, #0]
 80061bc:	685b      	ldreq	r3, [r3, #4]
 80061be:	6063      	str	r3, [r4, #4]
 80061c0:	bf04      	itt	eq
 80061c2:	1852      	addeq	r2, r2, r1
 80061c4:	6022      	streq	r2, [r4, #0]
 80061c6:	602c      	str	r4, [r5, #0]
 80061c8:	e7ec      	b.n	80061a4 <_free_r+0x28>
 80061ca:	461a      	mov	r2, r3
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	b10b      	cbz	r3, 80061d4 <_free_r+0x58>
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	d9fa      	bls.n	80061ca <_free_r+0x4e>
 80061d4:	6811      	ldr	r1, [r2, #0]
 80061d6:	1855      	adds	r5, r2, r1
 80061d8:	42a5      	cmp	r5, r4
 80061da:	d10b      	bne.n	80061f4 <_free_r+0x78>
 80061dc:	6824      	ldr	r4, [r4, #0]
 80061de:	4421      	add	r1, r4
 80061e0:	1854      	adds	r4, r2, r1
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	d1dd      	bne.n	80061a4 <_free_r+0x28>
 80061e8:	681c      	ldr	r4, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	6053      	str	r3, [r2, #4]
 80061ee:	4421      	add	r1, r4
 80061f0:	6011      	str	r1, [r2, #0]
 80061f2:	e7d7      	b.n	80061a4 <_free_r+0x28>
 80061f4:	d902      	bls.n	80061fc <_free_r+0x80>
 80061f6:	230c      	movs	r3, #12
 80061f8:	6003      	str	r3, [r0, #0]
 80061fa:	e7d3      	b.n	80061a4 <_free_r+0x28>
 80061fc:	6825      	ldr	r5, [r4, #0]
 80061fe:	1961      	adds	r1, r4, r5
 8006200:	428b      	cmp	r3, r1
 8006202:	bf04      	itt	eq
 8006204:	6819      	ldreq	r1, [r3, #0]
 8006206:	685b      	ldreq	r3, [r3, #4]
 8006208:	6063      	str	r3, [r4, #4]
 800620a:	bf04      	itt	eq
 800620c:	1949      	addeq	r1, r1, r5
 800620e:	6021      	streq	r1, [r4, #0]
 8006210:	6054      	str	r4, [r2, #4]
 8006212:	e7c7      	b.n	80061a4 <_free_r+0x28>
 8006214:	b003      	add	sp, #12
 8006216:	bd30      	pop	{r4, r5, pc}
 8006218:	20000098 	.word	0x20000098

0800621c <_malloc_r>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	1ccd      	adds	r5, r1, #3
 8006220:	f025 0503 	bic.w	r5, r5, #3
 8006224:	3508      	adds	r5, #8
 8006226:	2d0c      	cmp	r5, #12
 8006228:	bf38      	it	cc
 800622a:	250c      	movcc	r5, #12
 800622c:	2d00      	cmp	r5, #0
 800622e:	4606      	mov	r6, r0
 8006230:	db01      	blt.n	8006236 <_malloc_r+0x1a>
 8006232:	42a9      	cmp	r1, r5
 8006234:	d903      	bls.n	800623e <_malloc_r+0x22>
 8006236:	230c      	movs	r3, #12
 8006238:	6033      	str	r3, [r6, #0]
 800623a:	2000      	movs	r0, #0
 800623c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800623e:	f000 f87d 	bl	800633c <__malloc_lock>
 8006242:	4921      	ldr	r1, [pc, #132]	; (80062c8 <_malloc_r+0xac>)
 8006244:	680a      	ldr	r2, [r1, #0]
 8006246:	4614      	mov	r4, r2
 8006248:	b99c      	cbnz	r4, 8006272 <_malloc_r+0x56>
 800624a:	4f20      	ldr	r7, [pc, #128]	; (80062cc <_malloc_r+0xb0>)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	b923      	cbnz	r3, 800625a <_malloc_r+0x3e>
 8006250:	4621      	mov	r1, r4
 8006252:	4630      	mov	r0, r6
 8006254:	f000 f862 	bl	800631c <_sbrk_r>
 8006258:	6038      	str	r0, [r7, #0]
 800625a:	4629      	mov	r1, r5
 800625c:	4630      	mov	r0, r6
 800625e:	f000 f85d 	bl	800631c <_sbrk_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d123      	bne.n	80062ae <_malloc_r+0x92>
 8006266:	230c      	movs	r3, #12
 8006268:	6033      	str	r3, [r6, #0]
 800626a:	4630      	mov	r0, r6
 800626c:	f000 f86c 	bl	8006348 <__malloc_unlock>
 8006270:	e7e3      	b.n	800623a <_malloc_r+0x1e>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	1b5b      	subs	r3, r3, r5
 8006276:	d417      	bmi.n	80062a8 <_malloc_r+0x8c>
 8006278:	2b0b      	cmp	r3, #11
 800627a:	d903      	bls.n	8006284 <_malloc_r+0x68>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	441c      	add	r4, r3
 8006280:	6025      	str	r5, [r4, #0]
 8006282:	e004      	b.n	800628e <_malloc_r+0x72>
 8006284:	6863      	ldr	r3, [r4, #4]
 8006286:	42a2      	cmp	r2, r4
 8006288:	bf0c      	ite	eq
 800628a:	600b      	streq	r3, [r1, #0]
 800628c:	6053      	strne	r3, [r2, #4]
 800628e:	4630      	mov	r0, r6
 8006290:	f000 f85a 	bl	8006348 <__malloc_unlock>
 8006294:	f104 000b 	add.w	r0, r4, #11
 8006298:	1d23      	adds	r3, r4, #4
 800629a:	f020 0007 	bic.w	r0, r0, #7
 800629e:	1ac2      	subs	r2, r0, r3
 80062a0:	d0cc      	beq.n	800623c <_malloc_r+0x20>
 80062a2:	1a1b      	subs	r3, r3, r0
 80062a4:	50a3      	str	r3, [r4, r2]
 80062a6:	e7c9      	b.n	800623c <_malloc_r+0x20>
 80062a8:	4622      	mov	r2, r4
 80062aa:	6864      	ldr	r4, [r4, #4]
 80062ac:	e7cc      	b.n	8006248 <_malloc_r+0x2c>
 80062ae:	1cc4      	adds	r4, r0, #3
 80062b0:	f024 0403 	bic.w	r4, r4, #3
 80062b4:	42a0      	cmp	r0, r4
 80062b6:	d0e3      	beq.n	8006280 <_malloc_r+0x64>
 80062b8:	1a21      	subs	r1, r4, r0
 80062ba:	4630      	mov	r0, r6
 80062bc:	f000 f82e 	bl	800631c <_sbrk_r>
 80062c0:	3001      	adds	r0, #1
 80062c2:	d1dd      	bne.n	8006280 <_malloc_r+0x64>
 80062c4:	e7cf      	b.n	8006266 <_malloc_r+0x4a>
 80062c6:	bf00      	nop
 80062c8:	20000098 	.word	0x20000098
 80062cc:	2000009c 	.word	0x2000009c

080062d0 <_realloc_r>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	4607      	mov	r7, r0
 80062d4:	4614      	mov	r4, r2
 80062d6:	460e      	mov	r6, r1
 80062d8:	b921      	cbnz	r1, 80062e4 <_realloc_r+0x14>
 80062da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062de:	4611      	mov	r1, r2
 80062e0:	f7ff bf9c 	b.w	800621c <_malloc_r>
 80062e4:	b922      	cbnz	r2, 80062f0 <_realloc_r+0x20>
 80062e6:	f7ff ff49 	bl	800617c <_free_r>
 80062ea:	4625      	mov	r5, r4
 80062ec:	4628      	mov	r0, r5
 80062ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f0:	f000 f830 	bl	8006354 <_malloc_usable_size_r>
 80062f4:	42a0      	cmp	r0, r4
 80062f6:	d20f      	bcs.n	8006318 <_realloc_r+0x48>
 80062f8:	4621      	mov	r1, r4
 80062fa:	4638      	mov	r0, r7
 80062fc:	f7ff ff8e 	bl	800621c <_malloc_r>
 8006300:	4605      	mov	r5, r0
 8006302:	2800      	cmp	r0, #0
 8006304:	d0f2      	beq.n	80062ec <_realloc_r+0x1c>
 8006306:	4631      	mov	r1, r6
 8006308:	4622      	mov	r2, r4
 800630a:	f7ff ff0f 	bl	800612c <memcpy>
 800630e:	4631      	mov	r1, r6
 8006310:	4638      	mov	r0, r7
 8006312:	f7ff ff33 	bl	800617c <_free_r>
 8006316:	e7e9      	b.n	80062ec <_realloc_r+0x1c>
 8006318:	4635      	mov	r5, r6
 800631a:	e7e7      	b.n	80062ec <_realloc_r+0x1c>

0800631c <_sbrk_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d06      	ldr	r5, [pc, #24]	; (8006338 <_sbrk_r+0x1c>)
 8006320:	2300      	movs	r3, #0
 8006322:	4604      	mov	r4, r0
 8006324:	4608      	mov	r0, r1
 8006326:	602b      	str	r3, [r5, #0]
 8006328:	f7fb f964 	bl	80015f4 <_sbrk>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d102      	bne.n	8006336 <_sbrk_r+0x1a>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	b103      	cbz	r3, 8006336 <_sbrk_r+0x1a>
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	2000020c 	.word	0x2000020c

0800633c <__malloc_lock>:
 800633c:	4801      	ldr	r0, [pc, #4]	; (8006344 <__malloc_lock+0x8>)
 800633e:	f000 b811 	b.w	8006364 <__retarget_lock_acquire_recursive>
 8006342:	bf00      	nop
 8006344:	20000214 	.word	0x20000214

08006348 <__malloc_unlock>:
 8006348:	4801      	ldr	r0, [pc, #4]	; (8006350 <__malloc_unlock+0x8>)
 800634a:	f000 b80c 	b.w	8006366 <__retarget_lock_release_recursive>
 800634e:	bf00      	nop
 8006350:	20000214 	.word	0x20000214

08006354 <_malloc_usable_size_r>:
 8006354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006358:	1f18      	subs	r0, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	bfbc      	itt	lt
 800635e:	580b      	ldrlt	r3, [r1, r0]
 8006360:	18c0      	addlt	r0, r0, r3
 8006362:	4770      	bx	lr

08006364 <__retarget_lock_acquire_recursive>:
 8006364:	4770      	bx	lr

08006366 <__retarget_lock_release_recursive>:
 8006366:	4770      	bx	lr

08006368 <_init>:
 8006368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636a:	bf00      	nop
 800636c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636e:	bc08      	pop	{r3}
 8006370:	469e      	mov	lr, r3
 8006372:	4770      	bx	lr

08006374 <_fini>:
 8006374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006376:	bf00      	nop
 8006378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637a:	bc08      	pop	{r3}
 800637c:	469e      	mov	lr, r3
 800637e:	4770      	bx	lr
