
UCSD-Embedded-Controller-Programming-For-RTS-2-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000543c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080055cc  080055cc  000155cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005790  08005790  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005798  08005798  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080057a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000074  08005814  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  08005814  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bbc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e21  00000000  00000000  00038c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0003ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0003cfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280ae  00000000  00000000  0003e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d9f  00000000  00000000  000664be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f37a1  00000000  00000000  0007d25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001709fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f4c  00000000  00000000  00170a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055b4 	.word	0x080055b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080055b4 	.word	0x080055b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <logMsg>:
//uint32_t uartTimeout = HAL_MAX_DELAY;
uint16_t ledDelay = 1000;       // Default delay for LED toggle

// logMsg function prints a string, _out, to the console over the specified UART
void logMsg(UART_HandleTypeDef *huart, char* _out)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09c      	sub	sp, #112	; 0x70
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
	char buffer[100] = {0};		// Large char buffer for string printing
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	2260      	movs	r2, #96	; 0x60
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fbb6 	bl	8004d20 <memset>
    snprintf(buffer, sizeof(buffer), "%s\n", _out);
 80005b4:	f107 000c 	add.w	r0, r7, #12
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <logMsg+0x50>)
 80005bc:	2164      	movs	r1, #100	; 0x64
 80005be:	f004 fbb7 	bl	8004d30 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), uartTimeout);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe0c 	bl	80001e4 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <logMsg+0x54>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f107 010c 	add.w	r1, r7, #12
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <logMsg+0x58>)
 80005da:	f003 fbb8 	bl	8003d4e <HAL_UART_Transmit>
}
 80005de:	bf00      	nop
 80005e0:	3770      	adds	r7, #112	; 0x70
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	080055cc 	.word	0x080055cc
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000638 	.word	0x20000638

080005f4 <logGetMsg>:

// logMsg function returns a char, c, over the specified UART
char logGetMsg(UART_HandleTypeDef *huart)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    char c = '\0';				// Set default return value to NULL
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Receive(huart, (uint8_t*) &c, 1, uartTimeout);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <logGetMsg+0x28>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f107 010f 	add.w	r1, r7, #15
 8000608:	2201      	movs	r2, #1
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f003 fc33 	bl	8003e76 <HAL_UART_Receive>
    return c;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval intgg
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 ff84 	bl	8001532 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f8c1 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 facb 	bl	8000bc8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000632:	f000 f961 	bl	80008f8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000636:	f000 f997 	bl	8000968 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800063a:	f000 f9d3 	bl	80009e4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800063e:	f000 f9f7 	bl	8000a30 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000642:	f000 fa33 	bl	8000aac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000646:	f000 fa61 	bl	8000b0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800064a:	f000 fa8f 	bl	8000b6c <MX_USB_OTG_FS_PCD_Init>


  /* USER CODE BEGIN 2 */

  logMsg(&huart1, "Welcome to Embedded controller programming");
 800064e:	4947      	ldr	r1, [pc, #284]	; (800076c <main+0x14c>)
 8000650:	4847      	ldr	r0, [pc, #284]	; (8000770 <main+0x150>)
 8000652:	f7ff ffa1 	bl	8000598 <logMsg>
  logMsg(&huart1, " - Enter g for toggling Green LED");
 8000656:	4947      	ldr	r1, [pc, #284]	; (8000774 <main+0x154>)
 8000658:	4845      	ldr	r0, [pc, #276]	; (8000770 <main+0x150>)
 800065a:	f7ff ff9d 	bl	8000598 <logMsg>
  logMsg(&huart1, " - Enter b for toggling Blue LED");
 800065e:	4946      	ldr	r1, [pc, #280]	; (8000778 <main+0x158>)
 8000660:	4843      	ldr	r0, [pc, #268]	; (8000770 <main+0x150>)
 8000662:	f7ff ff99 	bl	8000598 <logMsg>
  logMsg(&huart1, " - Enter t to change timeout value to 1ms");
 8000666:	4945      	ldr	r1, [pc, #276]	; (800077c <main+0x15c>)
 8000668:	4841      	ldr	r0, [pc, #260]	; (8000770 <main+0x150>)
 800066a:	f7ff ff95 	bl	8000598 <logMsg>
  logMsg(&huart1, " - Enter d to alternate LED delay value between 10ms and 1000ms");
 800066e:	4944      	ldr	r1, [pc, #272]	; (8000780 <main+0x160>)
 8000670:	483f      	ldr	r0, [pc, #252]	; (8000770 <main+0x150>)
 8000672:	f7ff ff91 	bl	8000598 <logMsg>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

	    // Define an input char with default value of NULL.
		char input = '\0';
 8000676:	2300      	movs	r3, #0
 8000678:	71fb      	strb	r3, [r7, #7]
		input = logGetMsg(&huart1);
 800067a:	483d      	ldr	r0, [pc, #244]	; (8000770 <main+0x150>)
 800067c:	f7ff ffba 	bl	80005f4 <logGetMsg>
 8000680:	4603      	mov	r3, r0
 8000682:	71fb      	strb	r3, [r7, #7]

		// Evaluate input char and loop till we get a non-NULL value in the UART RX data buffer
		while (input != '\0')
 8000684:	bf00      	nop
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0f4      	beq.n	8000676 <main+0x56>
		{
			// Print received char, toggle green LED, loiter for ledDelay ms
			if ((strcmp(&input, "g")) == 0)
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	493d      	ldr	r1, [pc, #244]	; (8000784 <main+0x164>)
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fd9d 	bl	80001d0 <strcmp>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10f      	bne.n	80006bc <main+0x9c>
			{
				logMsg(&huart1, &input);
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	4619      	mov	r1, r3
 80006a0:	4833      	ldr	r0, [pc, #204]	; (8000770 <main+0x150>)
 80006a2:	f7ff ff79 	bl	8000598 <logMsg>
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80006a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006aa:	4837      	ldr	r0, [pc, #220]	; (8000788 <main+0x168>)
 80006ac:	f001 fbba 	bl	8001e24 <HAL_GPIO_TogglePin>
				HAL_Delay(ledDelay);
 80006b0:	4b36      	ldr	r3, [pc, #216]	; (800078c <main+0x16c>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 ffb1 	bl	800161c <HAL_Delay>
				break;
 80006ba:	e055      	b.n	8000768 <main+0x148>
			}
			// Print received char, toggle blue LED, loiter for ledDelay ms
			else if (strcmp(&input, "b") == 0)
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	4934      	ldr	r1, [pc, #208]	; (8000790 <main+0x170>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fd85 	bl	80001d0 <strcmp>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10f      	bne.n	80006ec <main+0xcc>
			{
				logMsg(&huart1, &input);
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4827      	ldr	r0, [pc, #156]	; (8000770 <main+0x150>)
 80006d2:	f7ff ff61 	bl	8000598 <logMsg>
				HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 80006d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006da:	482e      	ldr	r0, [pc, #184]	; (8000794 <main+0x174>)
 80006dc:	f001 fba2 	bl	8001e24 <HAL_GPIO_TogglePin>
				HAL_Delay(ledDelay);
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <main+0x16c>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 ff99 	bl	800161c <HAL_Delay>
				break;
 80006ea:	e03d      	b.n	8000768 <main+0x148>
			}
			// Print received char, change UART timeout to 1 ms
			else if (strcmp(&input, "t") == 0)
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	492a      	ldr	r1, [pc, #168]	; (8000798 <main+0x178>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd6d 	bl	80001d0 <strcmp>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d108      	bne.n	800070e <main+0xee>
			{
				logMsg(&huart1, &input);
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	4619      	mov	r1, r3
 8000700:	481b      	ldr	r0, [pc, #108]	; (8000770 <main+0x150>)
 8000702:	f7ff ff49 	bl	8000598 <logMsg>
				uartTimeout = 1;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <main+0x17c>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
				break;
 800070c:	e02c      	b.n	8000768 <main+0x148>
			}
			// Print received char, change ledDelay value, alternating between 1000ms and 10ms,
			// 	and print message indicating new ledDelay value
			else if (strcmp(&input, "d") == 0)
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	4923      	ldr	r1, [pc, #140]	; (80007a0 <main+0x180>)
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fd5c 	bl	80001d0 <strcmp>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d11e      	bne.n	800075c <main+0x13c>
			{
				logMsg(&huart1, &input);
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	4619      	mov	r1, r3
 8000722:	4813      	ldr	r0, [pc, #76]	; (8000770 <main+0x150>)
 8000724:	f7ff ff38 	bl	8000598 <logMsg>
				if (ledDelay == 1000)
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <main+0x16c>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000730:	d107      	bne.n	8000742 <main+0x122>
				{
					ledDelay = 10;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <main+0x16c>)
 8000734:	220a      	movs	r2, #10
 8000736:	801a      	strh	r2, [r3, #0]
					logMsg(&huart1, "LED delay set to 10ms\n");
 8000738:	491a      	ldr	r1, [pc, #104]	; (80007a4 <main+0x184>)
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <main+0x150>)
 800073c:	f7ff ff2c 	bl	8000598 <logMsg>
				else if (ledDelay == 10)
				{
					ledDelay = 1000;
					logMsg(&huart1, "LED delay set to 1000ms\n");
				}
				break;
 8000740:	e011      	b.n	8000766 <main+0x146>
				else if (ledDelay == 10)
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <main+0x16c>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	2b0a      	cmp	r3, #10
 8000748:	d10d      	bne.n	8000766 <main+0x146>
					ledDelay = 1000;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <main+0x16c>)
 800074c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000750:	801a      	strh	r2, [r3, #0]
					logMsg(&huart1, "LED delay set to 1000ms\n");
 8000752:	4915      	ldr	r1, [pc, #84]	; (80007a8 <main+0x188>)
 8000754:	4806      	ldr	r0, [pc, #24]	; (8000770 <main+0x150>)
 8000756:	f7ff ff1f 	bl	8000598 <logMsg>
				break;
 800075a:	e004      	b.n	8000766 <main+0x146>
			}
			// Default case. Print error message
			else
			{
				logMsg(&huart1, "Unknown character received!\n");
 800075c:	4913      	ldr	r1, [pc, #76]	; (80007ac <main+0x18c>)
 800075e:	4804      	ldr	r0, [pc, #16]	; (8000770 <main+0x150>)
 8000760:	f7ff ff1a 	bl	8000598 <logMsg>
				break;
 8000764:	e000      	b.n	8000768 <main+0x148>
				break;
 8000766:	bf00      	nop
  {
 8000768:	e785      	b.n	8000676 <main+0x56>
 800076a:	bf00      	nop
 800076c:	080055d0 	.word	0x080055d0
 8000770:	20000638 	.word	0x20000638
 8000774:	080055fc 	.word	0x080055fc
 8000778:	08005620 	.word	0x08005620
 800077c:	08005644 	.word	0x08005644
 8000780:	08005670 	.word	0x08005670
 8000784:	080056b0 	.word	0x080056b0
 8000788:	48000400 	.word	0x48000400
 800078c:	20000002 	.word	0x20000002
 8000790:	080056b4 	.word	0x080056b4
 8000794:	48000800 	.word	0x48000800
 8000798:	080056b8 	.word	0x080056b8
 800079c:	20000000 	.word	0x20000000
 80007a0:	080056bc 	.word	0x080056bc
 80007a4:	080056c0 	.word	0x080056c0
 80007a8:	080056d8 	.word	0x080056d8
 80007ac:	080056f4 	.word	0x080056f4

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0b8      	sub	sp, #224	; 0xe0
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ba:	2244      	movs	r2, #68	; 0x44
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 faae 	bl	8004d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2288      	movs	r2, #136	; 0x88
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 faa0 	bl	8004d20 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007e0:	f001 fdcc 	bl	800237c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007e4:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <SystemClock_Config+0x140>)
 80007e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ea:	4a41      	ldr	r2, [pc, #260]	; (80008f0 <SystemClock_Config+0x140>)
 80007ec:	f023 0318 	bic.w	r3, r3, #24
 80007f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007f4:	2314      	movs	r3, #20
 80007f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007fa:	2301      	movs	r3, #1
 80007fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000818:	2301      	movs	r3, #1
 800081a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000824:	2328      	movs	r3, #40	; 0x28
 8000826:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082a:	2307      	movs	r3, #7
 800082c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fedb 	bl	80025fc <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800084c:	f000 fb6c 	bl	8000f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2303      	movs	r3, #3
 8000858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800086e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000872:	2104      	movs	r1, #4
 8000874:	4618      	mov	r0, r3
 8000876:	f002 faa7 	bl	8002dc8 <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000880:	f000 fb52 	bl	8000f28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <SystemClock_Config+0x144>)
 8000886:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000888:	2300      	movs	r3, #0
 800088a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800088c:	2300      	movs	r3, #0
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000890:	2300      	movs	r3, #0
 8000892:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800089a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800089e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008a0:	2301      	movs	r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80008a8:	2318      	movs	r3, #24
 80008aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008ac:	2307      	movs	r3, #7
 80008ae:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80008b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008bc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fc87 	bl	80031d4 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80008cc:	f000 fb2c 	bl	8000f28 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008d4:	f001 fd70 	bl	80023b8 <HAL_PWREx_ControlVoltageScaling>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x132>
  {
    Error_Handler();
 80008de:	f000 fb23 	bl	8000f28 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008e2:	f002 ff61 	bl	80037a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008e6:	bf00      	nop
 80008e8:	37e0      	adds	r7, #224	; 0xe0
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000
 80008f4:	00012085 	.word	0x00012085

080008f8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_DFSDM1_Init+0x68>)
 80008fe:	4a19      	ldr	r2, [pc, #100]	; (8000964 <MX_DFSDM1_Init+0x6c>)
 8000900:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_DFSDM1_Init+0x68>)
 8000904:	2201      	movs	r2, #1
 8000906:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_DFSDM1_Init+0x68>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_DFSDM1_Init+0x68>)
 8000910:	2202      	movs	r2, #2
 8000912:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_DFSDM1_Init+0x68>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_DFSDM1_Init+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_DFSDM1_Init+0x68>)
 8000922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000926:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_DFSDM1_Init+0x68>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_DFSDM1_Init+0x68>)
 8000930:	2204      	movs	r2, #4
 8000932:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_DFSDM1_Init+0x68>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_DFSDM1_Init+0x68>)
 800093c:	2201      	movs	r2, #1
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_DFSDM1_Init+0x68>)
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_DFSDM1_Init+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_DFSDM1_Init+0x68>)
 800094e:	f000 ff9b 	bl	8001888 <HAL_DFSDM_ChannelInit>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000958:	f000 fae6 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000c4 	.word	0x200000c4
 8000964:	40016020 	.word	0x40016020

08000968 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_I2C2_Init+0x74>)
 800096e:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <MX_I2C2_Init+0x78>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_I2C2_Init+0x74>)
 8000974:	f640 6214 	movw	r2, #3604	; 0xe14
 8000978:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_I2C2_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_I2C2_Init+0x74>)
 8000982:	2201      	movs	r2, #1
 8000984:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_I2C2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_I2C2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_I2C2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_I2C2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_I2C2_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_I2C2_Init+0x74>)
 80009a6:	f001 fa7a 	bl	8001e9e <HAL_I2C_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 faba 	bl	8000f28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <MX_I2C2_Init+0x74>)
 80009b8:	f001 fb00 	bl	8001fbc <HAL_I2CEx_ConfigAnalogFilter>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80009c2:	f000 fab1 	bl	8000f28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_I2C2_Init+0x74>)
 80009ca:	f001 fb42 	bl	8002052 <HAL_I2CEx_ConfigDigitalFilter>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80009d4:	f000 faa8 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000588 	.word	0x20000588
 80009e0:	40005800 	.word	0x40005800

080009e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <MX_QUADSPI_Init+0x48>)
 80009ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009fc:	2210      	movs	r2, #16
 80009fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a02:	2217      	movs	r2, #23
 8000a04:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a14:	f001 fd36 	bl	8002484 <HAL_QSPI_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a1e:	f000 fa83 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200006bc 	.word	0x200006bc
 8000a2c:	a0001000 	.word	0xa0001000

08000a30 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <MX_SPI3_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a4a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a4e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a62:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a7e:	2207      	movs	r2, #7
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a90:	f003 f86c 	bl	8003b6c <HAL_SPI_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 fa45 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200005d4 	.word	0x200005d4
 8000aa8:	40003c00 	.word	0x40003c00

08000aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <MX_USART1_UART_Init+0x5c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000af0:	f003 f8df 	bl	8003cb2 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 fa15 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000638 	.word	0x20000638
 8000b08:	40013800 	.word	0x40013800

08000b0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_USART3_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART3_UART_Init+0x58>)
 8000b50:	f003 f8af 	bl	8003cb2 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 f9e5 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000fc 	.word	0x200000fc
 8000b68:	40004800 	.word	0x40004800

08000b6c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7a:	2206      	movs	r2, #6
 8000b7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	f001 fa9b 	bl	80020ea <HAL_PCD_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bba:	f000 f9b5 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000180 	.word	0x20000180

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bde:	4bba      	ldr	r3, [pc, #744]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4ab9      	ldr	r2, [pc, #740]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000be4:	f043 0310 	orr.w	r3, r3, #16
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4bb7      	ldr	r3, [pc, #732]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4bb4      	ldr	r3, [pc, #720]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4ab3      	ldr	r2, [pc, #716]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4bb1      	ldr	r3, [pc, #708]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4bae      	ldr	r3, [pc, #696]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4aad      	ldr	r2, [pc, #692]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4bab      	ldr	r3, [pc, #684]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4ba8      	ldr	r3, [pc, #672]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4aa7      	ldr	r2, [pc, #668]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4ba5      	ldr	r3, [pc, #660]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	4ba2      	ldr	r3, [pc, #648]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4aa1      	ldr	r2, [pc, #644]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b9f      	ldr	r3, [pc, #636]	; (8000ec8 <MX_GPIO_Init+0x300>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000c5c:	489b      	ldr	r0, [pc, #620]	; (8000ecc <MX_GPIO_Init+0x304>)
 8000c5e:	f001 f8c9 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f248 1104 	movw	r1, #33028	; 0x8104
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f001 f8c2 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c70:	2200      	movs	r2, #0
 8000c72:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000c76:	4896      	ldr	r0, [pc, #600]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c78:	f001 f8bc 	bl	8001df4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c82:	4894      	ldr	r0, [pc, #592]	; (8000ed4 <MX_GPIO_Init+0x30c>)
 8000c84:	f001 f8b6 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	4891      	ldr	r0, [pc, #580]	; (8000ed4 <MX_GPIO_Init+0x30c>)
 8000c90:	f001 f8b0 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c9a:	488f      	ldr	r0, [pc, #572]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000c9c:	f001 f8aa 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	488a      	ldr	r0, [pc, #552]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000ca6:	f001 f8a5 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2101      	movs	r1, #1
 8000cae:	4887      	ldr	r0, [pc, #540]	; (8000ecc <MX_GPIO_Init+0x304>)
 8000cb0:	f001 f8a0 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000cb4:	f240 1315 	movw	r3, #277	; 0x115
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	487f      	ldr	r0, [pc, #508]	; (8000ecc <MX_GPIO_Init+0x304>)
 8000cce:	f000 fee7 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000cd2:	236a      	movs	r3, #106	; 0x6a
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd6:	4b81      	ldr	r3, [pc, #516]	; (8000edc <MX_GPIO_Init+0x314>)
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4879      	ldr	r0, [pc, #484]	; (8000ecc <MX_GPIO_Init+0x304>)
 8000ce6:	f000 fedb 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf0:	4b7b      	ldr	r3, [pc, #492]	; (8000ee0 <MX_GPIO_Init+0x318>)
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4876      	ldr	r0, [pc, #472]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000d00:	f000 fece 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d04:	233f      	movs	r3, #63	; 0x3f
 8000d06:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d08:	230b      	movs	r3, #11
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4870      	ldr	r0, [pc, #448]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000d18:	f000 fec2 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f000 feb1 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d3e:	f248 1304 	movw	r3, #33028	; 0x8104
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f000 fea1 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f000 fe90 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d80:	2310      	movs	r3, #16
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d84:	230b      	movs	r3, #11
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f000 fe83 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000d9a:	23e0      	movs	r3, #224	; 0xe0
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000daa:	2305      	movs	r3, #5
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f000 fe72 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc0:	4b46      	ldr	r3, [pc, #280]	; (8000edc <MX_GPIO_Init+0x314>)
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4840      	ldr	r0, [pc, #256]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000dd0:	f000 fe66 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dd8:	230b      	movs	r3, #11
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	483a      	ldr	r0, [pc, #232]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000de8:	f000 fe5a 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000dec:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000df0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4832      	ldr	r0, [pc, #200]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000e06:	f000 fe4b 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e0a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e0e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e10:	4b32      	ldr	r3, [pc, #200]	; (8000edc <MX_GPIO_Init+0x314>)
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	482d      	ldr	r0, [pc, #180]	; (8000ed4 <MX_GPIO_Init+0x30c>)
 8000e20:	f000 fe3e 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e24:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4825      	ldr	r0, [pc, #148]	; (8000ed4 <MX_GPIO_Init+0x30c>)
 8000e3e:	f000 fe2f 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481f      	ldr	r0, [pc, #124]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000e5c:	f000 fe20 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e60:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_GPIO_Init+0x314>)
 8000e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4818      	ldr	r0, [pc, #96]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000e76:	f000 fe13 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <MX_GPIO_Init+0x30c>)
 8000e96:	f000 fe03 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e9a:	2378      	movs	r3, #120	; 0x78
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <MX_GPIO_Init+0x30c>)
 8000eb6:	f000 fdf3 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000eba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec0:	2312      	movs	r3, #18
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e00d      	b.n	8000ee4 <MX_GPIO_Init+0x31c>
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	48001000 	.word	0x48001000
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	48000c00 	.word	0x48000c00
 8000ed8:	48000800 	.word	0x48000800
 8000edc:	10110000 	.word	0x10110000
 8000ee0:	10210000 	.word	0x10210000
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eea:	2304      	movs	r3, #4
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <MX_GPIO_Init+0x35c>)
 8000ef6:	f000 fdd3 	bl	8001aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2017      	movs	r0, #23
 8000f00:	f000 fc8b 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f04:	2017      	movs	r0, #23
 8000f06:	f000 fca4 	bl	8001852 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2028      	movs	r0, #40	; 0x28
 8000f10:	f000 fc83 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f14:	2028      	movs	r0, #40	; 0x28
 8000f16:	f000 fc9c 	bl	8001852 <HAL_NVIC_EnableIRQ>

}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	48000400 	.word	0x48000400

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_MspInit+0x44>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_MspInit+0x44>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_MspInit+0x44>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_MspInit+0x44>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_MspInit+0x44>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_MspInit+0x44>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d12d      	bne.n	8000ff8 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa0:	4a18      	ldr	r2, [pc, #96]	; (8001004 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb8:	4a12      	ldr	r2, [pc, #72]	; (8001004 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000fcc:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fde:	2306      	movs	r3, #6
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000fea:	f000 fd59 	bl	8001aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a02      	ldr	r2, [pc, #8]	; (8001000 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000ff6:	6013      	str	r3, [r2, #0]
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000090 	.word	0x20000090
 8001004:	40021000 	.word	0x40021000
 8001008:	48001000 	.word	0x48001000

0800100c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_I2C_MspInit+0x7c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d128      	bne.n	8001080 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_I2C_MspInit+0x80>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <HAL_I2C_MspInit+0x80>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_I2C_MspInit+0x80>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001046:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104c:	2312      	movs	r3, #18
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001058:	2304      	movs	r3, #4
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	480b      	ldr	r0, [pc, #44]	; (8001090 <HAL_I2C_MspInit+0x84>)
 8001064:	f000 fd1c 	bl	8001aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_I2C_MspInit+0x80>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_I2C_MspInit+0x80>)
 800106e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001072:	6593      	str	r3, [r2, #88]	; 0x58
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_I2C_MspInit+0x80>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40005800 	.word	0x40005800
 800108c:	40021000 	.word	0x40021000
 8001090:	48000400 	.word	0x48000400

08001094 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_QSPI_MspInit+0x7c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d128      	bne.n	8001108 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c0:	6513      	str	r3, [r2, #80]	; 0x50
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010d4:	f043 0310 	orr.w	r3, r3, #16
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_QSPI_MspInit+0x80>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010e6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80010ea:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010f8:	230a      	movs	r3, #10
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <HAL_QSPI_MspInit+0x84>)
 8001104:	f000 fccc 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	a0001000 	.word	0xa0001000
 8001114:	40021000 	.word	0x40021000
 8001118:	48001000 	.word	0x48001000

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_SPI_MspInit+0x7c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d128      	bne.n	8001190 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_SPI_MspInit+0x80>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_SPI_MspInit+0x80>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800116e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001180:	2306      	movs	r3, #6
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_SPI_MspInit+0x84>)
 800118c:	f000 fc88 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40003c00 	.word	0x40003c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000800 	.word	0x48000800

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a2e      	ldr	r2, [pc, #184]	; (800127c <HAL_UART_MspInit+0xd8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d128      	bne.n	8001218 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	4a2d      	ldr	r2, [pc, #180]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6613      	str	r3, [r2, #96]	; 0x60
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_UART_MspInit+0xdc>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011f6:	23c0      	movs	r3, #192	; 0xc0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001206:	2307      	movs	r3, #7
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	481c      	ldr	r0, [pc, #112]	; (8001284 <HAL_UART_MspInit+0xe0>)
 8001212:	f000 fc45 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001216:	e02d      	b.n	8001274 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <HAL_UART_MspInit+0xe4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d128      	bne.n	8001274 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_UART_MspInit+0xdc>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	4a16      	ldr	r2, [pc, #88]	; (8001280 <HAL_UART_MspInit+0xdc>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6593      	str	r3, [r2, #88]	; 0x58
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_UART_MspInit+0xdc>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0xdc>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_UART_MspInit+0xdc>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_UART_MspInit+0xdc>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001264:	2307      	movs	r3, #7
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4807      	ldr	r0, [pc, #28]	; (800128c <HAL_UART_MspInit+0xe8>)
 8001270:	f000 fc16 	bl	8001aa0 <HAL_GPIO_Init>
}
 8001274:	bf00      	nop
 8001276:	3730      	adds	r7, #48	; 0x30
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40013800 	.word	0x40013800
 8001280:	40021000 	.word	0x40021000
 8001284:	48000400 	.word	0x48000400
 8001288:	40004800 	.word	0x40004800
 800128c:	48000c00 	.word	0x48000c00

08001290 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012b0:	d154      	bne.n	800135c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a2b      	ldr	r2, [pc, #172]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b29      	ldr	r3, [pc, #164]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80012ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e2:	f000 fbdd 	bl	8001aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80012e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012f8:	230a      	movs	r3, #10
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f000 fbcb 	bl	8001aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 8001310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d114      	bne.n	8001358 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6593      	str	r3, [r2, #88]	; 0x58
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001346:	f001 f88d 	bl	8002464 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <HAL_PCD_MspInit+0xd4>)
 8001350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001354:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001356:	e001      	b.n	800135c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001358:	f001 f884 	bl	8002464 <HAL_PWREx_EnableVddUSB>
}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800136c:	e7fe      	b.n	800136c <NMI_Handler+0x4>

0800136e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <MemManage_Handler+0x4>

0800137a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <UsageFault_Handler+0x4>

08001386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b4:	f000 f912 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80013c0:	2020      	movs	r0, #32
 80013c2:	f000 fd49 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80013c6:	2040      	movs	r0, #64	; 0x40
 80013c8:	f000 fd46 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80013cc:	2080      	movs	r0, #128	; 0x80
 80013ce:	f000 fd43 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80013d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013d6:	f000 fd3f 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}

080013de <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013e6:	f000 fd37 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80013ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013ee:	f000 fd33 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013f6:	f000 fd2f 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80013fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013fe:	f000 fd2b 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001402:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001406:	f000 fd27 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f003 fc44 	bl	8004ccc <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20018000 	.word	0x20018000
 8001470:	00000400 	.word	0x00000400
 8001474:	20000094 	.word	0x20000094
 8001478:	20000718 	.word	0x20000718

0800147c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <SystemInit+0x5c>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <SystemInit+0x5c>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <SystemInit+0x60>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <SystemInit+0x60>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <SystemInit+0x60>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <SystemInit+0x60>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <SystemInit+0x60>)
 80014a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <SystemInit+0x60>)
 80014b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <SystemInit+0x60>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <SystemInit+0x60>)
 80014c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SystemInit+0x60>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00
 80014dc:	40021000 	.word	0x40021000

080014e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001518 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e4:	f7ff ffca 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014ea:	e003      	b.n	80014f4 <LoopCopyDataInit>

080014ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014f2:	3104      	adds	r1, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014f4:	480a      	ldr	r0, [pc, #40]	; (8001520 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014fc:	d3f6      	bcc.n	80014ec <CopyDataInit>
	ldr	r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001500:	e002      	b.n	8001508 <LoopFillZerobss>

08001502 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001502:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001504:	f842 3b04 	str.w	r3, [r2], #4

08001508 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <LoopForever+0x16>)
	cmp	r2, r3
 800150a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800150c:	d3f9      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150e:	f003 fbe3 	bl	8004cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001512:	f7ff f885 	bl	8000620 <main>

08001516 <LoopForever>:

LoopForever:
    b LoopForever
 8001516:	e7fe      	b.n	8001516 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001518:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800151c:	080057a0 	.word	0x080057a0
	ldr	r0, =_sdata
 8001520:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001524:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001528:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800152c:	20000714 	.word	0x20000714

08001530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_2_IRQHandler>

08001532 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 f961 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f80e 	bl	8001564 <HAL_InitTick>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	e001      	b.n	8001558 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001554:	f7ff fcee 	bl	8000f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001558:	79fb      	ldrb	r3, [r7, #7]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_InitTick+0x6c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d023      	beq.n	80015c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_InitTick+0x70>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <HAL_InitTick+0x6c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001586:	fbb3 f3f1 	udiv	r3, r3, r1
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f96d 	bl	800186e <HAL_SYSTICK_Config>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10f      	bne.n	80015ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d809      	bhi.n	80015b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f937 	bl	800181a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_InitTick+0x74>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e007      	b.n	80015c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e004      	b.n	80015c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e001      	b.n	80015c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000000c 	.word	0x2000000c
 80015d4:	20000004 	.word	0x20000004
 80015d8:	20000008 	.word	0x20000008

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	2000000c 	.word	0x2000000c
 8001600:	20000700 	.word	0x20000700

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000700 	.word	0x20000700

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff ffee 	bl	8001604 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffde 	bl	8001604 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000000c 	.word	0x2000000c

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4907      	ldr	r1, [pc, #28]	; (8001700 <__NVIC_EnableIRQ+0x38>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff8e 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff29 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff3e 	bl	80016ac <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff8e 	bl	8001758 <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5d 	bl	8001704 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff31 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0ac      	b.n	80019f4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f8b2 	bl	8001a08 <DFSDM_GetChannelFromInstance>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a55      	ldr	r2, [pc, #340]	; (80019fc <HAL_DFSDM_ChannelInit+0x174>)
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e09f      	b.n	80019f4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fb61 	bl	8000f7c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80018ba:	4b51      	ldr	r3, [pc, #324]	; (8001a00 <HAL_DFSDM_ChannelInit+0x178>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	4a4f      	ldr	r2, [pc, #316]	; (8001a00 <HAL_DFSDM_ChannelInit+0x178>)
 80018c2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80018c4:	4b4e      	ldr	r3, [pc, #312]	; (8001a00 <HAL_DFSDM_ChannelInit+0x178>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d125      	bne.n	8001918 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80018cc:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_DFSDM_ChannelInit+0x17c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a4c      	ldr	r2, [pc, #304]	; (8001a04 <HAL_DFSDM_ChannelInit+0x17c>)
 80018d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018d6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80018d8:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_DFSDM_ChannelInit+0x17c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4948      	ldr	r1, [pc, #288]	; (8001a04 <HAL_DFSDM_ChannelInit+0x17c>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_DFSDM_ChannelInit+0x17c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a46      	ldr	r2, [pc, #280]	; (8001a04 <HAL_DFSDM_ChannelInit+0x17c>)
 80018ec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80018f0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	791b      	ldrb	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80018fa:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_DFSDM_ChannelInit+0x17c>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	3b01      	subs	r3, #1
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	493f      	ldr	r1, [pc, #252]	; (8001a04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <HAL_DFSDM_ChannelInit+0x17c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3c      	ldr	r2, [pc, #240]	; (8001a04 <HAL_DFSDM_ChannelInit+0x17c>)
 8001912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001916:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001926:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001936:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800193c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 020f 	bic.w	r2, r2, #15
 8001954:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6819      	ldr	r1, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800197c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6899      	ldr	r1, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	3b01      	subs	r3, #1
 800198e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f002 0207 	and.w	r2, r2, #7
 80019a8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019d4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f810 	bl	8001a08 <DFSDM_GetChannelFromInstance>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4904      	ldr	r1, [pc, #16]	; (80019fc <HAL_DFSDM_ChannelInit+0x174>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000009c 	.word	0x2000009c
 8001a00:	20000098 	.word	0x20000098
 8001a04:	40016000 	.word	0x40016000

08001a08 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <DFSDM_GetChannelFromInstance+0x7c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d102      	bne.n	8001a1e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e02b      	b.n	8001a76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <DFSDM_GetChannelFromInstance+0x80>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d102      	bne.n	8001a2c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e024      	b.n	8001a76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <DFSDM_GetChannelFromInstance+0x84>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d102      	bne.n	8001a3a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e01d      	b.n	8001a76 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <DFSDM_GetChannelFromInstance+0x88>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d102      	bne.n	8001a48 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001a42:	2304      	movs	r3, #4
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	e016      	b.n	8001a76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <DFSDM_GetChannelFromInstance+0x8c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d102      	bne.n	8001a56 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001a50:	2305      	movs	r3, #5
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e00f      	b.n	8001a76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <DFSDM_GetChannelFromInstance+0x90>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d102      	bne.n	8001a64 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001a5e:	2306      	movs	r3, #6
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e008      	b.n	8001a76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <DFSDM_GetChannelFromInstance+0x94>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d102      	bne.n	8001a72 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e001      	b.n	8001a76 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001a72:	2303      	movs	r3, #3
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40016000 	.word	0x40016000
 8001a88:	40016020 	.word	0x40016020
 8001a8c:	40016040 	.word	0x40016040
 8001a90:	40016080 	.word	0x40016080
 8001a94:	400160a0 	.word	0x400160a0
 8001a98:	400160c0 	.word	0x400160c0
 8001a9c:	400160e0 	.word	0x400160e0

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aae:	e17f      	b.n	8001db0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8171 	beq.w	8001daa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d00b      	beq.n	8001ae8 <HAL_GPIO_Init+0x48>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d007      	beq.n	8001ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001adc:	2b11      	cmp	r3, #17
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b12      	cmp	r3, #18
 8001ae6:	d130      	bne.n	8001b4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b1e:	2201      	movs	r2, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 0201 	and.w	r2, r3, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d118      	bne.n	8001b88 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x128>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b12      	cmp	r3, #18
 8001bc6:	d123      	bne.n	8001c10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	08da      	lsrs	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3208      	adds	r2, #8
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0203 	and.w	r2, r3, #3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80ac 	beq.w	8001daa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_GPIO_Init+0x330>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	4a5e      	ldr	r2, [pc, #376]	; (8001dd0 <HAL_GPIO_Init+0x330>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5e:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <HAL_GPIO_Init+0x330>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6a:	4a5a      	ldr	r2, [pc, #360]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c94:	d025      	beq.n	8001ce2 <HAL_GPIO_Init+0x242>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <HAL_GPIO_Init+0x338>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01f      	beq.n	8001cde <HAL_GPIO_Init+0x23e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4e      	ldr	r2, [pc, #312]	; (8001ddc <HAL_GPIO_Init+0x33c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <HAL_GPIO_Init+0x23a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4d      	ldr	r2, [pc, #308]	; (8001de0 <HAL_GPIO_Init+0x340>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0x236>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <HAL_GPIO_Init+0x344>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_GPIO_Init+0x232>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4b      	ldr	r2, [pc, #300]	; (8001de8 <HAL_GPIO_Init+0x348>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d007      	beq.n	8001cce <HAL_GPIO_Init+0x22e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4a      	ldr	r2, [pc, #296]	; (8001dec <HAL_GPIO_Init+0x34c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_GPIO_Init+0x22a>
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	e00c      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cca:	2307      	movs	r3, #7
 8001ccc:	e00a      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e008      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e004      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	f002 0203 	and.w	r2, r2, #3
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4093      	lsls	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf4:	4937      	ldr	r1, [pc, #220]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d26:	4a32      	ldr	r2, [pc, #200]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d2c:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d50:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d56:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <HAL_GPIO_Init+0x350>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f47f ae78 	bne.w	8001ab0 <HAL_GPIO_Init+0x10>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000
 8001de8:	48001400 	.word	0x48001400
 8001dec:	48001800 	.word	0x48001800
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	041a      	lsls	r2, r3, #16
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43d9      	mvns	r1, r3
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	400b      	ands	r3, r1
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f806 	bl	8001e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40010400 	.word	0x40010400

08001e88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e081      	b.n	8001fb4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff f8a1 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2224      	movs	r2, #36	; 0x24
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	e006      	b.n	8001f26 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d104      	bne.n	8001f38 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f4a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	ea42 0103 	orr.w	r1, r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	021a      	lsls	r2, r3, #8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69d9      	ldr	r1, [r3, #28]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1a      	ldr	r2, [r3, #32]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d138      	bne.n	8002044 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e032      	b.n	8002046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2224      	movs	r2, #36	; 0x24
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800200e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e000      	b.n	8002046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002044:	2302      	movs	r3, #2
  }
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b20      	cmp	r3, #32
 8002066:	d139      	bne.n	80020dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002072:	2302      	movs	r3, #2
 8002074:	e033      	b.n	80020de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2224      	movs	r2, #36	; 0x24
 8002082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	e000      	b.n	80020de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
  }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ec:	b08f      	sub	sp, #60	; 0x3c
 80020ee:	af0a      	add	r7, sp, #40	; 0x28
 80020f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e116      	b.n	800232a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff f8ba 	bl	8001290 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2203      	movs	r2, #3
 8002120:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f002 fb89 	bl	8004852 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	687e      	ldr	r6, [r7, #4]
 8002148:	466d      	mov	r5, sp
 800214a:	f106 0410 	add.w	r4, r6, #16
 800214e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002156:	e894 0003 	ldmia.w	r4, {r0, r1}
 800215a:	e885 0003 	stmia.w	r5, {r0, r1}
 800215e:	1d33      	adds	r3, r6, #4
 8002160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002162:	6838      	ldr	r0, [r7, #0]
 8002164:	f002 fb49 	bl	80047fa <USB_CoreInit>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0d7      	b.n	800232a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f002 fb77 	bl	8004874 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	e04a      	b.n	8002222 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	333d      	adds	r3, #61	; 0x3d
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	333c      	adds	r3, #60	; 0x3c
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	b298      	uxth	r0, r3
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3342      	adds	r3, #66	; 0x42
 80021c8:	4602      	mov	r2, r0
 80021ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	333f      	adds	r3, #63	; 0x3f
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	3344      	adds	r3, #68	; 0x44
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3348      	adds	r3, #72	; 0x48
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	3350      	adds	r3, #80	; 0x50
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	3301      	adds	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d3af      	bcc.n	800218c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	e044      	b.n	80022bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	3301      	adds	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d3b5      	bcc.n	8002232 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	687e      	ldr	r6, [r7, #4]
 80022ce:	466d      	mov	r5, sp
 80022d0:	f106 0410 	add.w	r4, r6, #16
 80022d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e4:	1d33      	adds	r3, r6, #4
 80022e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e8:	6838      	ldr	r0, [r7, #0]
 80022ea:	f002 faed 	bl	80048c8 <USB_DevInit>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e014      	b.n	800232a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	2b01      	cmp	r3, #1
 8002316:	d102      	bne.n	800231e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f80a 	bl	8002332 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f002 fc7d 	bl	8004c22 <USB_DevDisconnect>

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002332 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	f043 0303 	orr.w	r3, r3, #3
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40007000 	.word	0x40007000

0800239c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40007000 	.word	0x40007000

080023b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c6:	d130      	bne.n	800242a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d4:	d038      	beq.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023de:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2232      	movs	r2, #50	; 0x32
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9b      	lsrs	r3, r3, #18
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fc:	e002      	b.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3b01      	subs	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002410:	d102      	bne.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f2      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002424:	d110      	bne.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e00f      	b.n	800244a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	d007      	beq.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002440:	4a05      	ldr	r2, [pc, #20]	; (8002458 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002446:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40007000 	.word	0x40007000
 800245c:	20000004 	.word	0x20000004
 8002460:	431bde83 	.word	0x431bde83

08002464 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_PWREx_EnableVddUSB+0x1c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_PWREx_EnableVddUSB+0x1c>)
 800246e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002472:	6053      	str	r3, [r2, #4]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40007000 	.word	0x40007000

08002484 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af02      	add	r7, sp, #8
 800248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff f8ba 	bl	8001604 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e063      	b.n	8002564 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10b      	bne.n	80024c0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fdef 	bl	8001094 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80024b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f858 	bl	8002570 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	021a      	lsls	r2, r3, #8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	2120      	movs	r1, #32
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f850 	bl	800258c <QSPI_WaitFlagStateUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d131      	bne.n	800255a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002500:	f023 0310 	bic.w	r3, r3, #16
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6852      	ldr	r2, [r2, #4]
 8002508:	0611      	lsls	r1, r2, #24
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68d2      	ldr	r2, [r2, #12]
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	430b      	orrs	r3, r1
 8002516:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_QSPI_Init+0xe8>)
 8002520:	4013      	ands	r3, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6912      	ldr	r2, [r2, #16]
 8002526:	0411      	lsls	r1, r2, #16
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6952      	ldr	r2, [r2, #20]
 800252c:	4311      	orrs	r1, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6992      	ldr	r2, [r2, #24]
 8002532:	4311      	orrs	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002562:	7afb      	ldrb	r3, [r7, #11]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	ffe0f8fe 	.word	0xffe0f8fe

08002570 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800259c:	e01a      	b.n	80025d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d016      	beq.n	80025d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a6:	f7ff f82d 	bl	8001604 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d302      	bcc.n	80025bc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2204      	movs	r2, #4
 80025c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e00e      	b.n	80025f2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4013      	ands	r3, r2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1d6      	bne.n	800259e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e3d4      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4ba1      	ldr	r3, [pc, #644]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002618:	4b9e      	ldr	r3, [pc, #632]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80e4 	beq.w	80027f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_RCC_OscConfig+0x4a>
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	f040 808b 	bne.w	8002754 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 8087 	bne.w	8002754 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002646:	4b93      	ldr	r3, [pc, #588]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e3ac      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1a      	ldr	r2, [r3, #32]
 8002662:	4b8c      	ldr	r3, [pc, #560]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_RCC_OscConfig+0x7c>
 800266e:	4b89      	ldr	r3, [pc, #548]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002676:	e005      	b.n	8002684 <HAL_RCC_OscConfig+0x88>
 8002678:	4b86      	ldr	r3, [pc, #536]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002684:	4293      	cmp	r3, r2
 8002686:	d223      	bcs.n	80026d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fd41 	bl	8003114 <RCC_SetFlashLatencyFromMSIRange>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e38d      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269c:	4b7d      	ldr	r3, [pc, #500]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7c      	ldr	r2, [pc, #496]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b7a      	ldr	r3, [pc, #488]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4977      	ldr	r1, [pc, #476]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ba:	4b76      	ldr	r3, [pc, #472]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	4972      	ldr	r1, [pc, #456]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
 80026ce:	e025      	b.n	800271c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d0:	4b70      	ldr	r3, [pc, #448]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a6f      	ldr	r2, [pc, #444]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026d6:	f043 0308 	orr.w	r3, r3, #8
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	496a      	ldr	r1, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ee:	4b69      	ldr	r3, [pc, #420]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	4965      	ldr	r1, [pc, #404]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fd01 	bl	8003114 <RCC_SetFlashLatencyFromMSIRange>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e34d      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800271c:	f000 fc36 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	495a      	ldr	r1, [pc, #360]	; (8002898 <HAL_RCC_OscConfig+0x29c>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	4a58      	ldr	r2, [pc, #352]	; (800289c <HAL_RCC_OscConfig+0x2a0>)
 800273a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800273c:	4b58      	ldr	r3, [pc, #352]	; (80028a0 <HAL_RCC_OscConfig+0x2a4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe ff0f 	bl	8001564 <HAL_InitTick>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d052      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	e331      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d032      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800275c:	4b4d      	ldr	r3, [pc, #308]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a4c      	ldr	r2, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002768:	f7fe ff4c 	bl	8001604 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002770:	f7fe ff48 	bl	8001604 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e31a      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002782:	4b44      	ldr	r3, [pc, #272]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a40      	ldr	r2, [pc, #256]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	493b      	ldr	r1, [pc, #236]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ac:	4b39      	ldr	r3, [pc, #228]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	4936      	ldr	r1, [pc, #216]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
 80027c0:	e01a      	b.n	80027f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027c2:	4b34      	ldr	r3, [pc, #208]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a33      	ldr	r2, [pc, #204]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ce:	f7fe ff19 	bl	8001604 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027d6:	f7fe ff15 	bl	8001604 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e2e7      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x1da>
 80027f4:	e000      	b.n	80027f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d074      	beq.n	80028ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x21a>
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d10e      	bne.n	800282e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d10b      	bne.n	800282e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d064      	beq.n	80028ec <HAL_RCC_OscConfig+0x2f0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d160      	bne.n	80028ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e2c4      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x24a>
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 800283e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	e01d      	b.n	8002882 <HAL_RCC_OscConfig+0x286>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800284e:	d10c      	bne.n	800286a <HAL_RCC_OscConfig+0x26e>
 8002850:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	e00b      	b.n	8002882 <HAL_RCC_OscConfig+0x286>
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a06      	ldr	r2, [pc, #24]	; (8002894 <HAL_RCC_OscConfig+0x298>)
 800287c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe febb 	bl	8001604 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002890:	e011      	b.n	80028b6 <HAL_RCC_OscConfig+0x2ba>
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	08005714 	.word	0x08005714
 800289c:	20000004 	.word	0x20000004
 80028a0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe feae 	bl	8001604 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e280      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b6:	4baf      	ldr	r3, [pc, #700]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2a8>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fe9e 	bl	8001604 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe fe9a 	bl	8001604 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e26c      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028de:	4ba5      	ldr	r3, [pc, #660]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d0>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d060      	beq.n	80029bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d005      	beq.n	800290c <HAL_RCC_OscConfig+0x310>
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d119      	bne.n	800293a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d116      	bne.n	800293a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800290c:	4b99      	ldr	r3, [pc, #612]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x328>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e249      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b93      	ldr	r3, [pc, #588]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	4990      	ldr	r1, [pc, #576]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002938:	e040      	b.n	80029bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d023      	beq.n	800298a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002942:	4b8c      	ldr	r3, [pc, #560]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a8b      	ldr	r2, [pc, #556]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fe59 	bl	8001604 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002956:	f7fe fe55 	bl	8001604 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e227      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002968:	4b82      	ldr	r3, [pc, #520]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b7f      	ldr	r3, [pc, #508]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	061b      	lsls	r3, r3, #24
 8002982:	497c      	ldr	r1, [pc, #496]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
 8002988:	e018      	b.n	80029bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298a:	4b7a      	ldr	r3, [pc, #488]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a79      	ldr	r2, [pc, #484]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe fe35 	bl	8001604 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299e:	f7fe fe31 	bl	8001604 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e203      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b0:	4b70      	ldr	r3, [pc, #448]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d03c      	beq.n	8002a42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01c      	beq.n	8002a0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	4a67      	ldr	r2, [pc, #412]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7fe fe10 	bl	8001604 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e8:	f7fe fe0c 	bl	8001604 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e1de      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029fa:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ef      	beq.n	80029e8 <HAL_RCC_OscConfig+0x3ec>
 8002a08:	e01b      	b.n	8002a42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0a:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a10:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fdf3 	bl	8001604 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fe fdef 	bl	8001604 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1c1      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a34:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ef      	bne.n	8002a22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80a6 	beq.w	8002b9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a54:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	4a43      	ldr	r2, [pc, #268]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a6c:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	4b3e      	ldr	r3, [pc, #248]	; (8002b78 <HAL_RCC_OscConfig+0x57c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d118      	bne.n	8002aba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a88:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_OscConfig+0x57c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a3a      	ldr	r2, [pc, #232]	; (8002b78 <HAL_RCC_OscConfig+0x57c>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a94:	f7fe fdb6 	bl	8001604 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9c:	f7fe fdb2 	bl	8001604 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e184      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <HAL_RCC_OscConfig+0x57c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d108      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4d8>
 8002ac2:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad2:	e024      	b.n	8002b1e <HAL_RCC_OscConfig+0x522>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d110      	bne.n	8002afe <HAL_RCC_OscConfig+0x502>
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aec:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002afc:	e00f      	b.n	8002b1e <HAL_RCC_OscConfig+0x522>
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b04:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fe fd6d 	bl	8001604 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fd69 	bl	8001604 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e139      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_OscConfig+0x578>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0ed      	beq.n	8002b2e <HAL_RCC_OscConfig+0x532>
 8002b52:	e01a      	b.n	8002b8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7fe fd56 	bl	8001604 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b5a:	e00f      	b.n	8002b7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fe fd52 	bl	8001604 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d906      	bls.n	8002b7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e122      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b7c:	4b90      	ldr	r3, [pc, #576]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e8      	bne.n	8002b5c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8a:	7ffb      	ldrb	r3, [r7, #31]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b8b      	ldr	r3, [pc, #556]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	4a8a      	ldr	r2, [pc, #552]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8108 	beq.w	8002db6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	f040 80d0 	bne.w	8002d50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bb0:	4b83      	ldr	r3, [pc, #524]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d130      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d127      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d11f      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf0:	2a07      	cmp	r2, #7
 8002bf2:	bf14      	ite	ne
 8002bf4:	2201      	movne	r2, #1
 8002bf6:	2200      	moveq	r2, #0
 8002bf8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d06e      	beq.n	8002d04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d069      	beq.n	8002d00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c2c:	4b64      	ldr	r3, [pc, #400]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c38:	4b61      	ldr	r3, [pc, #388]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0b7      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c48:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a5c      	ldr	r2, [pc, #368]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c54:	f7fe fcd6 	bl	8001604 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe fcd2 	bl	8001604 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0a4      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6e:	4b54      	ldr	r3, [pc, #336]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c7a:	4b51      	ldr	r3, [pc, #324]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	4b51      	ldr	r3, [pc, #324]	; (8002dc4 <HAL_RCC_OscConfig+0x7c8>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c94:	0212      	lsls	r2, r2, #8
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c9c:	0852      	lsrs	r2, r2, #1
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	0552      	lsls	r2, r2, #21
 8002ca2:	4311      	orrs	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ca8:	0852      	lsrs	r2, r2, #1
 8002caa:	3a01      	subs	r2, #1
 8002cac:	0652      	lsls	r2, r2, #25
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb4:	0912      	lsrs	r2, r2, #4
 8002cb6:	0452      	lsls	r2, r2, #17
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	4941      	ldr	r1, [pc, #260]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a3e      	ldr	r2, [pc, #248]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ccc:	4b3c      	ldr	r3, [pc, #240]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a3b      	ldr	r2, [pc, #236]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cd8:	f7fe fc94 	bl	8001604 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe fc90 	bl	8001604 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e062      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	4b33      	ldr	r3, [pc, #204]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cfe:	e05a      	b.n	8002db6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e059      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d04:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d152      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2a      	ldr	r2, [pc, #168]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d1c:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d28:	f7fe fc6c 	bl	8001604 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe fc68 	bl	8001604 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e03a      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d42:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x734>
 8002d4e:	e032      	b.n	8002db6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d02d      	beq.n	8002db2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d60:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d74:	f023 0303 	bic.w	r3, r3, #3
 8002d78:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002d80:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d88:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fc3b 	bl	8001604 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe fc37 	bl	8001604 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e009      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_RCC_OscConfig+0x7c4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x796>
 8002db0:	e001      	b.n	8002db6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	f99d808c 	.word	0xf99d808c

08002dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0c8      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b66      	ldr	r3, [pc, #408]	; (8002f78 <HAL_RCC_ClockConfig+0x1b0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <HAL_RCC_ClockConfig+0x1b0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 0207 	bic.w	r2, r3, #7
 8002df2:	4961      	ldr	r1, [pc, #388]	; (8002f78 <HAL_RCC_ClockConfig+0x1b0>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b5f      	ldr	r3, [pc, #380]	; (8002f78 <HAL_RCC_ClockConfig+0x1b0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b0      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d04c      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e20:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d121      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e09e      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e38:	4b50      	ldr	r3, [pc, #320]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d115      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e092      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e50:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e086      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e60:	4b46      	ldr	r3, [pc, #280]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e07e      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e70:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 0203 	bic.w	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	493f      	ldr	r1, [pc, #252]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e82:	f7fe fbbf 	bl	8001604 <HAL_GetTick>
 8002e86:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8a:	f7fe fbbb 	bl	8001604 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e066      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 020c 	and.w	r2, r3, #12
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d1eb      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebe:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	492c      	ldr	r1, [pc, #176]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <HAL_RCC_ClockConfig+0x1b0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d210      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_RCC_ClockConfig+0x1b0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 0207 	bic.w	r2, r3, #7
 8002ee6:	4924      	ldr	r1, [pc, #144]	; (8002f78 <HAL_RCC_ClockConfig+0x1b0>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e036      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4918      	ldr	r1, [pc, #96]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4910      	ldr	r1, [pc, #64]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f3e:	f000 f825 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <HAL_RCC_ClockConfig+0x1b4>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490c      	ldr	r1, [pc, #48]	; (8002f80 <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fafe 	bl	8001564 <HAL_InitTick>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	08005714 	.word	0x08005714
 8002f84:	20000004 	.word	0x20000004
 8002f88:	20000008 	.word	0x20000008

08002f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f9a:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa4:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d121      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d11e      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fc0:	4b34      	ldr	r3, [pc, #208]	; (8003094 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fcc:	4b31      	ldr	r3, [pc, #196]	; (8003094 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	e005      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fe8:	4a2b      	ldr	r2, [pc, #172]	; (8003098 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d102      	bne.n	800300a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <HAL_RCC_GetSysClockFreq+0x110>)
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	e004      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d101      	bne.n	8003014 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003012:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d134      	bne.n	8003084 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800301a:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_GetSysClockFreq+0x108>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d003      	beq.n	8003032 <HAL_RCC_GetSysClockFreq+0xa6>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d003      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0xac>
 8003030:	e005      	b.n	800303e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003032:	4b1a      	ldr	r3, [pc, #104]	; (800309c <HAL_RCC_GetSysClockFreq+0x110>)
 8003034:	617b      	str	r3, [r7, #20]
      break;
 8003036:	e005      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800303a:	617b      	str	r3, [r7, #20]
      break;
 800303c:	e002      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	617b      	str	r3, [r7, #20]
      break;
 8003042:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003044:	4b13      	ldr	r3, [pc, #76]	; (8003094 <HAL_RCC_GetSysClockFreq+0x108>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	3301      	adds	r3, #1
 8003050:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_RCC_GetSysClockFreq+0x108>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	fb02 f203 	mul.w	r2, r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <HAL_RCC_GetSysClockFreq+0x108>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	0e5b      	lsrs	r3, r3, #25
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	3301      	adds	r3, #1
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003084:	69bb      	ldr	r3, [r7, #24]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	0800572c 	.word	0x0800572c
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	007a1200 	.word	0x007a1200

080030a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030aa:	681b      	ldr	r3, [r3, #0]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000004 	.word	0x20000004

080030bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030c0:	f7ff fff0 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4904      	ldr	r1, [pc, #16]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	08005724 	.word	0x08005724

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030ec:	f7ff ffda 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0adb      	lsrs	r3, r3, #11
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4904      	ldr	r1, [pc, #16]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000
 8003110:	08005724 	.word	0x08005724

08003114 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003120:	4b2a      	ldr	r3, [pc, #168]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800312c:	f7ff f936 	bl	800239c <HAL_PWREx_GetVoltageRange>
 8003130:	6178      	str	r0, [r7, #20]
 8003132:	e014      	b.n	800315e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	4a24      	ldr	r2, [pc, #144]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	6593      	str	r3, [r2, #88]	; 0x58
 8003140:	4b22      	ldr	r3, [pc, #136]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800314c:	f7ff f926 	bl	800239c <HAL_PWREx_GetVoltageRange>
 8003150:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003152:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003164:	d10b      	bne.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d919      	bls.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2ba0      	cmp	r3, #160	; 0xa0
 8003170:	d902      	bls.n	8003178 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003172:	2302      	movs	r3, #2
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	e013      	b.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003178:	2301      	movs	r3, #1
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e010      	b.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d902      	bls.n	800318a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003184:	2303      	movs	r3, #3
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	e00a      	b.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d102      	bne.n	8003196 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003190:	2302      	movs	r3, #2
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e004      	b.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b70      	cmp	r3, #112	; 0x70
 800319a:	d101      	bne.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800319c:	2301      	movs	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 0207 	bic.w	r2, r3, #7
 80031a8:	4909      	ldr	r1, [pc, #36]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031b0:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d001      	beq.n	80031c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40022000 	.word	0x40022000

080031d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031dc:	2300      	movs	r3, #0
 80031de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e0:	2300      	movs	r3, #0
 80031e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d041      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031f8:	d02a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031fe:	d824      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003200:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003204:	d008      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003206:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800320a:	d81e      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003214:	d010      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003216:	e018      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003218:	4b86      	ldr	r3, [pc, #536]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a85      	ldr	r2, [pc, #532]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003222:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003224:	e015      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3304      	adds	r3, #4
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f000 facb 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003236:	e00c      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3320      	adds	r3, #32
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fbb6 	bl	80039b0 <RCCEx_PLLSAI2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	74fb      	strb	r3, [r7, #19]
      break;
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003258:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003266:	4973      	ldr	r1, [pc, #460]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800326e:	e001      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d041      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003284:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003288:	d02a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800328a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800328e:	d824      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003294:	d008      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800329a:	d81e      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a4:	d010      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032a6:	e018      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032a8:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a61      	ldr	r2, [pc, #388]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032b4:	e015      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fa83 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c6:	e00c      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3320      	adds	r3, #32
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fb6e 	bl	80039b0 <RCCEx_PLLSAI2_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d8:	e003      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	74fb      	strb	r3, [r7, #19]
      break;
 80032de:	e000      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032e8:	4b52      	ldr	r3, [pc, #328]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f6:	494f      	ldr	r1, [pc, #316]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032fe:	e001      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a0 	beq.w	8003452 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332c:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	4a40      	ldr	r2, [pc, #256]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003336:	6593      	str	r3, [r2, #88]	; 0x58
 8003338:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003344:	2301      	movs	r3, #1
 8003346:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003348:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a3a      	ldr	r2, [pc, #232]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800334e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003352:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003354:	f7fe f956 	bl	8001604 <HAL_GetTick>
 8003358:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800335a:	e009      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fe f952 	bl	8001604 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d902      	bls.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	74fb      	strb	r3, [r7, #19]
        break;
 800336e:	e005      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003370:	4b31      	ldr	r3, [pc, #196]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ef      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d15c      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003382:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01f      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	429a      	cmp	r2, r3
 800339e:	d019      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ac:	4b21      	ldr	r3, [pc, #132]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	4a20      	ldr	r2, [pc, #128]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033cc:	4a19      	ldr	r2, [pc, #100]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fe f911 	bl	8001604 <HAL_GetTick>
 80033e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e4:	e00b      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fe f90d 	bl	8001604 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d902      	bls.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	74fb      	strb	r3, [r7, #19]
            break;
 80033fc:	e006      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ec      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003422:	4904      	ldr	r1, [pc, #16]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800342a:	e009      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	74bb      	strb	r3, [r7, #18]
 8003430:	e006      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003440:	7c7b      	ldrb	r3, [r7, #17]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b9e      	ldr	r3, [pc, #632]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	4a9d      	ldr	r2, [pc, #628]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003450:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800345e:	4b98      	ldr	r3, [pc, #608]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f023 0203 	bic.w	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	4994      	ldr	r1, [pc, #592]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003480:	4b8f      	ldr	r3, [pc, #572]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f023 020c 	bic.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	498c      	ldr	r1, [pc, #560]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034a2:	4b87      	ldr	r3, [pc, #540]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	4983      	ldr	r1, [pc, #524]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c4:	4b7e      	ldr	r3, [pc, #504]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	497b      	ldr	r1, [pc, #492]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034e6:	4b76      	ldr	r3, [pc, #472]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f4:	4972      	ldr	r1, [pc, #456]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003508:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	496a      	ldr	r1, [pc, #424]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800352a:	4b65      	ldr	r3, [pc, #404]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	4961      	ldr	r1, [pc, #388]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800354c:	4b5c      	ldr	r3, [pc, #368]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355a:	4959      	ldr	r1, [pc, #356]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356e:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357c:	4950      	ldr	r1, [pc, #320]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003590:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	4948      	ldr	r1, [pc, #288]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	493f      	ldr	r1, [pc, #252]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d028      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d4:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e2:	4937      	ldr	r1, [pc, #220]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f2:	d106      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a31      	ldr	r2, [pc, #196]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fe:	60d3      	str	r3, [r2, #12]
 8003600:	e011      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800360a:	d10c      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f8d8 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d028      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003632:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	491f      	ldr	r1, [pc, #124]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003650:	d106      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	4a1a      	ldr	r2, [pc, #104]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800365c:	60d3      	str	r3, [r2, #12]
 800365e:	e011      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003668:	d10c      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3304      	adds	r3, #4
 800366e:	2101      	movs	r1, #1
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f8a9 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d02b      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369e:	4908      	ldr	r1, [pc, #32]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ae:	d109      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a02      	ldr	r2, [pc, #8]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ba:	60d3      	str	r3, [r2, #12]
 80036bc:	e014      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f877 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d02f      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036f4:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003702:	4928      	ldr	r1, [pc, #160]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003712:	d10d      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	2102      	movs	r1, #2
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f854 	bl	80037c8 <RCCEx_PLLSAI1_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d014      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	74bb      	strb	r3, [r7, #18]
 800372e:	e011      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003738:	d10c      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3320      	adds	r3, #32
 800373e:	2102      	movs	r1, #2
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f935 	bl	80039b0 <RCCEx_PLLSAI2_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374a:	7cfb      	ldrb	r3, [r7, #19]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003760:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800376e:	490d      	ldr	r1, [pc, #52]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003792:	4904      	ldr	r1, [pc, #16]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800379a:	7cbb      	ldrb	r3, [r7, #18]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037b2:	f043 0304 	orr.w	r3, r3, #4
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000

080037c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037d6:	4b75      	ldr	r3, [pc, #468]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d018      	beq.n	8003814 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037e2:	4b72      	ldr	r3, [pc, #456]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0203 	and.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d10d      	bne.n	800380e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
       ||
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037fa:	4b6c      	ldr	r3, [pc, #432]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
       ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d047      	beq.n	800389e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
 8003812:	e044      	b.n	800389e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d018      	beq.n	800384e <RCCEx_PLLSAI1_Config+0x86>
 800381c:	2b03      	cmp	r3, #3
 800381e:	d825      	bhi.n	800386c <RCCEx_PLLSAI1_Config+0xa4>
 8003820:	2b01      	cmp	r3, #1
 8003822:	d002      	beq.n	800382a <RCCEx_PLLSAI1_Config+0x62>
 8003824:	2b02      	cmp	r3, #2
 8003826:	d009      	beq.n	800383c <RCCEx_PLLSAI1_Config+0x74>
 8003828:	e020      	b.n	800386c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800382a:	4b60      	ldr	r3, [pc, #384]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d11d      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383a:	e01a      	b.n	8003872 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800383c:	4b5b      	ldr	r3, [pc, #364]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d116      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384c:	e013      	b.n	8003876 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800384e:	4b57      	ldr	r3, [pc, #348]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800385a:	4b54      	ldr	r3, [pc, #336]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800386a:	e006      	b.n	800387a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      break;
 8003870:	e004      	b.n	800387c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387a:	bf00      	nop
    }

    if(status == HAL_OK)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10d      	bne.n	800389e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003882:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	430b      	orrs	r3, r1
 8003898:	4944      	ldr	r1, [pc, #272]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d17d      	bne.n	80039a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a40      	ldr	r2, [pc, #256]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80038aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b0:	f7fd fea8 	bl	8001604 <HAL_GetTick>
 80038b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038b6:	e009      	b.n	80038cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038b8:	f7fd fea4 	bl	8001604 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d902      	bls.n	80038cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	73fb      	strb	r3, [r7, #15]
        break;
 80038ca:	e005      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038cc:	4b37      	ldr	r3, [pc, #220]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ef      	bne.n	80038b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d160      	bne.n	80039a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d111      	bne.n	8003908 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e4:	4b31      	ldr	r3, [pc, #196]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6892      	ldr	r2, [r2, #8]
 80038f4:	0211      	lsls	r1, r2, #8
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68d2      	ldr	r2, [r2, #12]
 80038fa:	0912      	lsrs	r2, r2, #4
 80038fc:	0452      	lsls	r2, r2, #17
 80038fe:	430a      	orrs	r2, r1
 8003900:	492a      	ldr	r1, [pc, #168]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	610b      	str	r3, [r1, #16]
 8003906:	e027      	b.n	8003958 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d112      	bne.n	8003934 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800390e:	4b27      	ldr	r3, [pc, #156]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003916:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6892      	ldr	r2, [r2, #8]
 800391e:	0211      	lsls	r1, r2, #8
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6912      	ldr	r2, [r2, #16]
 8003924:	0852      	lsrs	r2, r2, #1
 8003926:	3a01      	subs	r2, #1
 8003928:	0552      	lsls	r2, r2, #21
 800392a:	430a      	orrs	r2, r1
 800392c:	491f      	ldr	r1, [pc, #124]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	4313      	orrs	r3, r2
 8003930:	610b      	str	r3, [r1, #16]
 8003932:	e011      	b.n	8003958 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800393c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6892      	ldr	r2, [r2, #8]
 8003944:	0211      	lsls	r1, r2, #8
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6952      	ldr	r2, [r2, #20]
 800394a:	0852      	lsrs	r2, r2, #1
 800394c:	3a01      	subs	r2, #1
 800394e:	0652      	lsls	r2, r2, #25
 8003950:	430a      	orrs	r2, r1
 8003952:	4916      	ldr	r1, [pc, #88]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003958:	4b14      	ldr	r3, [pc, #80]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a13      	ldr	r2, [pc, #76]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003962:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fd fe4e 	bl	8001604 <HAL_GetTick>
 8003968:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800396a:	e009      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800396c:	f7fd fe4a 	bl	8001604 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d902      	bls.n	8003980 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	73fb      	strb	r3, [r7, #15]
          break;
 800397e:	e005      	b.n	800398c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ef      	beq.n	800396c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	4904      	ldr	r1, [pc, #16]	; (80039ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000

080039b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039be:	4b6a      	ldr	r3, [pc, #424]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d018      	beq.n	80039fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039ca:	4b67      	ldr	r3, [pc, #412]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0203 	and.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d10d      	bne.n	80039f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
       ||
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039e2:	4b61      	ldr	r3, [pc, #388]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
       ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d047      	beq.n	8003a86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e044      	b.n	8003a86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d018      	beq.n	8003a36 <RCCEx_PLLSAI2_Config+0x86>
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d825      	bhi.n	8003a54 <RCCEx_PLLSAI2_Config+0xa4>
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d002      	beq.n	8003a12 <RCCEx_PLLSAI2_Config+0x62>
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d009      	beq.n	8003a24 <RCCEx_PLLSAI2_Config+0x74>
 8003a10:	e020      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a12:	4b55      	ldr	r3, [pc, #340]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11d      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a22:	e01a      	b.n	8003a5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a24:	4b50      	ldr	r3, [pc, #320]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d116      	bne.n	8003a5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a34:	e013      	b.n	8003a5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a36:	4b4c      	ldr	r3, [pc, #304]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a42:	4b49      	ldr	r3, [pc, #292]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a52:	e006      	b.n	8003a62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      break;
 8003a58:	e004      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10d      	bne.n	8003a86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a6a:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	4939      	ldr	r1, [pc, #228]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d167      	bne.n	8003b5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a8c:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a98:	f7fd fdb4 	bl	8001604 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a9e:	e009      	b.n	8003ab4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa0:	f7fd fdb0 	bl	8001604 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d902      	bls.n	8003ab4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab2:	e005      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ef      	bne.n	8003aa0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d14a      	bne.n	8003b5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d111      	bne.n	8003af0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003acc:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6892      	ldr	r2, [r2, #8]
 8003adc:	0211      	lsls	r1, r2, #8
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	0912      	lsrs	r2, r2, #4
 8003ae4:	0452      	lsls	r2, r2, #17
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	491f      	ldr	r1, [pc, #124]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	614b      	str	r3, [r1, #20]
 8003aee:	e011      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003af8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6892      	ldr	r2, [r2, #8]
 8003b00:	0211      	lsls	r1, r2, #8
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6912      	ldr	r2, [r2, #16]
 8003b06:	0852      	lsrs	r2, r2, #1
 8003b08:	3a01      	subs	r2, #1
 8003b0a:	0652      	lsls	r2, r2, #25
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	4916      	ldr	r1, [pc, #88]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fd fd70 	bl	8001604 <HAL_GetTick>
 8003b24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b26:	e009      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b28:	f7fd fd6c 	bl	8001604 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d902      	bls.n	8003b3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	73fb      	strb	r3, [r7, #15]
          break;
 8003b3a:	e005      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4904      	ldr	r1, [pc, #16]	; (8003b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000

08003b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e095      	b.n	8003caa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b8e:	d009      	beq.n	8003ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	61da      	str	r2, [r3, #28]
 8003b96:	e005      	b.n	8003ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd faac 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003be4:	d902      	bls.n	8003bec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	e002      	b.n	8003bf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bfa:	d007      	beq.n	8003c0c <HAL_SPI_Init+0xa0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c04:	d002      	beq.n	8003c0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	ea42 0103 	orr.w	r1, r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	0c1b      	lsrs	r3, r3, #16
 8003c68:	f003 0204 	and.w	r2, r3, #4
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c88:	ea42 0103 	orr.w	r1, r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e040      	b.n	8003d46 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fd fa65 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2224      	movs	r2, #36	; 0x24
 8003cde:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f991 	bl	8004018 <UART_SetConfig>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e022      	b.n	8003d46 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fc0f 	bl	800452c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fc96 	bl	8004670 <UART_CheckIdleState>
 8003d44:	4603      	mov	r3, r0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b08a      	sub	sp, #40	; 0x28
 8003d52:	af02      	add	r7, sp, #8
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	f040 8082 	bne.w	8003e6c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_UART_Transmit+0x26>
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e07a      	b.n	8003e6e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Transmit+0x38>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e073      	b.n	8003e6e <HAL_UART_Transmit+0x120>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2221      	movs	r2, #33	; 0x21
 8003d9a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9c:	f7fd fc32 	bl	8001604 <HAL_GetTick>
 8003da0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	88fa      	ldrh	r2, [r7, #6]
 8003da6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dba:	d108      	bne.n	8003dce <HAL_UART_Transmit+0x80>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	e003      	b.n	8003dd6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003dde:	e02d      	b.n	8003e3c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2200      	movs	r2, #0
 8003de8:	2180      	movs	r1, #128	; 0x80
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fc89 	bl	8004702 <UART_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e039      	b.n	8003e6e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	881a      	ldrh	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e0c:	b292      	uxth	r2, r2
 8003e0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	3302      	adds	r3, #2
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	e008      	b.n	8003e2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	b292      	uxth	r2, r2
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	3301      	adds	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1cb      	bne.n	8003de0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2140      	movs	r1, #64	; 0x40
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fc55 	bl	8004702 <UART_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e005      	b.n	8003e6e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b08a      	sub	sp, #40	; 0x28
 8003e7a:	af02      	add	r7, sp, #8
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	f040 80bf 	bne.w	800400e <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Receive+0x26>
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0b7      	b.n	8004010 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Receive+0x38>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e0b0      	b.n	8004010 <HAL_UART_Receive+0x19a>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2222      	movs	r2, #34	; 0x22
 8003ec2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eca:	f7fd fb9b 	bl	8001604 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee8:	d10e      	bne.n	8003f08 <HAL_UART_Receive+0x92>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d105      	bne.n	8003efe <HAL_UART_Receive+0x88>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ef8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003efc:	e02d      	b.n	8003f5a <HAL_UART_Receive+0xe4>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	22ff      	movs	r2, #255	; 0xff
 8003f02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f06:	e028      	b.n	8003f5a <HAL_UART_Receive+0xe4>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10d      	bne.n	8003f2c <HAL_UART_Receive+0xb6>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <HAL_UART_Receive+0xac>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	22ff      	movs	r2, #255	; 0xff
 8003f1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f20:	e01b      	b.n	8003f5a <HAL_UART_Receive+0xe4>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	227f      	movs	r2, #127	; 0x7f
 8003f26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f2a:	e016      	b.n	8003f5a <HAL_UART_Receive+0xe4>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f34:	d10d      	bne.n	8003f52 <HAL_UART_Receive+0xdc>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <HAL_UART_Receive+0xd2>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	227f      	movs	r2, #127	; 0x7f
 8003f42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f46:	e008      	b.n	8003f5a <HAL_UART_Receive+0xe4>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	223f      	movs	r2, #63	; 0x3f
 8003f4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f50:	e003      	b.n	8003f5a <HAL_UART_Receive+0xe4>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f60:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6a:	d108      	bne.n	8003f7e <HAL_UART_Receive+0x108>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e003      	b.n	8003f86 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f8e:	e033      	b.n	8003ff8 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2200      	movs	r2, #0
 8003f98:	2120      	movs	r1, #32
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fbb1 	bl	8004702 <UART_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e032      	b.n	8004010 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10c      	bne.n	8003fca <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	8a7b      	ldrh	r3, [r7, #18]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	e00d      	b.n	8003fe6 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	8a7b      	ldrh	r3, [r7, #18]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	4013      	ands	r3, r2
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1c5      	bne.n	8003f90 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	b5b0      	push	{r4, r5, r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	4313      	orrs	r3, r2
 800403a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4bad      	ldr	r3, [pc, #692]	; (80042f8 <UART_SetConfig+0x2e0>)
 8004044:	4013      	ands	r3, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	69f9      	ldr	r1, [r7, #28]
 800404c:	430b      	orrs	r3, r1
 800404e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4aa2      	ldr	r2, [pc, #648]	; (80042fc <UART_SetConfig+0x2e4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	4313      	orrs	r3, r2
 800407e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a99      	ldr	r2, [pc, #612]	; (8004300 <UART_SetConfig+0x2e8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d121      	bne.n	80040e2 <UART_SetConfig+0xca>
 800409e:	4b99      	ldr	r3, [pc, #612]	; (8004304 <UART_SetConfig+0x2ec>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d817      	bhi.n	80040dc <UART_SetConfig+0xc4>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <UART_SetConfig+0x9c>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040c5 	.word	0x080040c5
 80040b8:	080040d1 	.word	0x080040d1
 80040bc:	080040cb 	.word	0x080040cb
 80040c0:	080040d7 	.word	0x080040d7
 80040c4:	2301      	movs	r3, #1
 80040c6:	76fb      	strb	r3, [r7, #27]
 80040c8:	e0e7      	b.n	800429a <UART_SetConfig+0x282>
 80040ca:	2302      	movs	r3, #2
 80040cc:	76fb      	strb	r3, [r7, #27]
 80040ce:	e0e4      	b.n	800429a <UART_SetConfig+0x282>
 80040d0:	2304      	movs	r3, #4
 80040d2:	76fb      	strb	r3, [r7, #27]
 80040d4:	e0e1      	b.n	800429a <UART_SetConfig+0x282>
 80040d6:	2308      	movs	r3, #8
 80040d8:	76fb      	strb	r3, [r7, #27]
 80040da:	e0de      	b.n	800429a <UART_SetConfig+0x282>
 80040dc:	2310      	movs	r3, #16
 80040de:	76fb      	strb	r3, [r7, #27]
 80040e0:	e0db      	b.n	800429a <UART_SetConfig+0x282>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a88      	ldr	r2, [pc, #544]	; (8004308 <UART_SetConfig+0x2f0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d132      	bne.n	8004152 <UART_SetConfig+0x13a>
 80040ec:	4b85      	ldr	r3, [pc, #532]	; (8004304 <UART_SetConfig+0x2ec>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b0c      	cmp	r3, #12
 80040f8:	d828      	bhi.n	800414c <UART_SetConfig+0x134>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0xe8>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004135 	.word	0x08004135
 8004104:	0800414d 	.word	0x0800414d
 8004108:	0800414d 	.word	0x0800414d
 800410c:	0800414d 	.word	0x0800414d
 8004110:	08004141 	.word	0x08004141
 8004114:	0800414d 	.word	0x0800414d
 8004118:	0800414d 	.word	0x0800414d
 800411c:	0800414d 	.word	0x0800414d
 8004120:	0800413b 	.word	0x0800413b
 8004124:	0800414d 	.word	0x0800414d
 8004128:	0800414d 	.word	0x0800414d
 800412c:	0800414d 	.word	0x0800414d
 8004130:	08004147 	.word	0x08004147
 8004134:	2300      	movs	r3, #0
 8004136:	76fb      	strb	r3, [r7, #27]
 8004138:	e0af      	b.n	800429a <UART_SetConfig+0x282>
 800413a:	2302      	movs	r3, #2
 800413c:	76fb      	strb	r3, [r7, #27]
 800413e:	e0ac      	b.n	800429a <UART_SetConfig+0x282>
 8004140:	2304      	movs	r3, #4
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	e0a9      	b.n	800429a <UART_SetConfig+0x282>
 8004146:	2308      	movs	r3, #8
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e0a6      	b.n	800429a <UART_SetConfig+0x282>
 800414c:	2310      	movs	r3, #16
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	e0a3      	b.n	800429a <UART_SetConfig+0x282>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a6d      	ldr	r2, [pc, #436]	; (800430c <UART_SetConfig+0x2f4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d120      	bne.n	800419e <UART_SetConfig+0x186>
 800415c:	4b69      	ldr	r3, [pc, #420]	; (8004304 <UART_SetConfig+0x2ec>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004166:	2b30      	cmp	r3, #48	; 0x30
 8004168:	d013      	beq.n	8004192 <UART_SetConfig+0x17a>
 800416a:	2b30      	cmp	r3, #48	; 0x30
 800416c:	d814      	bhi.n	8004198 <UART_SetConfig+0x180>
 800416e:	2b20      	cmp	r3, #32
 8004170:	d009      	beq.n	8004186 <UART_SetConfig+0x16e>
 8004172:	2b20      	cmp	r3, #32
 8004174:	d810      	bhi.n	8004198 <UART_SetConfig+0x180>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <UART_SetConfig+0x168>
 800417a:	2b10      	cmp	r3, #16
 800417c:	d006      	beq.n	800418c <UART_SetConfig+0x174>
 800417e:	e00b      	b.n	8004198 <UART_SetConfig+0x180>
 8004180:	2300      	movs	r3, #0
 8004182:	76fb      	strb	r3, [r7, #27]
 8004184:	e089      	b.n	800429a <UART_SetConfig+0x282>
 8004186:	2302      	movs	r3, #2
 8004188:	76fb      	strb	r3, [r7, #27]
 800418a:	e086      	b.n	800429a <UART_SetConfig+0x282>
 800418c:	2304      	movs	r3, #4
 800418e:	76fb      	strb	r3, [r7, #27]
 8004190:	e083      	b.n	800429a <UART_SetConfig+0x282>
 8004192:	2308      	movs	r3, #8
 8004194:	76fb      	strb	r3, [r7, #27]
 8004196:	e080      	b.n	800429a <UART_SetConfig+0x282>
 8004198:	2310      	movs	r3, #16
 800419a:	76fb      	strb	r3, [r7, #27]
 800419c:	e07d      	b.n	800429a <UART_SetConfig+0x282>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a5b      	ldr	r2, [pc, #364]	; (8004310 <UART_SetConfig+0x2f8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d120      	bne.n	80041ea <UART_SetConfig+0x1d2>
 80041a8:	4b56      	ldr	r3, [pc, #344]	; (8004304 <UART_SetConfig+0x2ec>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041b2:	2bc0      	cmp	r3, #192	; 0xc0
 80041b4:	d013      	beq.n	80041de <UART_SetConfig+0x1c6>
 80041b6:	2bc0      	cmp	r3, #192	; 0xc0
 80041b8:	d814      	bhi.n	80041e4 <UART_SetConfig+0x1cc>
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d009      	beq.n	80041d2 <UART_SetConfig+0x1ba>
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d810      	bhi.n	80041e4 <UART_SetConfig+0x1cc>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <UART_SetConfig+0x1b4>
 80041c6:	2b40      	cmp	r3, #64	; 0x40
 80041c8:	d006      	beq.n	80041d8 <UART_SetConfig+0x1c0>
 80041ca:	e00b      	b.n	80041e4 <UART_SetConfig+0x1cc>
 80041cc:	2300      	movs	r3, #0
 80041ce:	76fb      	strb	r3, [r7, #27]
 80041d0:	e063      	b.n	800429a <UART_SetConfig+0x282>
 80041d2:	2302      	movs	r3, #2
 80041d4:	76fb      	strb	r3, [r7, #27]
 80041d6:	e060      	b.n	800429a <UART_SetConfig+0x282>
 80041d8:	2304      	movs	r3, #4
 80041da:	76fb      	strb	r3, [r7, #27]
 80041dc:	e05d      	b.n	800429a <UART_SetConfig+0x282>
 80041de:	2308      	movs	r3, #8
 80041e0:	76fb      	strb	r3, [r7, #27]
 80041e2:	e05a      	b.n	800429a <UART_SetConfig+0x282>
 80041e4:	2310      	movs	r3, #16
 80041e6:	76fb      	strb	r3, [r7, #27]
 80041e8:	e057      	b.n	800429a <UART_SetConfig+0x282>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a49      	ldr	r2, [pc, #292]	; (8004314 <UART_SetConfig+0x2fc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d125      	bne.n	8004240 <UART_SetConfig+0x228>
 80041f4:	4b43      	ldr	r3, [pc, #268]	; (8004304 <UART_SetConfig+0x2ec>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004202:	d017      	beq.n	8004234 <UART_SetConfig+0x21c>
 8004204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004208:	d817      	bhi.n	800423a <UART_SetConfig+0x222>
 800420a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800420e:	d00b      	beq.n	8004228 <UART_SetConfig+0x210>
 8004210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004214:	d811      	bhi.n	800423a <UART_SetConfig+0x222>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <UART_SetConfig+0x20a>
 800421a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421e:	d006      	beq.n	800422e <UART_SetConfig+0x216>
 8004220:	e00b      	b.n	800423a <UART_SetConfig+0x222>
 8004222:	2300      	movs	r3, #0
 8004224:	76fb      	strb	r3, [r7, #27]
 8004226:	e038      	b.n	800429a <UART_SetConfig+0x282>
 8004228:	2302      	movs	r3, #2
 800422a:	76fb      	strb	r3, [r7, #27]
 800422c:	e035      	b.n	800429a <UART_SetConfig+0x282>
 800422e:	2304      	movs	r3, #4
 8004230:	76fb      	strb	r3, [r7, #27]
 8004232:	e032      	b.n	800429a <UART_SetConfig+0x282>
 8004234:	2308      	movs	r3, #8
 8004236:	76fb      	strb	r3, [r7, #27]
 8004238:	e02f      	b.n	800429a <UART_SetConfig+0x282>
 800423a:	2310      	movs	r3, #16
 800423c:	76fb      	strb	r3, [r7, #27]
 800423e:	e02c      	b.n	800429a <UART_SetConfig+0x282>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2d      	ldr	r2, [pc, #180]	; (80042fc <UART_SetConfig+0x2e4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d125      	bne.n	8004296 <UART_SetConfig+0x27e>
 800424a:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <UART_SetConfig+0x2ec>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004258:	d017      	beq.n	800428a <UART_SetConfig+0x272>
 800425a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800425e:	d817      	bhi.n	8004290 <UART_SetConfig+0x278>
 8004260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004264:	d00b      	beq.n	800427e <UART_SetConfig+0x266>
 8004266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426a:	d811      	bhi.n	8004290 <UART_SetConfig+0x278>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <UART_SetConfig+0x260>
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004274:	d006      	beq.n	8004284 <UART_SetConfig+0x26c>
 8004276:	e00b      	b.n	8004290 <UART_SetConfig+0x278>
 8004278:	2300      	movs	r3, #0
 800427a:	76fb      	strb	r3, [r7, #27]
 800427c:	e00d      	b.n	800429a <UART_SetConfig+0x282>
 800427e:	2302      	movs	r3, #2
 8004280:	76fb      	strb	r3, [r7, #27]
 8004282:	e00a      	b.n	800429a <UART_SetConfig+0x282>
 8004284:	2304      	movs	r3, #4
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	e007      	b.n	800429a <UART_SetConfig+0x282>
 800428a:	2308      	movs	r3, #8
 800428c:	76fb      	strb	r3, [r7, #27]
 800428e:	e004      	b.n	800429a <UART_SetConfig+0x282>
 8004290:	2310      	movs	r3, #16
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	e001      	b.n	800429a <UART_SetConfig+0x282>
 8004296:	2310      	movs	r3, #16
 8004298:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a17      	ldr	r2, [pc, #92]	; (80042fc <UART_SetConfig+0x2e4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	f040 8087 	bne.w	80043b4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042a6:	7efb      	ldrb	r3, [r7, #27]
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d837      	bhi.n	800431c <UART_SetConfig+0x304>
 80042ac:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0x29c>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	0800431d 	.word	0x0800431d
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	0800431d 	.word	0x0800431d
 80042c4:	080042e7 	.word	0x080042e7
 80042c8:	0800431d 	.word	0x0800431d
 80042cc:	0800431d 	.word	0x0800431d
 80042d0:	0800431d 	.word	0x0800431d
 80042d4:	080042ef 	.word	0x080042ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7fe fef0 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 80042dc:	6178      	str	r0, [r7, #20]
        break;
 80042de:	e022      	b.n	8004326 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <UART_SetConfig+0x300>)
 80042e2:	617b      	str	r3, [r7, #20]
        break;
 80042e4:	e01f      	b.n	8004326 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e6:	f7fe fe51 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 80042ea:	6178      	str	r0, [r7, #20]
        break;
 80042ec:	e01b      	b.n	8004326 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f2:	617b      	str	r3, [r7, #20]
        break;
 80042f4:	e017      	b.n	8004326 <UART_SetConfig+0x30e>
 80042f6:	bf00      	nop
 80042f8:	efff69f3 	.word	0xefff69f3
 80042fc:	40008000 	.word	0x40008000
 8004300:	40013800 	.word	0x40013800
 8004304:	40021000 	.word	0x40021000
 8004308:	40004400 	.word	0x40004400
 800430c:	40004800 	.word	0x40004800
 8004310:	40004c00 	.word	0x40004c00
 8004314:	40005000 	.word	0x40005000
 8004318:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	76bb      	strb	r3, [r7, #26]
        break;
 8004324:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80f1 	beq.w	8004510 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	429a      	cmp	r2, r3
 800433c:	d305      	bcc.n	800434a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	429a      	cmp	r2, r3
 8004348:	d902      	bls.n	8004350 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	76bb      	strb	r3, [r7, #26]
 800434e:	e0df      	b.n	8004510 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4618      	mov	r0, r3
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	020b      	lsls	r3, r1, #8
 8004362:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004366:	0202      	lsls	r2, r0, #8
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	6849      	ldr	r1, [r1, #4]
 800436c:	0849      	lsrs	r1, r1, #1
 800436e:	4608      	mov	r0, r1
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	1814      	adds	r4, r2, r0
 8004376:	eb43 0501 	adc.w	r5, r3, r1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	461a      	mov	r2, r3
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	4620      	mov	r0, r4
 8004386:	4629      	mov	r1, r5
 8004388:	f7fb ff8a 	bl	80002a0 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4613      	mov	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439a:	d308      	bcc.n	80043ae <UART_SetConfig+0x396>
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a2:	d204      	bcs.n	80043ae <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	e0b0      	b.n	8004510 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	76bb      	strb	r3, [r7, #26]
 80043b2:	e0ad      	b.n	8004510 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043bc:	d15c      	bne.n	8004478 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80043be:	7efb      	ldrb	r3, [r7, #27]
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d828      	bhi.n	8004416 <UART_SetConfig+0x3fe>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0x3b4>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004417 	.word	0x08004417
 80043dc:	08004407 	.word	0x08004407
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004417 	.word	0x08004417
 80043e8:	08004417 	.word	0x08004417
 80043ec:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7fe fe64 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 80043f4:	6178      	str	r0, [r7, #20]
        break;
 80043f6:	e013      	b.n	8004420 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fe fe76 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 80043fc:	6178      	str	r0, [r7, #20]
        break;
 80043fe:	e00f      	b.n	8004420 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b49      	ldr	r3, [pc, #292]	; (8004528 <UART_SetConfig+0x510>)
 8004402:	617b      	str	r3, [r7, #20]
        break;
 8004404:	e00c      	b.n	8004420 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fe fdc1 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 800440a:	6178      	str	r0, [r7, #20]
        break;
 800440c:	e008      	b.n	8004420 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	617b      	str	r3, [r7, #20]
        break;
 8004414:	e004      	b.n	8004420 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	76bb      	strb	r3, [r7, #26]
        break;
 800441e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d074      	beq.n	8004510 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	005a      	lsls	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	441a      	add	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	b29b      	uxth	r3, r3
 800443c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b0f      	cmp	r3, #15
 8004442:	d916      	bls.n	8004472 <UART_SetConfig+0x45a>
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444a:	d212      	bcs.n	8004472 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f023 030f 	bic.w	r3, r3, #15
 8004454:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	b29b      	uxth	r3, r3
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	b29a      	uxth	r2, r3
 8004462:	89fb      	ldrh	r3, [r7, #14]
 8004464:	4313      	orrs	r3, r2
 8004466:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	89fa      	ldrh	r2, [r7, #14]
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	e04e      	b.n	8004510 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	76bb      	strb	r3, [r7, #26]
 8004476:	e04b      	b.n	8004510 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004478:	7efb      	ldrb	r3, [r7, #27]
 800447a:	2b08      	cmp	r3, #8
 800447c:	d827      	bhi.n	80044ce <UART_SetConfig+0x4b6>
 800447e:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <UART_SetConfig+0x46c>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	080044a9 	.word	0x080044a9
 8004488:	080044b1 	.word	0x080044b1
 800448c:	080044b9 	.word	0x080044b9
 8004490:	080044cf 	.word	0x080044cf
 8004494:	080044bf 	.word	0x080044bf
 8004498:	080044cf 	.word	0x080044cf
 800449c:	080044cf 	.word	0x080044cf
 80044a0:	080044cf 	.word	0x080044cf
 80044a4:	080044c7 	.word	0x080044c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a8:	f7fe fe08 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 80044ac:	6178      	str	r0, [r7, #20]
        break;
 80044ae:	e013      	b.n	80044d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b0:	f7fe fe1a 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 80044b4:	6178      	str	r0, [r7, #20]
        break;
 80044b6:	e00f      	b.n	80044d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <UART_SetConfig+0x510>)
 80044ba:	617b      	str	r3, [r7, #20]
        break;
 80044bc:	e00c      	b.n	80044d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044be:	f7fe fd65 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 80044c2:	6178      	str	r0, [r7, #20]
        break;
 80044c4:	e008      	b.n	80044d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ca:	617b      	str	r3, [r7, #20]
        break;
 80044cc:	e004      	b.n	80044d8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	76bb      	strb	r3, [r7, #26]
        break;
 80044d6:	bf00      	nop
    }

    if (pclk != 0U)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d018      	beq.n	8004510 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	085a      	lsrs	r2, r3, #1
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	441a      	add	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b0f      	cmp	r3, #15
 80044f8:	d908      	bls.n	800450c <UART_SetConfig+0x4f4>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004500:	d204      	bcs.n	800450c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	e001      	b.n	8004510 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800451c:	7ebb      	ldrb	r3, [r7, #26]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bdb0      	pop	{r4, r5, r7, pc}
 8004526:	bf00      	nop
 8004528:	00f42400 	.word	0x00f42400

0800452c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01a      	beq.n	8004642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462a:	d10a      	bne.n	8004642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
  }
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af02      	add	r7, sp, #8
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004680:	f7fc ffc0 	bl	8001604 <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b08      	cmp	r3, #8
 8004692:	d10e      	bne.n	80046b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f82d 	bl	8004702 <UART_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e023      	b.n	80046fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d10e      	bne.n	80046de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f817 	bl	8004702 <UART_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e00d      	b.n	80046fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004712:	e05e      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471a:	d05a      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fc ff72 	bl	8001604 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <UART_WaitOnFlagUntilTimeout+0x30>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11b      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004740:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e043      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02c      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004786:	d124      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004790:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047a0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2220      	movs	r2, #32
 80047b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e00f      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	429a      	cmp	r2, r3
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d091      	beq.n	8004714 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047fa:	b084      	sub	sp, #16
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	f107 001c 	add.w	r0, r7, #28
 8004808:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fa23 	bl	8004c64 <USB_CoreReset>
 800481e:	4603      	mov	r3, r0
 8004820:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
 8004834:	e005      	b.n	8004842 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800484e:	b004      	add	sp, #16
 8004850:	4770      	bx	lr

08004852 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d106      	bne.n	80048a0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	e00b      	b.n	80048b8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	e001      	b.n	80048b8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e003      	b.n	80048c0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80048b8:	2032      	movs	r0, #50	; 0x32
 80048ba:	f7fc feaf 	bl	800161c <HAL_Delay>

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048c8:	b084      	sub	sp, #16
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	e009      	b.n	80048fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3340      	adds	r3, #64	; 0x40
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	2200      	movs	r2, #0
 80048f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	3301      	adds	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b0e      	cmp	r3, #14
 8004900:	d9f2      	bls.n	80048e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d11c      	bne.n	8004942 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004916:	f043 0302 	orr.w	r3, r3, #2
 800491a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e005      	b.n	800494e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004954:	461a      	mov	r2, r3
 8004956:	2300      	movs	r3, #0
 8004958:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	4619      	mov	r1, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004968:	461a      	mov	r2, r3
 800496a:	680b      	ldr	r3, [r1, #0]
 800496c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800496e:	2103      	movs	r1, #3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f93d 	bl	8004bf0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004976:	2110      	movs	r1, #16
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f8f1 	bl	8004b60 <USB_FlushTxFifo>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f90f 	bl	8004bac <USB_FlushRxFifo>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	461a      	mov	r2, r3
 80049a0:	2300      	movs	r3, #0
 80049a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049aa:	461a      	mov	r2, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	461a      	mov	r2, r3
 80049b8:	2300      	movs	r3, #0
 80049ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	e043      	b.n	8004a4a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049d8:	d118      	bne.n	8004a0c <USB_DevInit+0x144>
    {
      if (i == 0U)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ec:	461a      	mov	r2, r3
 80049ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	e013      	b.n	8004a1e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	461a      	mov	r2, r3
 8004a04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e008      	b.n	8004a1e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	3301      	adds	r3, #1
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3b7      	bcc.n	80049c2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a52:	2300      	movs	r3, #0
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	e043      	b.n	8004ae0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a6e:	d118      	bne.n	8004aa2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	461a      	mov	r2, r3
 8004a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e013      	b.n	8004ab4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	e008      	b.n	8004ab4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ad8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	3301      	adds	r3, #1
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d3b7      	bcc.n	8004a58 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f043 0210 	orr.w	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <USB_DevInit+0x294>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f043 0208 	orr.w	r2, r3, #8
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d107      	bne.n	8004b4a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b42:	f043 0304 	orr.w	r3, r3, #4
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b56:	b004      	add	sp, #16
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	803c3800 	.word	0x803c3800

08004b60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	019b      	lsls	r3, r3, #6
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a09      	ldr	r2, [pc, #36]	; (8004ba8 <USB_FlushTxFifo+0x48>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e006      	b.n	8004b9a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d0f0      	beq.n	8004b7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	00030d40 	.word	0x00030d40

08004bac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2210      	movs	r2, #16
 8004bbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a09      	ldr	r2, [pc, #36]	; (8004bec <USB_FlushRxFifo+0x40>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d901      	bls.n	8004bd0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e006      	b.n	8004bde <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d0f0      	beq.n	8004bbe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	00030d40 	.word	0x00030d40

08004bf0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c10:	4313      	orrs	r3, r2
 8004c12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b085      	sub	sp, #20
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c3c:	f023 0303 	bic.w	r3, r3, #3
 8004c40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3301      	adds	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <USB_CoreReset+0x64>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e01b      	b.n	8004cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	daf2      	bge.n	8004c70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f043 0201 	orr.w	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <USB_CoreReset+0x64>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e006      	b.n	8004cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d0f0      	beq.n	8004c9a <USB_CoreReset+0x36>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	00030d40 	.word	0x00030d40

08004ccc <__errno>:
 8004ccc:	4b01      	ldr	r3, [pc, #4]	; (8004cd4 <__errno+0x8>)
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000010 	.word	0x20000010

08004cd8 <__libc_init_array>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	4d0d      	ldr	r5, [pc, #52]	; (8004d10 <__libc_init_array+0x38>)
 8004cdc:	4c0d      	ldr	r4, [pc, #52]	; (8004d14 <__libc_init_array+0x3c>)
 8004cde:	1b64      	subs	r4, r4, r5
 8004ce0:	10a4      	asrs	r4, r4, #2
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	42a6      	cmp	r6, r4
 8004ce6:	d109      	bne.n	8004cfc <__libc_init_array+0x24>
 8004ce8:	4d0b      	ldr	r5, [pc, #44]	; (8004d18 <__libc_init_array+0x40>)
 8004cea:	4c0c      	ldr	r4, [pc, #48]	; (8004d1c <__libc_init_array+0x44>)
 8004cec:	f000 fc62 	bl	80055b4 <_init>
 8004cf0:	1b64      	subs	r4, r4, r5
 8004cf2:	10a4      	asrs	r4, r4, #2
 8004cf4:	2600      	movs	r6, #0
 8004cf6:	42a6      	cmp	r6, r4
 8004cf8:	d105      	bne.n	8004d06 <__libc_init_array+0x2e>
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d00:	4798      	blx	r3
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7ee      	b.n	8004ce4 <__libc_init_array+0xc>
 8004d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0a:	4798      	blx	r3
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7f2      	b.n	8004cf6 <__libc_init_array+0x1e>
 8004d10:	08005798 	.word	0x08005798
 8004d14:	08005798 	.word	0x08005798
 8004d18:	08005798 	.word	0x08005798
 8004d1c:	0800579c 	.word	0x0800579c

08004d20 <memset>:
 8004d20:	4402      	add	r2, r0
 8004d22:	4603      	mov	r3, r0
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d100      	bne.n	8004d2a <memset+0xa>
 8004d28:	4770      	bx	lr
 8004d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2e:	e7f9      	b.n	8004d24 <memset+0x4>

08004d30 <sniprintf>:
 8004d30:	b40c      	push	{r2, r3}
 8004d32:	b530      	push	{r4, r5, lr}
 8004d34:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <sniprintf+0x64>)
 8004d36:	1e0c      	subs	r4, r1, #0
 8004d38:	681d      	ldr	r5, [r3, #0]
 8004d3a:	b09d      	sub	sp, #116	; 0x74
 8004d3c:	da08      	bge.n	8004d50 <sniprintf+0x20>
 8004d3e:	238b      	movs	r3, #139	; 0x8b
 8004d40:	602b      	str	r3, [r5, #0]
 8004d42:	f04f 30ff 	mov.w	r0, #4294967295
 8004d46:	b01d      	add	sp, #116	; 0x74
 8004d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d4c:	b002      	add	sp, #8
 8004d4e:	4770      	bx	lr
 8004d50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d58:	bf14      	ite	ne
 8004d5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d5e:	4623      	moveq	r3, r4
 8004d60:	9304      	str	r3, [sp, #16]
 8004d62:	9307      	str	r3, [sp, #28]
 8004d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d68:	9002      	str	r0, [sp, #8]
 8004d6a:	9006      	str	r0, [sp, #24]
 8004d6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d72:	ab21      	add	r3, sp, #132	; 0x84
 8004d74:	a902      	add	r1, sp, #8
 8004d76:	4628      	mov	r0, r5
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	f000 f869 	bl	8004e50 <_svfiprintf_r>
 8004d7e:	1c43      	adds	r3, r0, #1
 8004d80:	bfbc      	itt	lt
 8004d82:	238b      	movlt	r3, #139	; 0x8b
 8004d84:	602b      	strlt	r3, [r5, #0]
 8004d86:	2c00      	cmp	r4, #0
 8004d88:	d0dd      	beq.n	8004d46 <sniprintf+0x16>
 8004d8a:	9b02      	ldr	r3, [sp, #8]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e7d9      	b.n	8004d46 <sniprintf+0x16>
 8004d92:	bf00      	nop
 8004d94:	20000010 	.word	0x20000010

08004d98 <__ssputs_r>:
 8004d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d9c:	688e      	ldr	r6, [r1, #8]
 8004d9e:	429e      	cmp	r6, r3
 8004da0:	4682      	mov	sl, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	4690      	mov	r8, r2
 8004da6:	461f      	mov	r7, r3
 8004da8:	d838      	bhi.n	8004e1c <__ssputs_r+0x84>
 8004daa:	898a      	ldrh	r2, [r1, #12]
 8004dac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004db0:	d032      	beq.n	8004e18 <__ssputs_r+0x80>
 8004db2:	6825      	ldr	r5, [r4, #0]
 8004db4:	6909      	ldr	r1, [r1, #16]
 8004db6:	eba5 0901 	sub.w	r9, r5, r1
 8004dba:	6965      	ldr	r5, [r4, #20]
 8004dbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	444b      	add	r3, r9
 8004dc8:	106d      	asrs	r5, r5, #1
 8004dca:	429d      	cmp	r5, r3
 8004dcc:	bf38      	it	cc
 8004dce:	461d      	movcc	r5, r3
 8004dd0:	0553      	lsls	r3, r2, #21
 8004dd2:	d531      	bpl.n	8004e38 <__ssputs_r+0xa0>
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	f000 fb47 	bl	8005468 <_malloc_r>
 8004dda:	4606      	mov	r6, r0
 8004ddc:	b950      	cbnz	r0, 8004df4 <__ssputs_r+0x5c>
 8004dde:	230c      	movs	r3, #12
 8004de0:	f8ca 3000 	str.w	r3, [sl]
 8004de4:	89a3      	ldrh	r3, [r4, #12]
 8004de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dea:	81a3      	strh	r3, [r4, #12]
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df4:	6921      	ldr	r1, [r4, #16]
 8004df6:	464a      	mov	r2, r9
 8004df8:	f000 fabe 	bl	8005378 <memcpy>
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	81a3      	strh	r3, [r4, #12]
 8004e08:	6126      	str	r6, [r4, #16]
 8004e0a:	6165      	str	r5, [r4, #20]
 8004e0c:	444e      	add	r6, r9
 8004e0e:	eba5 0509 	sub.w	r5, r5, r9
 8004e12:	6026      	str	r6, [r4, #0]
 8004e14:	60a5      	str	r5, [r4, #8]
 8004e16:	463e      	mov	r6, r7
 8004e18:	42be      	cmp	r6, r7
 8004e1a:	d900      	bls.n	8004e1e <__ssputs_r+0x86>
 8004e1c:	463e      	mov	r6, r7
 8004e1e:	4632      	mov	r2, r6
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	4641      	mov	r1, r8
 8004e24:	f000 fab6 	bl	8005394 <memmove>
 8004e28:	68a3      	ldr	r3, [r4, #8]
 8004e2a:	6822      	ldr	r2, [r4, #0]
 8004e2c:	1b9b      	subs	r3, r3, r6
 8004e2e:	4432      	add	r2, r6
 8004e30:	60a3      	str	r3, [r4, #8]
 8004e32:	6022      	str	r2, [r4, #0]
 8004e34:	2000      	movs	r0, #0
 8004e36:	e7db      	b.n	8004df0 <__ssputs_r+0x58>
 8004e38:	462a      	mov	r2, r5
 8004e3a:	f000 fb6f 	bl	800551c <_realloc_r>
 8004e3e:	4606      	mov	r6, r0
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d1e1      	bne.n	8004e08 <__ssputs_r+0x70>
 8004e44:	6921      	ldr	r1, [r4, #16]
 8004e46:	4650      	mov	r0, sl
 8004e48:	f000 fabe 	bl	80053c8 <_free_r>
 8004e4c:	e7c7      	b.n	8004dde <__ssputs_r+0x46>
	...

08004e50 <_svfiprintf_r>:
 8004e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e54:	4698      	mov	r8, r3
 8004e56:	898b      	ldrh	r3, [r1, #12]
 8004e58:	061b      	lsls	r3, r3, #24
 8004e5a:	b09d      	sub	sp, #116	; 0x74
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	460d      	mov	r5, r1
 8004e60:	4614      	mov	r4, r2
 8004e62:	d50e      	bpl.n	8004e82 <_svfiprintf_r+0x32>
 8004e64:	690b      	ldr	r3, [r1, #16]
 8004e66:	b963      	cbnz	r3, 8004e82 <_svfiprintf_r+0x32>
 8004e68:	2140      	movs	r1, #64	; 0x40
 8004e6a:	f000 fafd 	bl	8005468 <_malloc_r>
 8004e6e:	6028      	str	r0, [r5, #0]
 8004e70:	6128      	str	r0, [r5, #16]
 8004e72:	b920      	cbnz	r0, 8004e7e <_svfiprintf_r+0x2e>
 8004e74:	230c      	movs	r3, #12
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	e0d1      	b.n	8005022 <_svfiprintf_r+0x1d2>
 8004e7e:	2340      	movs	r3, #64	; 0x40
 8004e80:	616b      	str	r3, [r5, #20]
 8004e82:	2300      	movs	r3, #0
 8004e84:	9309      	str	r3, [sp, #36]	; 0x24
 8004e86:	2320      	movs	r3, #32
 8004e88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e90:	2330      	movs	r3, #48	; 0x30
 8004e92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800503c <_svfiprintf_r+0x1ec>
 8004e96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e9a:	f04f 0901 	mov.w	r9, #1
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	469a      	mov	sl, r3
 8004ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea6:	b10a      	cbz	r2, 8004eac <_svfiprintf_r+0x5c>
 8004ea8:	2a25      	cmp	r2, #37	; 0x25
 8004eaa:	d1f9      	bne.n	8004ea0 <_svfiprintf_r+0x50>
 8004eac:	ebba 0b04 	subs.w	fp, sl, r4
 8004eb0:	d00b      	beq.n	8004eca <_svfiprintf_r+0x7a>
 8004eb2:	465b      	mov	r3, fp
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	4638      	mov	r0, r7
 8004eba:	f7ff ff6d 	bl	8004d98 <__ssputs_r>
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	f000 80aa 	beq.w	8005018 <_svfiprintf_r+0x1c8>
 8004ec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ec6:	445a      	add	r2, fp
 8004ec8:	9209      	str	r2, [sp, #36]	; 0x24
 8004eca:	f89a 3000 	ldrb.w	r3, [sl]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80a2 	beq.w	8005018 <_svfiprintf_r+0x1c8>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ede:	f10a 0a01 	add.w	sl, sl, #1
 8004ee2:	9304      	str	r3, [sp, #16]
 8004ee4:	9307      	str	r3, [sp, #28]
 8004ee6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eea:	931a      	str	r3, [sp, #104]	; 0x68
 8004eec:	4654      	mov	r4, sl
 8004eee:	2205      	movs	r2, #5
 8004ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef4:	4851      	ldr	r0, [pc, #324]	; (800503c <_svfiprintf_r+0x1ec>)
 8004ef6:	f7fb f983 	bl	8000200 <memchr>
 8004efa:	9a04      	ldr	r2, [sp, #16]
 8004efc:	b9d8      	cbnz	r0, 8004f36 <_svfiprintf_r+0xe6>
 8004efe:	06d0      	lsls	r0, r2, #27
 8004f00:	bf44      	itt	mi
 8004f02:	2320      	movmi	r3, #32
 8004f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f08:	0711      	lsls	r1, r2, #28
 8004f0a:	bf44      	itt	mi
 8004f0c:	232b      	movmi	r3, #43	; 0x2b
 8004f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f12:	f89a 3000 	ldrb.w	r3, [sl]
 8004f16:	2b2a      	cmp	r3, #42	; 0x2a
 8004f18:	d015      	beq.n	8004f46 <_svfiprintf_r+0xf6>
 8004f1a:	9a07      	ldr	r2, [sp, #28]
 8004f1c:	4654      	mov	r4, sl
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f04f 0c0a 	mov.w	ip, #10
 8004f24:	4621      	mov	r1, r4
 8004f26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f2a:	3b30      	subs	r3, #48	; 0x30
 8004f2c:	2b09      	cmp	r3, #9
 8004f2e:	d94e      	bls.n	8004fce <_svfiprintf_r+0x17e>
 8004f30:	b1b0      	cbz	r0, 8004f60 <_svfiprintf_r+0x110>
 8004f32:	9207      	str	r2, [sp, #28]
 8004f34:	e014      	b.n	8004f60 <_svfiprintf_r+0x110>
 8004f36:	eba0 0308 	sub.w	r3, r0, r8
 8004f3a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	9304      	str	r3, [sp, #16]
 8004f42:	46a2      	mov	sl, r4
 8004f44:	e7d2      	b.n	8004eec <_svfiprintf_r+0x9c>
 8004f46:	9b03      	ldr	r3, [sp, #12]
 8004f48:	1d19      	adds	r1, r3, #4
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	9103      	str	r1, [sp, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bfbb      	ittet	lt
 8004f52:	425b      	neglt	r3, r3
 8004f54:	f042 0202 	orrlt.w	r2, r2, #2
 8004f58:	9307      	strge	r3, [sp, #28]
 8004f5a:	9307      	strlt	r3, [sp, #28]
 8004f5c:	bfb8      	it	lt
 8004f5e:	9204      	strlt	r2, [sp, #16]
 8004f60:	7823      	ldrb	r3, [r4, #0]
 8004f62:	2b2e      	cmp	r3, #46	; 0x2e
 8004f64:	d10c      	bne.n	8004f80 <_svfiprintf_r+0x130>
 8004f66:	7863      	ldrb	r3, [r4, #1]
 8004f68:	2b2a      	cmp	r3, #42	; 0x2a
 8004f6a:	d135      	bne.n	8004fd8 <_svfiprintf_r+0x188>
 8004f6c:	9b03      	ldr	r3, [sp, #12]
 8004f6e:	1d1a      	adds	r2, r3, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	9203      	str	r2, [sp, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bfb8      	it	lt
 8004f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f7c:	3402      	adds	r4, #2
 8004f7e:	9305      	str	r3, [sp, #20]
 8004f80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800504c <_svfiprintf_r+0x1fc>
 8004f84:	7821      	ldrb	r1, [r4, #0]
 8004f86:	2203      	movs	r2, #3
 8004f88:	4650      	mov	r0, sl
 8004f8a:	f7fb f939 	bl	8000200 <memchr>
 8004f8e:	b140      	cbz	r0, 8004fa2 <_svfiprintf_r+0x152>
 8004f90:	2340      	movs	r3, #64	; 0x40
 8004f92:	eba0 000a 	sub.w	r0, r0, sl
 8004f96:	fa03 f000 	lsl.w	r0, r3, r0
 8004f9a:	9b04      	ldr	r3, [sp, #16]
 8004f9c:	4303      	orrs	r3, r0
 8004f9e:	3401      	adds	r4, #1
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa6:	4826      	ldr	r0, [pc, #152]	; (8005040 <_svfiprintf_r+0x1f0>)
 8004fa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fac:	2206      	movs	r2, #6
 8004fae:	f7fb f927 	bl	8000200 <memchr>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d038      	beq.n	8005028 <_svfiprintf_r+0x1d8>
 8004fb6:	4b23      	ldr	r3, [pc, #140]	; (8005044 <_svfiprintf_r+0x1f4>)
 8004fb8:	bb1b      	cbnz	r3, 8005002 <_svfiprintf_r+0x1b2>
 8004fba:	9b03      	ldr	r3, [sp, #12]
 8004fbc:	3307      	adds	r3, #7
 8004fbe:	f023 0307 	bic.w	r3, r3, #7
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	9303      	str	r3, [sp, #12]
 8004fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc8:	4433      	add	r3, r6
 8004fca:	9309      	str	r3, [sp, #36]	; 0x24
 8004fcc:	e767      	b.n	8004e9e <_svfiprintf_r+0x4e>
 8004fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	e7a5      	b.n	8004f24 <_svfiprintf_r+0xd4>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	3401      	adds	r4, #1
 8004fdc:	9305      	str	r3, [sp, #20]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f04f 0c0a 	mov.w	ip, #10
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fea:	3a30      	subs	r2, #48	; 0x30
 8004fec:	2a09      	cmp	r2, #9
 8004fee:	d903      	bls.n	8004ff8 <_svfiprintf_r+0x1a8>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0c5      	beq.n	8004f80 <_svfiprintf_r+0x130>
 8004ff4:	9105      	str	r1, [sp, #20]
 8004ff6:	e7c3      	b.n	8004f80 <_svfiprintf_r+0x130>
 8004ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	2301      	movs	r3, #1
 8005000:	e7f0      	b.n	8004fe4 <_svfiprintf_r+0x194>
 8005002:	ab03      	add	r3, sp, #12
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	462a      	mov	r2, r5
 8005008:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <_svfiprintf_r+0x1f8>)
 800500a:	a904      	add	r1, sp, #16
 800500c:	4638      	mov	r0, r7
 800500e:	f3af 8000 	nop.w
 8005012:	1c42      	adds	r2, r0, #1
 8005014:	4606      	mov	r6, r0
 8005016:	d1d6      	bne.n	8004fc6 <_svfiprintf_r+0x176>
 8005018:	89ab      	ldrh	r3, [r5, #12]
 800501a:	065b      	lsls	r3, r3, #25
 800501c:	f53f af2c 	bmi.w	8004e78 <_svfiprintf_r+0x28>
 8005020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005022:	b01d      	add	sp, #116	; 0x74
 8005024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005028:	ab03      	add	r3, sp, #12
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	462a      	mov	r2, r5
 800502e:	4b06      	ldr	r3, [pc, #24]	; (8005048 <_svfiprintf_r+0x1f8>)
 8005030:	a904      	add	r1, sp, #16
 8005032:	4638      	mov	r0, r7
 8005034:	f000 f87a 	bl	800512c <_printf_i>
 8005038:	e7eb      	b.n	8005012 <_svfiprintf_r+0x1c2>
 800503a:	bf00      	nop
 800503c:	0800575c 	.word	0x0800575c
 8005040:	08005766 	.word	0x08005766
 8005044:	00000000 	.word	0x00000000
 8005048:	08004d99 	.word	0x08004d99
 800504c:	08005762 	.word	0x08005762

08005050 <_printf_common>:
 8005050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005054:	4616      	mov	r6, r2
 8005056:	4699      	mov	r9, r3
 8005058:	688a      	ldr	r2, [r1, #8]
 800505a:	690b      	ldr	r3, [r1, #16]
 800505c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005060:	4293      	cmp	r3, r2
 8005062:	bfb8      	it	lt
 8005064:	4613      	movlt	r3, r2
 8005066:	6033      	str	r3, [r6, #0]
 8005068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800506c:	4607      	mov	r7, r0
 800506e:	460c      	mov	r4, r1
 8005070:	b10a      	cbz	r2, 8005076 <_printf_common+0x26>
 8005072:	3301      	adds	r3, #1
 8005074:	6033      	str	r3, [r6, #0]
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	0699      	lsls	r1, r3, #26
 800507a:	bf42      	ittt	mi
 800507c:	6833      	ldrmi	r3, [r6, #0]
 800507e:	3302      	addmi	r3, #2
 8005080:	6033      	strmi	r3, [r6, #0]
 8005082:	6825      	ldr	r5, [r4, #0]
 8005084:	f015 0506 	ands.w	r5, r5, #6
 8005088:	d106      	bne.n	8005098 <_printf_common+0x48>
 800508a:	f104 0a19 	add.w	sl, r4, #25
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	6832      	ldr	r2, [r6, #0]
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	42ab      	cmp	r3, r5
 8005096:	dc26      	bgt.n	80050e6 <_printf_common+0x96>
 8005098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800509c:	1e13      	subs	r3, r2, #0
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	bf18      	it	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	0692      	lsls	r2, r2, #26
 80050a6:	d42b      	bmi.n	8005100 <_printf_common+0xb0>
 80050a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ac:	4649      	mov	r1, r9
 80050ae:	4638      	mov	r0, r7
 80050b0:	47c0      	blx	r8
 80050b2:	3001      	adds	r0, #1
 80050b4:	d01e      	beq.n	80050f4 <_printf_common+0xa4>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	68e5      	ldr	r5, [r4, #12]
 80050ba:	6832      	ldr	r2, [r6, #0]
 80050bc:	f003 0306 	and.w	r3, r3, #6
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	bf08      	it	eq
 80050c4:	1aad      	subeq	r5, r5, r2
 80050c6:	68a3      	ldr	r3, [r4, #8]
 80050c8:	6922      	ldr	r2, [r4, #16]
 80050ca:	bf0c      	ite	eq
 80050cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d0:	2500      	movne	r5, #0
 80050d2:	4293      	cmp	r3, r2
 80050d4:	bfc4      	itt	gt
 80050d6:	1a9b      	subgt	r3, r3, r2
 80050d8:	18ed      	addgt	r5, r5, r3
 80050da:	2600      	movs	r6, #0
 80050dc:	341a      	adds	r4, #26
 80050de:	42b5      	cmp	r5, r6
 80050e0:	d11a      	bne.n	8005118 <_printf_common+0xc8>
 80050e2:	2000      	movs	r0, #0
 80050e4:	e008      	b.n	80050f8 <_printf_common+0xa8>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4652      	mov	r2, sl
 80050ea:	4649      	mov	r1, r9
 80050ec:	4638      	mov	r0, r7
 80050ee:	47c0      	blx	r8
 80050f0:	3001      	adds	r0, #1
 80050f2:	d103      	bne.n	80050fc <_printf_common+0xac>
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fc:	3501      	adds	r5, #1
 80050fe:	e7c6      	b.n	800508e <_printf_common+0x3e>
 8005100:	18e1      	adds	r1, r4, r3
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	2030      	movs	r0, #48	; 0x30
 8005106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800510a:	4422      	add	r2, r4
 800510c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005114:	3302      	adds	r3, #2
 8005116:	e7c7      	b.n	80050a8 <_printf_common+0x58>
 8005118:	2301      	movs	r3, #1
 800511a:	4622      	mov	r2, r4
 800511c:	4649      	mov	r1, r9
 800511e:	4638      	mov	r0, r7
 8005120:	47c0      	blx	r8
 8005122:	3001      	adds	r0, #1
 8005124:	d0e6      	beq.n	80050f4 <_printf_common+0xa4>
 8005126:	3601      	adds	r6, #1
 8005128:	e7d9      	b.n	80050de <_printf_common+0x8e>
	...

0800512c <_printf_i>:
 800512c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	460c      	mov	r4, r1
 8005132:	4691      	mov	r9, r2
 8005134:	7e27      	ldrb	r7, [r4, #24]
 8005136:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005138:	2f78      	cmp	r7, #120	; 0x78
 800513a:	4680      	mov	r8, r0
 800513c:	469a      	mov	sl, r3
 800513e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005142:	d807      	bhi.n	8005154 <_printf_i+0x28>
 8005144:	2f62      	cmp	r7, #98	; 0x62
 8005146:	d80a      	bhi.n	800515e <_printf_i+0x32>
 8005148:	2f00      	cmp	r7, #0
 800514a:	f000 80d8 	beq.w	80052fe <_printf_i+0x1d2>
 800514e:	2f58      	cmp	r7, #88	; 0x58
 8005150:	f000 80a3 	beq.w	800529a <_printf_i+0x16e>
 8005154:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800515c:	e03a      	b.n	80051d4 <_printf_i+0xa8>
 800515e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005162:	2b15      	cmp	r3, #21
 8005164:	d8f6      	bhi.n	8005154 <_printf_i+0x28>
 8005166:	a001      	add	r0, pc, #4	; (adr r0, 800516c <_printf_i+0x40>)
 8005168:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800516c:	080051c5 	.word	0x080051c5
 8005170:	080051d9 	.word	0x080051d9
 8005174:	08005155 	.word	0x08005155
 8005178:	08005155 	.word	0x08005155
 800517c:	08005155 	.word	0x08005155
 8005180:	08005155 	.word	0x08005155
 8005184:	080051d9 	.word	0x080051d9
 8005188:	08005155 	.word	0x08005155
 800518c:	08005155 	.word	0x08005155
 8005190:	08005155 	.word	0x08005155
 8005194:	08005155 	.word	0x08005155
 8005198:	080052e5 	.word	0x080052e5
 800519c:	08005209 	.word	0x08005209
 80051a0:	080052c7 	.word	0x080052c7
 80051a4:	08005155 	.word	0x08005155
 80051a8:	08005155 	.word	0x08005155
 80051ac:	08005307 	.word	0x08005307
 80051b0:	08005155 	.word	0x08005155
 80051b4:	08005209 	.word	0x08005209
 80051b8:	08005155 	.word	0x08005155
 80051bc:	08005155 	.word	0x08005155
 80051c0:	080052cf 	.word	0x080052cf
 80051c4:	680b      	ldr	r3, [r1, #0]
 80051c6:	1d1a      	adds	r2, r3, #4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	600a      	str	r2, [r1, #0]
 80051cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0a3      	b.n	8005320 <_printf_i+0x1f4>
 80051d8:	6825      	ldr	r5, [r4, #0]
 80051da:	6808      	ldr	r0, [r1, #0]
 80051dc:	062e      	lsls	r6, r5, #24
 80051de:	f100 0304 	add.w	r3, r0, #4
 80051e2:	d50a      	bpl.n	80051fa <_printf_i+0xce>
 80051e4:	6805      	ldr	r5, [r0, #0]
 80051e6:	600b      	str	r3, [r1, #0]
 80051e8:	2d00      	cmp	r5, #0
 80051ea:	da03      	bge.n	80051f4 <_printf_i+0xc8>
 80051ec:	232d      	movs	r3, #45	; 0x2d
 80051ee:	426d      	negs	r5, r5
 80051f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f4:	485e      	ldr	r0, [pc, #376]	; (8005370 <_printf_i+0x244>)
 80051f6:	230a      	movs	r3, #10
 80051f8:	e019      	b.n	800522e <_printf_i+0x102>
 80051fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051fe:	6805      	ldr	r5, [r0, #0]
 8005200:	600b      	str	r3, [r1, #0]
 8005202:	bf18      	it	ne
 8005204:	b22d      	sxthne	r5, r5
 8005206:	e7ef      	b.n	80051e8 <_printf_i+0xbc>
 8005208:	680b      	ldr	r3, [r1, #0]
 800520a:	6825      	ldr	r5, [r4, #0]
 800520c:	1d18      	adds	r0, r3, #4
 800520e:	6008      	str	r0, [r1, #0]
 8005210:	0628      	lsls	r0, r5, #24
 8005212:	d501      	bpl.n	8005218 <_printf_i+0xec>
 8005214:	681d      	ldr	r5, [r3, #0]
 8005216:	e002      	b.n	800521e <_printf_i+0xf2>
 8005218:	0669      	lsls	r1, r5, #25
 800521a:	d5fb      	bpl.n	8005214 <_printf_i+0xe8>
 800521c:	881d      	ldrh	r5, [r3, #0]
 800521e:	4854      	ldr	r0, [pc, #336]	; (8005370 <_printf_i+0x244>)
 8005220:	2f6f      	cmp	r7, #111	; 0x6f
 8005222:	bf0c      	ite	eq
 8005224:	2308      	moveq	r3, #8
 8005226:	230a      	movne	r3, #10
 8005228:	2100      	movs	r1, #0
 800522a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800522e:	6866      	ldr	r6, [r4, #4]
 8005230:	60a6      	str	r6, [r4, #8]
 8005232:	2e00      	cmp	r6, #0
 8005234:	bfa2      	ittt	ge
 8005236:	6821      	ldrge	r1, [r4, #0]
 8005238:	f021 0104 	bicge.w	r1, r1, #4
 800523c:	6021      	strge	r1, [r4, #0]
 800523e:	b90d      	cbnz	r5, 8005244 <_printf_i+0x118>
 8005240:	2e00      	cmp	r6, #0
 8005242:	d04d      	beq.n	80052e0 <_printf_i+0x1b4>
 8005244:	4616      	mov	r6, r2
 8005246:	fbb5 f1f3 	udiv	r1, r5, r3
 800524a:	fb03 5711 	mls	r7, r3, r1, r5
 800524e:	5dc7      	ldrb	r7, [r0, r7]
 8005250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005254:	462f      	mov	r7, r5
 8005256:	42bb      	cmp	r3, r7
 8005258:	460d      	mov	r5, r1
 800525a:	d9f4      	bls.n	8005246 <_printf_i+0x11a>
 800525c:	2b08      	cmp	r3, #8
 800525e:	d10b      	bne.n	8005278 <_printf_i+0x14c>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	07df      	lsls	r7, r3, #31
 8005264:	d508      	bpl.n	8005278 <_printf_i+0x14c>
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	6861      	ldr	r1, [r4, #4]
 800526a:	4299      	cmp	r1, r3
 800526c:	bfde      	ittt	le
 800526e:	2330      	movle	r3, #48	; 0x30
 8005270:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005274:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005278:	1b92      	subs	r2, r2, r6
 800527a:	6122      	str	r2, [r4, #16]
 800527c:	f8cd a000 	str.w	sl, [sp]
 8005280:	464b      	mov	r3, r9
 8005282:	aa03      	add	r2, sp, #12
 8005284:	4621      	mov	r1, r4
 8005286:	4640      	mov	r0, r8
 8005288:	f7ff fee2 	bl	8005050 <_printf_common>
 800528c:	3001      	adds	r0, #1
 800528e:	d14c      	bne.n	800532a <_printf_i+0x1fe>
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
 8005294:	b004      	add	sp, #16
 8005296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529a:	4835      	ldr	r0, [pc, #212]	; (8005370 <_printf_i+0x244>)
 800529c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	680e      	ldr	r6, [r1, #0]
 80052a4:	061f      	lsls	r7, r3, #24
 80052a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80052aa:	600e      	str	r6, [r1, #0]
 80052ac:	d514      	bpl.n	80052d8 <_printf_i+0x1ac>
 80052ae:	07d9      	lsls	r1, r3, #31
 80052b0:	bf44      	itt	mi
 80052b2:	f043 0320 	orrmi.w	r3, r3, #32
 80052b6:	6023      	strmi	r3, [r4, #0]
 80052b8:	b91d      	cbnz	r5, 80052c2 <_printf_i+0x196>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	f023 0320 	bic.w	r3, r3, #32
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	2310      	movs	r3, #16
 80052c4:	e7b0      	b.n	8005228 <_printf_i+0xfc>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	f043 0320 	orr.w	r3, r3, #32
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	2378      	movs	r3, #120	; 0x78
 80052d0:	4828      	ldr	r0, [pc, #160]	; (8005374 <_printf_i+0x248>)
 80052d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052d6:	e7e3      	b.n	80052a0 <_printf_i+0x174>
 80052d8:	065e      	lsls	r6, r3, #25
 80052da:	bf48      	it	mi
 80052dc:	b2ad      	uxthmi	r5, r5
 80052de:	e7e6      	b.n	80052ae <_printf_i+0x182>
 80052e0:	4616      	mov	r6, r2
 80052e2:	e7bb      	b.n	800525c <_printf_i+0x130>
 80052e4:	680b      	ldr	r3, [r1, #0]
 80052e6:	6826      	ldr	r6, [r4, #0]
 80052e8:	6960      	ldr	r0, [r4, #20]
 80052ea:	1d1d      	adds	r5, r3, #4
 80052ec:	600d      	str	r5, [r1, #0]
 80052ee:	0635      	lsls	r5, r6, #24
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	d501      	bpl.n	80052f8 <_printf_i+0x1cc>
 80052f4:	6018      	str	r0, [r3, #0]
 80052f6:	e002      	b.n	80052fe <_printf_i+0x1d2>
 80052f8:	0671      	lsls	r1, r6, #25
 80052fa:	d5fb      	bpl.n	80052f4 <_printf_i+0x1c8>
 80052fc:	8018      	strh	r0, [r3, #0]
 80052fe:	2300      	movs	r3, #0
 8005300:	6123      	str	r3, [r4, #16]
 8005302:	4616      	mov	r6, r2
 8005304:	e7ba      	b.n	800527c <_printf_i+0x150>
 8005306:	680b      	ldr	r3, [r1, #0]
 8005308:	1d1a      	adds	r2, r3, #4
 800530a:	600a      	str	r2, [r1, #0]
 800530c:	681e      	ldr	r6, [r3, #0]
 800530e:	6862      	ldr	r2, [r4, #4]
 8005310:	2100      	movs	r1, #0
 8005312:	4630      	mov	r0, r6
 8005314:	f7fa ff74 	bl	8000200 <memchr>
 8005318:	b108      	cbz	r0, 800531e <_printf_i+0x1f2>
 800531a:	1b80      	subs	r0, r0, r6
 800531c:	6060      	str	r0, [r4, #4]
 800531e:	6863      	ldr	r3, [r4, #4]
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	2300      	movs	r3, #0
 8005324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005328:	e7a8      	b.n	800527c <_printf_i+0x150>
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	4632      	mov	r2, r6
 800532e:	4649      	mov	r1, r9
 8005330:	4640      	mov	r0, r8
 8005332:	47d0      	blx	sl
 8005334:	3001      	adds	r0, #1
 8005336:	d0ab      	beq.n	8005290 <_printf_i+0x164>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	079b      	lsls	r3, r3, #30
 800533c:	d413      	bmi.n	8005366 <_printf_i+0x23a>
 800533e:	68e0      	ldr	r0, [r4, #12]
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	4298      	cmp	r0, r3
 8005344:	bfb8      	it	lt
 8005346:	4618      	movlt	r0, r3
 8005348:	e7a4      	b.n	8005294 <_printf_i+0x168>
 800534a:	2301      	movs	r3, #1
 800534c:	4632      	mov	r2, r6
 800534e:	4649      	mov	r1, r9
 8005350:	4640      	mov	r0, r8
 8005352:	47d0      	blx	sl
 8005354:	3001      	adds	r0, #1
 8005356:	d09b      	beq.n	8005290 <_printf_i+0x164>
 8005358:	3501      	adds	r5, #1
 800535a:	68e3      	ldr	r3, [r4, #12]
 800535c:	9903      	ldr	r1, [sp, #12]
 800535e:	1a5b      	subs	r3, r3, r1
 8005360:	42ab      	cmp	r3, r5
 8005362:	dcf2      	bgt.n	800534a <_printf_i+0x21e>
 8005364:	e7eb      	b.n	800533e <_printf_i+0x212>
 8005366:	2500      	movs	r5, #0
 8005368:	f104 0619 	add.w	r6, r4, #25
 800536c:	e7f5      	b.n	800535a <_printf_i+0x22e>
 800536e:	bf00      	nop
 8005370:	0800576d 	.word	0x0800576d
 8005374:	0800577e 	.word	0x0800577e

08005378 <memcpy>:
 8005378:	440a      	add	r2, r1
 800537a:	4291      	cmp	r1, r2
 800537c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005380:	d100      	bne.n	8005384 <memcpy+0xc>
 8005382:	4770      	bx	lr
 8005384:	b510      	push	{r4, lr}
 8005386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800538a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800538e:	4291      	cmp	r1, r2
 8005390:	d1f9      	bne.n	8005386 <memcpy+0xe>
 8005392:	bd10      	pop	{r4, pc}

08005394 <memmove>:
 8005394:	4288      	cmp	r0, r1
 8005396:	b510      	push	{r4, lr}
 8005398:	eb01 0402 	add.w	r4, r1, r2
 800539c:	d902      	bls.n	80053a4 <memmove+0x10>
 800539e:	4284      	cmp	r4, r0
 80053a0:	4623      	mov	r3, r4
 80053a2:	d807      	bhi.n	80053b4 <memmove+0x20>
 80053a4:	1e43      	subs	r3, r0, #1
 80053a6:	42a1      	cmp	r1, r4
 80053a8:	d008      	beq.n	80053bc <memmove+0x28>
 80053aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053b2:	e7f8      	b.n	80053a6 <memmove+0x12>
 80053b4:	4402      	add	r2, r0
 80053b6:	4601      	mov	r1, r0
 80053b8:	428a      	cmp	r2, r1
 80053ba:	d100      	bne.n	80053be <memmove+0x2a>
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053c6:	e7f7      	b.n	80053b8 <memmove+0x24>

080053c8 <_free_r>:
 80053c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ca:	2900      	cmp	r1, #0
 80053cc:	d048      	beq.n	8005460 <_free_r+0x98>
 80053ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d2:	9001      	str	r0, [sp, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f1a1 0404 	sub.w	r4, r1, #4
 80053da:	bfb8      	it	lt
 80053dc:	18e4      	addlt	r4, r4, r3
 80053de:	f000 f8d3 	bl	8005588 <__malloc_lock>
 80053e2:	4a20      	ldr	r2, [pc, #128]	; (8005464 <_free_r+0x9c>)
 80053e4:	9801      	ldr	r0, [sp, #4]
 80053e6:	6813      	ldr	r3, [r2, #0]
 80053e8:	4615      	mov	r5, r2
 80053ea:	b933      	cbnz	r3, 80053fa <_free_r+0x32>
 80053ec:	6063      	str	r3, [r4, #4]
 80053ee:	6014      	str	r4, [r2, #0]
 80053f0:	b003      	add	sp, #12
 80053f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053f6:	f000 b8cd 	b.w	8005594 <__malloc_unlock>
 80053fa:	42a3      	cmp	r3, r4
 80053fc:	d90b      	bls.n	8005416 <_free_r+0x4e>
 80053fe:	6821      	ldr	r1, [r4, #0]
 8005400:	1862      	adds	r2, r4, r1
 8005402:	4293      	cmp	r3, r2
 8005404:	bf04      	itt	eq
 8005406:	681a      	ldreq	r2, [r3, #0]
 8005408:	685b      	ldreq	r3, [r3, #4]
 800540a:	6063      	str	r3, [r4, #4]
 800540c:	bf04      	itt	eq
 800540e:	1852      	addeq	r2, r2, r1
 8005410:	6022      	streq	r2, [r4, #0]
 8005412:	602c      	str	r4, [r5, #0]
 8005414:	e7ec      	b.n	80053f0 <_free_r+0x28>
 8005416:	461a      	mov	r2, r3
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	b10b      	cbz	r3, 8005420 <_free_r+0x58>
 800541c:	42a3      	cmp	r3, r4
 800541e:	d9fa      	bls.n	8005416 <_free_r+0x4e>
 8005420:	6811      	ldr	r1, [r2, #0]
 8005422:	1855      	adds	r5, r2, r1
 8005424:	42a5      	cmp	r5, r4
 8005426:	d10b      	bne.n	8005440 <_free_r+0x78>
 8005428:	6824      	ldr	r4, [r4, #0]
 800542a:	4421      	add	r1, r4
 800542c:	1854      	adds	r4, r2, r1
 800542e:	42a3      	cmp	r3, r4
 8005430:	6011      	str	r1, [r2, #0]
 8005432:	d1dd      	bne.n	80053f0 <_free_r+0x28>
 8005434:	681c      	ldr	r4, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	6053      	str	r3, [r2, #4]
 800543a:	4421      	add	r1, r4
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	e7d7      	b.n	80053f0 <_free_r+0x28>
 8005440:	d902      	bls.n	8005448 <_free_r+0x80>
 8005442:	230c      	movs	r3, #12
 8005444:	6003      	str	r3, [r0, #0]
 8005446:	e7d3      	b.n	80053f0 <_free_r+0x28>
 8005448:	6825      	ldr	r5, [r4, #0]
 800544a:	1961      	adds	r1, r4, r5
 800544c:	428b      	cmp	r3, r1
 800544e:	bf04      	itt	eq
 8005450:	6819      	ldreq	r1, [r3, #0]
 8005452:	685b      	ldreq	r3, [r3, #4]
 8005454:	6063      	str	r3, [r4, #4]
 8005456:	bf04      	itt	eq
 8005458:	1949      	addeq	r1, r1, r5
 800545a:	6021      	streq	r1, [r4, #0]
 800545c:	6054      	str	r4, [r2, #4]
 800545e:	e7c7      	b.n	80053f0 <_free_r+0x28>
 8005460:	b003      	add	sp, #12
 8005462:	bd30      	pop	{r4, r5, pc}
 8005464:	200000bc 	.word	0x200000bc

08005468 <_malloc_r>:
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546a:	1ccd      	adds	r5, r1, #3
 800546c:	f025 0503 	bic.w	r5, r5, #3
 8005470:	3508      	adds	r5, #8
 8005472:	2d0c      	cmp	r5, #12
 8005474:	bf38      	it	cc
 8005476:	250c      	movcc	r5, #12
 8005478:	2d00      	cmp	r5, #0
 800547a:	4606      	mov	r6, r0
 800547c:	db01      	blt.n	8005482 <_malloc_r+0x1a>
 800547e:	42a9      	cmp	r1, r5
 8005480:	d903      	bls.n	800548a <_malloc_r+0x22>
 8005482:	230c      	movs	r3, #12
 8005484:	6033      	str	r3, [r6, #0]
 8005486:	2000      	movs	r0, #0
 8005488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800548a:	f000 f87d 	bl	8005588 <__malloc_lock>
 800548e:	4921      	ldr	r1, [pc, #132]	; (8005514 <_malloc_r+0xac>)
 8005490:	680a      	ldr	r2, [r1, #0]
 8005492:	4614      	mov	r4, r2
 8005494:	b99c      	cbnz	r4, 80054be <_malloc_r+0x56>
 8005496:	4f20      	ldr	r7, [pc, #128]	; (8005518 <_malloc_r+0xb0>)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	b923      	cbnz	r3, 80054a6 <_malloc_r+0x3e>
 800549c:	4621      	mov	r1, r4
 800549e:	4630      	mov	r0, r6
 80054a0:	f000 f862 	bl	8005568 <_sbrk_r>
 80054a4:	6038      	str	r0, [r7, #0]
 80054a6:	4629      	mov	r1, r5
 80054a8:	4630      	mov	r0, r6
 80054aa:	f000 f85d 	bl	8005568 <_sbrk_r>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	d123      	bne.n	80054fa <_malloc_r+0x92>
 80054b2:	230c      	movs	r3, #12
 80054b4:	6033      	str	r3, [r6, #0]
 80054b6:	4630      	mov	r0, r6
 80054b8:	f000 f86c 	bl	8005594 <__malloc_unlock>
 80054bc:	e7e3      	b.n	8005486 <_malloc_r+0x1e>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	1b5b      	subs	r3, r3, r5
 80054c2:	d417      	bmi.n	80054f4 <_malloc_r+0x8c>
 80054c4:	2b0b      	cmp	r3, #11
 80054c6:	d903      	bls.n	80054d0 <_malloc_r+0x68>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	441c      	add	r4, r3
 80054cc:	6025      	str	r5, [r4, #0]
 80054ce:	e004      	b.n	80054da <_malloc_r+0x72>
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	42a2      	cmp	r2, r4
 80054d4:	bf0c      	ite	eq
 80054d6:	600b      	streq	r3, [r1, #0]
 80054d8:	6053      	strne	r3, [r2, #4]
 80054da:	4630      	mov	r0, r6
 80054dc:	f000 f85a 	bl	8005594 <__malloc_unlock>
 80054e0:	f104 000b 	add.w	r0, r4, #11
 80054e4:	1d23      	adds	r3, r4, #4
 80054e6:	f020 0007 	bic.w	r0, r0, #7
 80054ea:	1ac2      	subs	r2, r0, r3
 80054ec:	d0cc      	beq.n	8005488 <_malloc_r+0x20>
 80054ee:	1a1b      	subs	r3, r3, r0
 80054f0:	50a3      	str	r3, [r4, r2]
 80054f2:	e7c9      	b.n	8005488 <_malloc_r+0x20>
 80054f4:	4622      	mov	r2, r4
 80054f6:	6864      	ldr	r4, [r4, #4]
 80054f8:	e7cc      	b.n	8005494 <_malloc_r+0x2c>
 80054fa:	1cc4      	adds	r4, r0, #3
 80054fc:	f024 0403 	bic.w	r4, r4, #3
 8005500:	42a0      	cmp	r0, r4
 8005502:	d0e3      	beq.n	80054cc <_malloc_r+0x64>
 8005504:	1a21      	subs	r1, r4, r0
 8005506:	4630      	mov	r0, r6
 8005508:	f000 f82e 	bl	8005568 <_sbrk_r>
 800550c:	3001      	adds	r0, #1
 800550e:	d1dd      	bne.n	80054cc <_malloc_r+0x64>
 8005510:	e7cf      	b.n	80054b2 <_malloc_r+0x4a>
 8005512:	bf00      	nop
 8005514:	200000bc 	.word	0x200000bc
 8005518:	200000c0 	.word	0x200000c0

0800551c <_realloc_r>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	4607      	mov	r7, r0
 8005520:	4614      	mov	r4, r2
 8005522:	460e      	mov	r6, r1
 8005524:	b921      	cbnz	r1, 8005530 <_realloc_r+0x14>
 8005526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800552a:	4611      	mov	r1, r2
 800552c:	f7ff bf9c 	b.w	8005468 <_malloc_r>
 8005530:	b922      	cbnz	r2, 800553c <_realloc_r+0x20>
 8005532:	f7ff ff49 	bl	80053c8 <_free_r>
 8005536:	4625      	mov	r5, r4
 8005538:	4628      	mov	r0, r5
 800553a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800553c:	f000 f830 	bl	80055a0 <_malloc_usable_size_r>
 8005540:	42a0      	cmp	r0, r4
 8005542:	d20f      	bcs.n	8005564 <_realloc_r+0x48>
 8005544:	4621      	mov	r1, r4
 8005546:	4638      	mov	r0, r7
 8005548:	f7ff ff8e 	bl	8005468 <_malloc_r>
 800554c:	4605      	mov	r5, r0
 800554e:	2800      	cmp	r0, #0
 8005550:	d0f2      	beq.n	8005538 <_realloc_r+0x1c>
 8005552:	4631      	mov	r1, r6
 8005554:	4622      	mov	r2, r4
 8005556:	f7ff ff0f 	bl	8005378 <memcpy>
 800555a:	4631      	mov	r1, r6
 800555c:	4638      	mov	r0, r7
 800555e:	f7ff ff33 	bl	80053c8 <_free_r>
 8005562:	e7e9      	b.n	8005538 <_realloc_r+0x1c>
 8005564:	4635      	mov	r5, r6
 8005566:	e7e7      	b.n	8005538 <_realloc_r+0x1c>

08005568 <_sbrk_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4d06      	ldr	r5, [pc, #24]	; (8005584 <_sbrk_r+0x1c>)
 800556c:	2300      	movs	r3, #0
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	f7fb ff4c 	bl	8001410 <_sbrk>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d102      	bne.n	8005582 <_sbrk_r+0x1a>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b103      	cbz	r3, 8005582 <_sbrk_r+0x1a>
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	20000704 	.word	0x20000704

08005588 <__malloc_lock>:
 8005588:	4801      	ldr	r0, [pc, #4]	; (8005590 <__malloc_lock+0x8>)
 800558a:	f000 b811 	b.w	80055b0 <__retarget_lock_acquire_recursive>
 800558e:	bf00      	nop
 8005590:	2000070c 	.word	0x2000070c

08005594 <__malloc_unlock>:
 8005594:	4801      	ldr	r0, [pc, #4]	; (800559c <__malloc_unlock+0x8>)
 8005596:	f000 b80c 	b.w	80055b2 <__retarget_lock_release_recursive>
 800559a:	bf00      	nop
 800559c:	2000070c 	.word	0x2000070c

080055a0 <_malloc_usable_size_r>:
 80055a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055a4:	1f18      	subs	r0, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bfbc      	itt	lt
 80055aa:	580b      	ldrlt	r3, [r1, r0]
 80055ac:	18c0      	addlt	r0, r0, r3
 80055ae:	4770      	bx	lr

080055b0 <__retarget_lock_acquire_recursive>:
 80055b0:	4770      	bx	lr

080055b2 <__retarget_lock_release_recursive>:
 80055b2:	4770      	bx	lr

080055b4 <_init>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	bf00      	nop
 80055b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ba:	bc08      	pop	{r3}
 80055bc:	469e      	mov	lr, r3
 80055be:	4770      	bx	lr

080055c0 <_fini>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr
