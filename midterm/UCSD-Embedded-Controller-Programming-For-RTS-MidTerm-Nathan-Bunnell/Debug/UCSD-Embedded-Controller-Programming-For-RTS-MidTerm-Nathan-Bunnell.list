
UCSD-Embedded-Controller-Programming-For-RTS-MidTerm-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800630c  0800630c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800630c  0800630c  0001630c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006314  08006314  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800631c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  20000070  0800638c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  0800638c  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aaf7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333b  00000000  00000000  0003ab97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0003ded8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  0003f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284e8  00000000  00000000  00040ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001872b  00000000  00000000  00068f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3c48  00000000  00000000  000816c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017530b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e8  00000000  00000000  00175360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800609c 	.word	0x0800609c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800609c 	.word	0x0800609c

080001d0 <sumOfSquares>:
	.text
	.global sumOfSquares
	.type sumOfSquares, %function

sumOfSquares:
	LDR R2, =0				// Ensure R2 is cleared as the function is entered
 80001d0:	f04f 0200 	mov.w	r2, #0

080001d4 <loop>:

loop:
	MUL R1, R0, R0
 80001d4:	fb00 f100 	mul.w	r1, r0, r0
	ADD R2, R1
 80001d8:	440a      	add	r2, r1
	SUB R0, R0, #1
 80001da:	f1a0 0001 	sub.w	r0, r0, #1
	CMP R0, #0
 80001de:	2800      	cmp	r0, #0
	BGT loop
 80001e0:	dcf8      	bgt.n	80001d4 <loop>

080001e2 <return>:

return:
	MOV R0, R2
 80001e2:	4610      	mov	r0, r2
	BX lr
 80001e4:	4770      	bx	lr

080001e6 <strlen>:
 80001e6:	4603      	mov	r3, r0
 80001e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ec:	2a00      	cmp	r2, #0
 80001ee:	d1fb      	bne.n	80001e8 <strlen+0x2>
 80001f0:	1a18      	subs	r0, r3, r0
 80001f2:	3801      	subs	r0, #1
 80001f4:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <HAL_UART_TxCpltCallback>:
static bool txInterruptComplete = 0;
static bool rxInterruptComplete = 0;

// Define the IT callback functions
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	// Set our complete flag
	txInterruptComplete = 1;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <HAL_UART_TxCpltCallback+0x1c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000008c 	.word	0x2000008c

080005b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	// Set our complete flag
	rxInterruptComplete = 1;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_UART_RxCpltCallback+0x1c>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	2000008d 	.word	0x2000008d

080005d8 <logMsg>:

// logMsg function prints a string, _out, to the console over the specified UART
void logMsg(UART_HandleTypeDef *huart, char *_out)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09c      	sub	sp, #112	; 0x70
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	// Clear the complete flag
	txInterruptComplete = 0;
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <logMsg+0x6c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]

	char buffer[100] = {0};		// Large char buffer for string printing
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	2260      	movs	r2, #96	; 0x60
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f005 f907 	bl	8005808 <memset>
    snprintf(buffer, sizeof(buffer), "%s\n", _out);
 80005fa:	f107 000c 	add.w	r0, r7, #12
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a11      	ldr	r2, [pc, #68]	; (8000648 <logMsg+0x70>)
 8000602:	2164      	movs	r1, #100	; 0x64
 8000604:	f005 f908 	bl	8005818 <sniprintf>
    HAL_UART_Transmit_IT(&huart1, (uint8_t*) buffer, strlen(buffer));
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdea 	bl	80001e6 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <logMsg+0x74>)
 800061e:	f003 fd75 	bl	800410c <HAL_UART_Transmit_IT>

    // Loiter until the IT complete flag is set
	while (!txInterruptComplete)
 8000622:	e002      	b.n	800062a <logMsg+0x52>
	{
		HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f001 f8cf 	bl	80017c8 <HAL_Delay>
	while (!txInterruptComplete)
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <logMsg+0x6c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f083 0301 	eor.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f5      	bne.n	8000624 <logMsg+0x4c>
	}
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3770      	adds	r7, #112	; 0x70
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000008c 	.word	0x2000008c
 8000648:	080060b4 	.word	0x080060b4
 800064c:	20000638 	.word	0x20000638

08000650 <logGetMsg>:

// logMsg function returns a char, c, over the specified UART
char logGetMsg(UART_HandleTypeDef *huart)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	// Clear the complete flag
	rxInterruptComplete = 0;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <logGetMsg+0x40>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]

  char c = '\0';				// Set default return value to NULL
 800065e:	2300      	movs	r3, #0
 8000660:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &c, sizeof(c));
 8000662:	f107 030f 	add.w	r3, r7, #15
 8000666:	2201      	movs	r2, #1
 8000668:	4619      	mov	r1, r3
 800066a:	480a      	ldr	r0, [pc, #40]	; (8000694 <logGetMsg+0x44>)
 800066c:	f003 fdaa 	bl	80041c4 <HAL_UART_Receive_IT>

  // Loiter until the IT complete flag is set
	while (!rxInterruptComplete)
 8000670:	e002      	b.n	8000678 <logGetMsg+0x28>
	{
		HAL_Delay(10);
 8000672:	200a      	movs	r0, #10
 8000674:	f001 f8a8 	bl	80017c8 <HAL_Delay>
	while (!rxInterruptComplete)
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <logGetMsg+0x40>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f5      	bne.n	8000672 <logGetMsg+0x22>
	}

	return c;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000008d 	.word	0x2000008d
 8000694:	20000638 	.word	0x20000638

08000698 <HAL_GPIO_EXTI_Callback>:

// Implement the callback method for HAL_GPIO_EXTI_IRGHandler()
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a8:	d111      	bne.n	80006ce <HAL_GPIO_EXTI_Callback+0x36>
	{
		HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 80006aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x40>)
 80006b0:	f001 fd0e 	bl	80020d0 <HAL_GPIO_TogglePin>
		//logMsg(&huart1, "Blue button pressed");
		char* statusMsg = "Blue button pressed\n";
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_GPIO_EXTI_Callback+0x44>)
 80006b6:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*) statusMsg, strlen(statusMsg), 1000);
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff fd94 	bl	80001e6 <strlen>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c6:	68f9      	ldr	r1, [r7, #12]
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x48>)
 80006ca:	f003 fc8a 	bl	8003fe2 <HAL_UART_Transmit>
	}
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	48000800 	.word	0x48000800
 80006dc:	080060b8 	.word	0x080060b8
 80006e0:	20000638 	.word	0x20000638

080006e4 <numOnes>:
extern uint32_t sumOfSquares(uint8_t number);

// Implement numOnes() with inline assembly to calculate and return
//   the numbers of ones in a binary representation of a given number
uint32_t numOnes(uint32_t number)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
"return: \n\t"
	"LDR R0, R1 \n\t"
    "BX lr \n\t"
  );
  */
}
 80006ec:	bf00      	nop
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <myDisableAllIntr>:

// Implement myDisableAllIntr() to disable all interrupts
void myDisableAllIntr(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  // Use instruction CPD with effect options of ID for "Interrupt Disable" and
  //   iflag option i to specify IRQ interrupts
  asm(
 80006fe:	b672      	cpsid	i
 8000700:	4770      	bx	lr
    "CPSID i \n\t"
    "BX lr \n\t"
  );
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b092      	sub	sp, #72	; 0x48
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f000 ffe4 	bl	80016de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f91d 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f000 fb29 	bl	8000d70 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800071e:	f000 f9bd 	bl	8000a9c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000722:	f000 f9f3 	bl	8000b0c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000726:	f000 fa31 	bl	8000b8c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800072a:	f000 fa55 	bl	8000bd8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800072e:	f000 fa91 	bl	8000c54 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000732:	f000 fabf 	bl	8000cb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000736:	f000 faed 	bl	8000d14 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  // Header info with instructions for user at console
  logMsg(&huart1, "Welcome to Embedded controller programming");
 800073a:	4975      	ldr	r1, [pc, #468]	; (8000910 <main+0x204>)
 800073c:	4875      	ldr	r0, [pc, #468]	; (8000914 <main+0x208>)
 800073e:	f7ff ff4b 	bl	80005d8 <logMsg>
  logMsg(&huart1, " - Enter g for toggling Green LED");
 8000742:	4975      	ldr	r1, [pc, #468]	; (8000918 <main+0x20c>)
 8000744:	4873      	ldr	r0, [pc, #460]	; (8000914 <main+0x208>)
 8000746:	f7ff ff47 	bl	80005d8 <logMsg>
  logMsg(&huart1, " - Enter b for toggling Blue LED");
 800074a:	4974      	ldr	r1, [pc, #464]	; (800091c <main+0x210>)
 800074c:	4871      	ldr	r0, [pc, #452]	; (8000914 <main+0x208>)
 800074e:	f7ff ff43 	bl	80005d8 <logMsg>
  logMsg(&huart1, " - Enter v to find the sum of squares of a number");
 8000752:	4973      	ldr	r1, [pc, #460]	; (8000920 <main+0x214>)
 8000754:	486f      	ldr	r0, [pc, #444]	; (8000914 <main+0x208>)
 8000756:	f7ff ff3f 	bl	80005d8 <logMsg>
  logMsg(&huart1, " - Enter n to find number of 1’s");
 800075a:	4972      	ldr	r1, [pc, #456]	; (8000924 <main+0x218>)
 800075c:	486d      	ldr	r0, [pc, #436]	; (8000914 <main+0x208>)
 800075e:	f7ff ff3b 	bl	80005d8 <logMsg>
  logMsg(&huart1, " - Enter d to disable a interrupt");
 8000762:	4971      	ldr	r1, [pc, #452]	; (8000928 <main+0x21c>)
 8000764:	486b      	ldr	r0, [pc, #428]	; (8000914 <main+0x208>)
 8000766:	f7ff ff37 	bl	80005d8 <logMsg>
  logMsg(&huart1, " - Enter e to enable the interrupt");
 800076a:	4970      	ldr	r1, [pc, #448]	; (800092c <main+0x220>)
 800076c:	4869      	ldr	r0, [pc, #420]	; (8000914 <main+0x208>)
 800076e:	f7ff ff33 	bl	80005d8 <logMsg>
  logMsg(&huart1, " - Enter a to disable all interrupts");
 8000772:	496f      	ldr	r1, [pc, #444]	; (8000930 <main+0x224>)
 8000774:	4867      	ldr	r0, [pc, #412]	; (8000914 <main+0x208>)
 8000776:	f7ff ff2f 	bl	80005d8 <logMsg>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Define an input char with default value of NULL
    char input = '\0';
 800077a:	2300      	movs	r3, #0
 800077c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    input = logGetMsg(&huart1);
 8000780:	4864      	ldr	r0, [pc, #400]	; (8000914 <main+0x208>)
 8000782:	f7ff ff65 	bl	8000650 <logGetMsg>
 8000786:	4603      	mov	r3, r0
 8000788:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    // Evaluate input char and execute methods associated with command
    switch(input)
 800078c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000790:	3b61      	subs	r3, #97	; 0x61
 8000792:	2b15      	cmp	r3, #21
 8000794:	f200 80b5 	bhi.w	8000902 <main+0x1f6>
 8000798:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <main+0x94>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	080008f1 	.word	0x080008f1
 80007a4:	08000811 	.word	0x08000811
 80007a8:	08000903 	.word	0x08000903
 80007ac:	08000893 	.word	0x08000893
 80007b0:	080008c1 	.word	0x080008c1
 80007b4:	08000903 	.word	0x08000903
 80007b8:	080007f9 	.word	0x080007f9
 80007bc:	08000903 	.word	0x08000903
 80007c0:	08000903 	.word	0x08000903
 80007c4:	08000903 	.word	0x08000903
 80007c8:	08000903 	.word	0x08000903
 80007cc:	08000903 	.word	0x08000903
 80007d0:	08000903 	.word	0x08000903
 80007d4:	08000867 	.word	0x08000867
 80007d8:	08000903 	.word	0x08000903
 80007dc:	08000903 	.word	0x08000903
 80007e0:	08000903 	.word	0x08000903
 80007e4:	08000903 	.word	0x08000903
 80007e8:	08000903 	.word	0x08000903
 80007ec:	08000903 	.word	0x08000903
 80007f0:	08000903 	.word	0x08000903
 80007f4:	08000829 	.word	0x08000829
    {
        // Print received char, toggle green LED
        case ('g'):
        {
            logMsg(&huart1, &input);
 80007f8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80007fc:	4619      	mov	r1, r3
 80007fe:	4845      	ldr	r0, [pc, #276]	; (8000914 <main+0x208>)
 8000800:	f7ff feea 	bl	80005d8 <logMsg>
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000808:	484a      	ldr	r0, [pc, #296]	; (8000934 <main+0x228>)
 800080a:	f001 fc61 	bl	80020d0 <HAL_GPIO_TogglePin>
            break;
 800080e:	e07d      	b.n	800090c <main+0x200>
        }

        // Print received char, toggle blue LED
        case ('b'):
        {
            logMsg(&huart1, &input);
 8000810:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000814:	4619      	mov	r1, r3
 8000816:	483f      	ldr	r0, [pc, #252]	; (8000914 <main+0x208>)
 8000818:	f7ff fede 	bl	80005d8 <logMsg>
            HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 800081c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000820:	4845      	ldr	r0, [pc, #276]	; (8000938 <main+0x22c>)
 8000822:	f001 fc55 	bl	80020d0 <HAL_GPIO_TogglePin>
            break;
 8000826:	e071      	b.n	800090c <main+0x200>
        }

        case ('v'):
        {
            logMsg(&huart1, &input);
 8000828:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800082c:	4619      	mov	r1, r3
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <main+0x208>)
 8000830:	f7ff fed2 	bl	80005d8 <logMsg>

            // Implement sumOfSquares method in mySquareSum.s
            uint32_t sum = sumOfSquares(3);   	// Use fixed value w/ known result, 3 should be 14
 8000834:	2003      	movs	r0, #3
 8000836:	f7ff fccb 	bl	80001d0 <sumOfSquares>
 800083a:	6478      	str	r0, [r7, #68]	; 0x44
			char buffer[50] = {0};             			// Output buffer
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	222e      	movs	r2, #46	; 0x2e
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f004 ffdd 	bl	8005808 <memset>
			snprintf(buffer, sizeof(buffer), "Sum of squares for 3 is %lu", sum);
 800084e:	1d38      	adds	r0, r7, #4
 8000850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000852:	4a3a      	ldr	r2, [pc, #232]	; (800093c <main+0x230>)
 8000854:	2132      	movs	r1, #50	; 0x32
 8000856:	f004 ffdf 	bl	8005818 <sniprintf>
			logMsg(&huart1, buffer);
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4619      	mov	r1, r3
 800085e:	482d      	ldr	r0, [pc, #180]	; (8000914 <main+0x208>)
 8000860:	f7ff feba 	bl	80005d8 <logMsg>
				char buffer[50] = {0};             				// Output buffer
				snprintf(buffer, sizeof(buffer), "Sum of squares for %i is %lu", loopCtr, sum);
				logMsg(&huart1, buffer);
            }*/

            break;
 8000864:	e052      	b.n	800090c <main+0x200>
        }

        case ('n'):
        {
            logMsg(&huart1, &input);
 8000866:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800086a:	4619      	mov	r1, r3
 800086c:	4829      	ldr	r0, [pc, #164]	; (8000914 <main+0x208>)
 800086e:	f7ff feb3 	bl	80005d8 <logMsg>

            // Implement code using function numOnes()
            uint32_t numberOfOnes = numOnes(7);   // Use fixed value w/ known result, 7 should be 3 (0b111)
 8000872:	2007      	movs	r0, #7
 8000874:	f7ff ff36 	bl	80006e4 <numOnes>
 8000878:	6438      	str	r0, [r7, #64]	; 0x40
            char buffer[50];             // Output buffer
            snprintf(buffer, sizeof(buffer), "Number of ones in 7 is %lu", numberOfOnes);
 800087a:	1d38      	adds	r0, r7, #4
 800087c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800087e:	4a30      	ldr	r2, [pc, #192]	; (8000940 <main+0x234>)
 8000880:	2132      	movs	r1, #50	; 0x32
 8000882:	f004 ffc9 	bl	8005818 <sniprintf>
            logMsg(&huart1, buffer);
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4619      	mov	r1, r3
 800088a:	4822      	ldr	r0, [pc, #136]	; (8000914 <main+0x208>)
 800088c:	f7ff fea4 	bl	80005d8 <logMsg>

            break;
 8000890:	e03c      	b.n	800090c <main+0x200>
        }

        case ('d'):
        {
            logMsg(&huart1, &input);
 8000892:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000896:	4619      	mov	r1, r3
 8000898:	481e      	ldr	r0, [pc, #120]	; (8000914 <main+0x208>)
 800089a:	f7ff fe9d 	bl	80005d8 <logMsg>

            // NVIC->ICER[1] = (1<<8); 		// Dont use CMSIS methods in this example!

            // Taken from core_cm4.h:
            // 	ICER target address is SCS_BASE (0xE000E000UL) + NVIC_BASE (0x0100UL) + ICER offset (0x80)
            uint32_t* NVIC_ICER_1 = 0xE000E1080ul;
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <main+0x238>)
 80008a0:	63bb      	str	r3, [r7, #56]	; 0x38
            *NVIC_ICER_1 = *NVIC_ICER_1 |= (1<<8);
 80008a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008b4:	601a      	str	r2, [r3, #0]

            logMsg(&huart1, "GPIO_EXTI13 disabled");    // Confirm thats the correct EXTI#
 80008b6:	4924      	ldr	r1, [pc, #144]	; (8000948 <main+0x23c>)
 80008b8:	4816      	ldr	r0, [pc, #88]	; (8000914 <main+0x208>)
 80008ba:	f7ff fe8d 	bl	80005d8 <logMsg>

            break;
 80008be:	e025      	b.n	800090c <main+0x200>
        }

        case ('e'):
        {
            logMsg(&huart1, &input);
 80008c0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80008c4:	4619      	mov	r1, r3
 80008c6:	4813      	ldr	r0, [pc, #76]	; (8000914 <main+0x208>)
 80008c8:	f7ff fe86 	bl	80005d8 <logMsg>

            // NVIC->ISER[1] = (1<<8); 		// Dont use CMSIS methods!

            // Taken from core_cm4.h:
   		    //   ISER target address is SCS_BASE (0xE000E000UL) + NVIC_BASE (0x0100UL) + ISER offset (0x00)
            uint32_t* NVIC_ISER_1 = 0xE000E1000ul;
 80008cc:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80008d0:	63fb      	str	r3, [r7, #60]	; 0x3c
            *NVIC_ISER_1 = *NVIC_ISER_1 |= (1<<8);
 80008d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e4:	601a      	str	r2, [r3, #0]

            logMsg(&huart1, "GPIO_EXTI13 enabled");
 80008e6:	4919      	ldr	r1, [pc, #100]	; (800094c <main+0x240>)
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <main+0x208>)
 80008ea:	f7ff fe75 	bl	80005d8 <logMsg>

            break;
 80008ee:	e00d      	b.n	800090c <main+0x200>
        }

        case ('a'):
        {
            logMsg(&huart1, &input);
 80008f0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80008f4:	4619      	mov	r1, r3
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <main+0x208>)
 80008f8:	f7ff fe6e 	bl	80005d8 <logMsg>

            // Implement code to disable all interrupts using function myDisableAllIntr()
            myDisableAllIntr();
 80008fc:	f7ff fefd 	bl	80006fa <myDisableAllIntr>

            break;
 8000900:	e004      	b.n	800090c <main+0x200>
        }

        // Default case. Print error message
        default:
        {
            logMsg(&huart1, "Unknown character received!\n");
 8000902:	4913      	ldr	r1, [pc, #76]	; (8000950 <main+0x244>)
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <main+0x208>)
 8000906:	f7ff fe67 	bl	80005d8 <logMsg>
            break;
 800090a:	bf00      	nop
  {
 800090c:	e735      	b.n	800077a <main+0x6e>
 800090e:	bf00      	nop
 8000910:	080060d0 	.word	0x080060d0
 8000914:	20000638 	.word	0x20000638
 8000918:	080060fc 	.word	0x080060fc
 800091c:	08006120 	.word	0x08006120
 8000920:	08006144 	.word	0x08006144
 8000924:	08006178 	.word	0x08006178
 8000928:	0800619c 	.word	0x0800619c
 800092c:	080061c0 	.word	0x080061c0
 8000930:	080061e4 	.word	0x080061e4
 8000934:	48000400 	.word	0x48000400
 8000938:	48000800 	.word	0x48000800
 800093c:	0800620c 	.word	0x0800620c
 8000940:	08006228 	.word	0x08006228
 8000944:	000e1080 	.word	0x000e1080
 8000948:	08006244 	.word	0x08006244
 800094c:	0800625c 	.word	0x0800625c
 8000950:	08006270 	.word	0x08006270

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b0b8      	sub	sp, #224	; 0xe0
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800095e:	2244      	movs	r2, #68	; 0x44
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f004 ff50 	bl	8005808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	463b      	mov	r3, r7
 800097a:	2288      	movs	r2, #136	; 0x88
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f004 ff42 	bl	8005808 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000984:	f001 fe44 	bl	8002610 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000988:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <SystemClock_Config+0x140>)
 800098a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800098e:	4a41      	ldr	r2, [pc, #260]	; (8000a94 <SystemClock_Config+0x140>)
 8000990:	f023 0318 	bic.w	r3, r3, #24
 8000994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000998:	2314      	movs	r3, #20
 800099a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800099e:	2301      	movs	r3, #1
 80009a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009b0:	2360      	movs	r3, #96	; 0x60
 80009b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009bc:	2301      	movs	r3, #1
 80009be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009c8:	2328      	movs	r3, #40	; 0x28
 80009ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009ce:	2307      	movs	r3, #7
 80009d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 ff53 	bl	8002890 <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009f0:	f000 fb5e 	bl	80010b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	230f      	movs	r3, #15
 80009f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2303      	movs	r3, #3
 80009fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a12:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a16:	2104      	movs	r1, #4
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fb1f 	bl	800305c <HAL_RCC_ClockConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a24:	f000 fb44 	bl	80010b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <SystemClock_Config+0x144>)
 8000a2a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000a3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a42:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a44:	2301      	movs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000a4c:	2318      	movs	r3, #24
 8000a4e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a50:	2307      	movs	r3, #7
 8000a52:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000a5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a60:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fcff 	bl	8003468 <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000a70:	f000 fb1e 	bl	80010b0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a78:	f001 fde8 	bl	800264c <HAL_PWREx_ControlVoltageScaling>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000a82:	f000 fb15 	bl	80010b0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a86:	f002 ffd9 	bl	8003a3c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a8a:	bf00      	nop
 8000a8c:	37e0      	adds	r7, #224	; 0xe0
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	00012085 	.word	0x00012085

08000a9c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <MX_DFSDM1_Init+0x6c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_DFSDM1_Init+0x68>)
 8000af2:	f000 ff9f 	bl	8001a34 <HAL_DFSDM_ChannelInit>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000afc:	f000 fad8 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000c4 	.word	0x200000c4
 8000b08:	40016020 	.word	0x40016020

08000b0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b12:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <MX_I2C2_Init+0x78>)
 8000b14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b18:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <MX_I2C2_Init+0x7c>)
 8000b1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b46:	480e      	ldr	r0, [pc, #56]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b48:	f001 faf4 	bl	8002134 <HAL_I2C_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b52:	f000 faad 	bl	80010b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b5a:	f001 fb7a 	bl	8002252 <HAL_I2CEx_ConfigAnalogFilter>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b64:	f000 faa4 	bl	80010b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_I2C2_Init+0x74>)
 8000b6c:	f001 fbbc 	bl	80022e8 <HAL_I2CEx_ConfigDigitalFilter>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b76:	f000 fa9b 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000588 	.word	0x20000588
 8000b84:	40005800 	.word	0x40005800
 8000b88:	10909cec 	.word	0x10909cec

08000b8c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_QUADSPI_Init+0x44>)
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <MX_QUADSPI_Init+0x48>)
 8000b94:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_QUADSPI_Init+0x44>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_QUADSPI_Init+0x44>)
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_QUADSPI_Init+0x44>)
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_QUADSPI_Init+0x44>)
 8000baa:	2217      	movs	r2, #23
 8000bac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_QUADSPI_Init+0x44>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_QUADSPI_Init+0x44>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_QUADSPI_Init+0x44>)
 8000bbc:	f001 fdac 	bl	8002718 <HAL_QSPI_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000bc6:	f000 fa73 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200006bc 	.word	0x200006bc
 8000bd4:	a0001000 	.word	0xa0001000

08000bd8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000bde:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <MX_SPI3_Init+0x78>)
 8000be0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000bf2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bf6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000c26:	2207      	movs	r2, #7
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000c32:	2208      	movs	r2, #8
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_SPI3_Init+0x74>)
 8000c38:	f003 f8e2 	bl	8003e00 <HAL_SPI_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c42:	f000 fa35 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200005d4 	.word	0x200005d4
 8000c50:	40003c00 	.word	0x40003c00

08000c54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <MX_USART1_UART_Init+0x5c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART1_UART_Init+0x58>)
 8000c98:	f003 f955 	bl	8003f46 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 fa05 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000638 	.word	0x20000638
 8000cb0:	40013800 	.word	0x40013800

08000cb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cba:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf8:	f003 f925 	bl	8003f46 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d02:	f000 f9d5 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200000fc 	.word	0x200000fc
 8000d10:	40004800 	.word	0x40004800

08000d14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2206      	movs	r2, #6
 8000d24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d58:	f001 fb12 	bl	8002380 <HAL_PCD_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d62:	f000 f9a5 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000180 	.word	0x20000180

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4bbb      	ldr	r3, [pc, #748]	; (8001074 <MX_GPIO_Init+0x304>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4aba      	ldr	r2, [pc, #744]	; (8001074 <MX_GPIO_Init+0x304>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4bb8      	ldr	r3, [pc, #736]	; (8001074 <MX_GPIO_Init+0x304>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	4bb5      	ldr	r3, [pc, #724]	; (8001074 <MX_GPIO_Init+0x304>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4ab4      	ldr	r2, [pc, #720]	; (8001074 <MX_GPIO_Init+0x304>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4bb2      	ldr	r3, [pc, #712]	; (8001074 <MX_GPIO_Init+0x304>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4baf      	ldr	r3, [pc, #700]	; (8001074 <MX_GPIO_Init+0x304>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4aae      	ldr	r2, [pc, #696]	; (8001074 <MX_GPIO_Init+0x304>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4bac      	ldr	r3, [pc, #688]	; (8001074 <MX_GPIO_Init+0x304>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4ba9      	ldr	r3, [pc, #676]	; (8001074 <MX_GPIO_Init+0x304>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4aa8      	ldr	r2, [pc, #672]	; (8001074 <MX_GPIO_Init+0x304>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4ba6      	ldr	r3, [pc, #664]	; (8001074 <MX_GPIO_Init+0x304>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	4ba3      	ldr	r3, [pc, #652]	; (8001074 <MX_GPIO_Init+0x304>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4aa2      	ldr	r2, [pc, #648]	; (8001074 <MX_GPIO_Init+0x304>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4ba0      	ldr	r3, [pc, #640]	; (8001074 <MX_GPIO_Init+0x304>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000e04:	489c      	ldr	r0, [pc, #624]	; (8001078 <MX_GPIO_Init+0x308>)
 8000e06:	f001 f94b 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f001 f944 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000e1e:	4897      	ldr	r0, [pc, #604]	; (800107c <MX_GPIO_Init+0x30c>)
 8000e20:	f001 f93e 	bl	80020a0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f241 0181 	movw	r1, #4225	; 0x1081
 8000e2a:	4895      	ldr	r0, [pc, #596]	; (8001080 <MX_GPIO_Init+0x310>)
 8000e2c:	f001 f938 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e36:	4892      	ldr	r0, [pc, #584]	; (8001080 <MX_GPIO_Init+0x310>)
 8000e38:	f001 f932 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e42:	4890      	ldr	r0, [pc, #576]	; (8001084 <MX_GPIO_Init+0x314>)
 8000e44:	f001 f92c 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	488b      	ldr	r0, [pc, #556]	; (800107c <MX_GPIO_Init+0x30c>)
 8000e4e:	f001 f927 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	4888      	ldr	r0, [pc, #544]	; (8001078 <MX_GPIO_Init+0x308>)
 8000e58:	f001 f922 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e5c:	f240 1315 	movw	r3, #277	; 0x115
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4880      	ldr	r0, [pc, #512]	; (8001078 <MX_GPIO_Init+0x308>)
 8000e76:	f000 ff69 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e7a:	236a      	movs	r3, #106	; 0x6a
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7e:	4b82      	ldr	r3, [pc, #520]	; (8001088 <MX_GPIO_Init+0x318>)
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	487a      	ldr	r0, [pc, #488]	; (8001078 <MX_GPIO_Init+0x308>)
 8000e8e:	f000 ff5d 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e92:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e98:	4b7b      	ldr	r3, [pc, #492]	; (8001088 <MX_GPIO_Init+0x318>)
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4877      	ldr	r0, [pc, #476]	; (8001084 <MX_GPIO_Init+0x314>)
 8000ea8:	f000 ff50 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000eac:	233f      	movs	r3, #63	; 0x3f
 8000eae:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eb0:	230b      	movs	r3, #11
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4871      	ldr	r0, [pc, #452]	; (8001084 <MX_GPIO_Init+0x314>)
 8000ec0:	f000 ff44 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f000 ff33 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000ee6:	f248 1304 	movw	r3, #33028	; 0x8104
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f000 ff23 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f06:	2308      	movs	r3, #8
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f16:	2301      	movs	r3, #1
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f000 ff12 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f2c:	230b      	movs	r3, #11
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f000 ff05 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f42:	23e0      	movs	r3, #224	; 0xe0
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f52:	2305      	movs	r3, #5
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f000 fef4 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f68:	4b47      	ldr	r3, [pc, #284]	; (8001088 <MX_GPIO_Init+0x318>)
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4841      	ldr	r0, [pc, #260]	; (800107c <MX_GPIO_Init+0x30c>)
 8000f78:	f000 fee8 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f80:	230b      	movs	r3, #11
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	483b      	ldr	r0, [pc, #236]	; (800107c <MX_GPIO_Init+0x30c>)
 8000f90:	f000 fedc 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f94:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000f98:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4833      	ldr	r0, [pc, #204]	; (800107c <MX_GPIO_Init+0x30c>)
 8000fae:	f000 fecd 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000fb2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000fb6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <MX_GPIO_Init+0x318>)
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	482e      	ldr	r0, [pc, #184]	; (8001080 <MX_GPIO_Init+0x310>)
 8000fc8:	f000 fec0 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000fcc:	f243 0381 	movw	r3, #12417	; 0x3081
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4826      	ldr	r0, [pc, #152]	; (8001080 <MX_GPIO_Init+0x310>)
 8000fe6:	f000 feb1 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fea:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4820      	ldr	r0, [pc, #128]	; (8001084 <MX_GPIO_Init+0x314>)
 8001004:	f000 fea2 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001008:	2302      	movs	r3, #2
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001018:	2305      	movs	r3, #5
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4817      	ldr	r0, [pc, #92]	; (8001080 <MX_GPIO_Init+0x310>)
 8001024:	f000 fe92 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001028:	2378      	movs	r3, #120	; 0x78
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001038:	2307      	movs	r3, #7
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <MX_GPIO_Init+0x310>)
 8001044:	f000 fe82 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001048:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104e:	2312      	movs	r3, #18
 8001050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	2301      	movs	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105a:	2304      	movs	r3, #4
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_GPIO_Init+0x30c>)
 8001066:	f000 fe71 	bl	8001d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2017      	movs	r0, #23
 8001070:	e00c      	b.n	800108c <MX_GPIO_Init+0x31c>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	48001000 	.word	0x48001000
 800107c:	48000400 	.word	0x48000400
 8001080:	48000c00 	.word	0x48000c00
 8001084:	48000800 	.word	0x48000800
 8001088:	10110000 	.word	0x10110000
 800108c:	f000 fc9b 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001090:	2017      	movs	r0, #23
 8001092:	f000 fcb4 	bl	80019fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2028      	movs	r0, #40	; 0x28
 800109c:	f000 fc93 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a0:	2028      	movs	r0, #40	; 0x28
 80010a2:	f000 fcac 	bl	80019fe <HAL_NVIC_EnableIRQ>

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x44>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	; 0x60
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x44>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x44>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6593      	str	r3, [r2, #88]	; 0x58
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x44>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x84>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d12d      	bne.n	8001180 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_DFSDM_ChannelMspInit+0x88>)
 8001126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001128:	4a18      	ldr	r2, [pc, #96]	; (800118c <HAL_DFSDM_ChannelMspInit+0x88>)
 800112a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800112e:	6613      	str	r3, [r2, #96]	; 0x60
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_DFSDM_ChannelMspInit+0x88>)
 8001132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_DFSDM_ChannelMspInit+0x88>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <HAL_DFSDM_ChannelMspInit+0x88>)
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_DFSDM_ChannelMspInit+0x88>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001154:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001166:	2306      	movs	r3, #6
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4807      	ldr	r0, [pc, #28]	; (8001190 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8001172:	f000 fdeb 	bl	8001d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	4a02      	ldr	r2, [pc, #8]	; (8001188 <HAL_DFSDM_ChannelMspInit+0x84>)
 800117e:	6013      	str	r3, [r2, #0]
  }

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000090 	.word	0x20000090
 800118c:	40021000 	.word	0x40021000
 8001190:	48001000 	.word	0x48001000

08001194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_I2C_MspInit+0x7c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d128      	bne.n	8001208 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_I2C_MspInit+0x80>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a16      	ldr	r2, [pc, #88]	; (8001214 <HAL_I2C_MspInit+0x80>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_I2C_MspInit+0x80>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e0:	2304      	movs	r3, #4
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <HAL_I2C_MspInit+0x84>)
 80011ec:	f000 fdae 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_I2C_MspInit+0x80>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_I2C_MspInit+0x80>)
 80011f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011fa:	6593      	str	r3, [r2, #88]	; 0x58
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_I2C_MspInit+0x80>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	3728      	adds	r7, #40	; 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40005800 	.word	0x40005800
 8001214:	40021000 	.word	0x40021000
 8001218:	48000400 	.word	0x48000400

0800121c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_QSPI_MspInit+0x7c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d128      	bne.n	8001290 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_QSPI_MspInit+0x80>)
 8001240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001242:	4a16      	ldr	r2, [pc, #88]	; (800129c <HAL_QSPI_MspInit+0x80>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	6513      	str	r3, [r2, #80]	; 0x50
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_QSPI_MspInit+0x80>)
 800124c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_QSPI_MspInit+0x80>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <HAL_QSPI_MspInit+0x80>)
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_QSPI_MspInit+0x80>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800126e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001272:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001280:	230a      	movs	r3, #10
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_QSPI_MspInit+0x84>)
 800128c:	f000 fd5e 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	a0001000 	.word	0xa0001000
 800129c:	40021000 	.word	0x40021000
 80012a0:	48001000 	.word	0x48001000

080012a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_SPI_MspInit+0x7c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d128      	bne.n	8001318 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_SPI_MspInit+0x80>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <HAL_SPI_MspInit+0x80>)
 80012cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d0:	6593      	str	r3, [r2, #88]	; 0x58
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_SPI_MspInit+0x80>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_SPI_MspInit+0x80>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_SPI_MspInit+0x80>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_SPI_MspInit+0x80>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80012f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001308:	2306      	movs	r3, #6
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_SPI_MspInit+0x84>)
 8001314:	f000 fd1a 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40003c00 	.word	0x40003c00
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a32      	ldr	r2, [pc, #200]	; (8001414 <HAL_UART_MspInit+0xe8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d130      	bne.n	80013b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <HAL_UART_MspInit+0xec>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001352:	4a31      	ldr	r2, [pc, #196]	; (8001418 <HAL_UART_MspInit+0xec>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6613      	str	r3, [r2, #96]	; 0x60
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_UART_MspInit+0xec>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <HAL_UART_MspInit+0xec>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a2b      	ldr	r2, [pc, #172]	; (8001418 <HAL_UART_MspInit+0xec>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_UART_MspInit+0xec>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800137e:	23c0      	movs	r3, #192	; 0xc0
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800138e:	2307      	movs	r3, #7
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4820      	ldr	r0, [pc, #128]	; (800141c <HAL_UART_MspInit+0xf0>)
 800139a:	f000 fcd7 	bl	8001d4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2025      	movs	r0, #37	; 0x25
 80013a4:	f000 fb0f 	bl	80019c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013a8:	2025      	movs	r0, #37	; 0x25
 80013aa:	f000 fb28 	bl	80019fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ae:	e02d      	b.n	800140c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <HAL_UART_MspInit+0xf4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d128      	bne.n	800140c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_UART_MspInit+0xec>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <HAL_UART_MspInit+0xec>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6593      	str	r3, [r2, #88]	; 0x58
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_UART_MspInit+0xec>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_UART_MspInit+0xec>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_UART_MspInit+0xec>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_UART_MspInit+0xec>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80013ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013fc:	2307      	movs	r3, #7
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <HAL_UART_MspInit+0xf8>)
 8001408:	f000 fca0 	bl	8001d4c <HAL_GPIO_Init>
}
 800140c:	bf00      	nop
 800140e:	3730      	adds	r7, #48	; 0x30
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40013800 	.word	0x40013800
 8001418:	40021000 	.word	0x40021000
 800141c:	48000400 	.word	0x48000400
 8001420:	40004800 	.word	0x40004800
 8001424:	48000c00 	.word	0x48000c00

08001428 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001448:	d154      	bne.n	80014f4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a2b      	ldr	r2, [pc, #172]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147a:	f000 fc67 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800147e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001490:	230a      	movs	r3, #10
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f000 fc55 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a15      	ldr	r2, [pc, #84]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 80014a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d114      	bne.n	80014f0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6593      	str	r3, [r2, #88]	; 0x58
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80014de:	f001 f90b 	bl	80026f8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <HAL_PCD_MspInit+0xd4>)
 80014e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014ee:	e001      	b.n	80014f4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80014f0:	f001 f902 	bl	80026f8 <HAL_PWREx_EnableVddUSB>
}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154c:	f000 f91c 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001558:	2020      	movs	r0, #32
 800155a:	f000 fdd3 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800155e:	2040      	movs	r0, #64	; 0x40
 8001560:	f000 fdd0 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001564:	2080      	movs	r0, #128	; 0x80
 8001566:	f000 fdcd 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800156a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800156e:	f000 fdc9 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART1_IRQHandler+0x10>)
 800157e:	f002 fe65 	bl	800424c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000638 	.word	0x20000638

0800158c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001590:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001594:	f000 fdb6 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001598:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800159c:	f000 fdb2 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015a4:	f000 fdae 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80015a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015ac:	f000 fdaa 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80015b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015b4:	f000 fda6 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f004 f8e2 	bl	80057b4 <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20018000 	.word	0x20018000
 800161c:	00000400 	.word	0x00000400
 8001620:	20000094 	.word	0x20000094
 8001624:	20000718 	.word	0x20000718

08001628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <SystemInit+0x5c>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <SystemInit+0x5c>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <SystemInit+0x60>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <SystemInit+0x60>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <SystemInit+0x60>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <SystemInit+0x60>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <SystemInit+0x60>)
 8001654:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001658:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800165c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <SystemInit+0x60>)
 8001660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001664:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <SystemInit+0x60>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a07      	ldr	r2, [pc, #28]	; (8001688 <SystemInit+0x60>)
 800166c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001670:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SystemInit+0x60>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00
 8001688:	40021000 	.word	0x40021000

0800168c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001690:	f7ff ffca 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001694:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001696:	e003      	b.n	80016a0 <LoopCopyDataInit>

08001698 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800169a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800169c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800169e:	3104      	adds	r1, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016a0:	480a      	ldr	r0, [pc, #40]	; (80016cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016a8:	d3f6      	bcc.n	8001698 <CopyDataInit>
	ldr	r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016ac:	e002      	b.n	80016b4 <LoopFillZerobss>

080016ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016b0:	f842 3b04 	str.w	r3, [r2], #4

080016b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <LoopForever+0x16>)
	cmp	r2, r3
 80016b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016b8:	d3f9      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ba:	f004 f881 	bl	80057c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016be:	f7ff f825 	bl	800070c <main>

080016c2 <LoopForever>:

LoopForever:
    b LoopForever
 80016c2:	e7fe      	b.n	80016c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80016c8:	0800631c 	.word	0x0800631c
	ldr	r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016d0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80016d4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80016d8:	20000714 	.word	0x20000714

080016dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_2_IRQHandler>

080016de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f961 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f80e 	bl	8001710 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e001      	b.n	8001704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001700:	f7ff fcdc 	bl	80010bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001704:	79fb      	ldrb	r3, [r7, #7]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_InitTick+0x6c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d023      	beq.n	800176c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_InitTick+0x70>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_InitTick+0x6c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f96d 	bl	8001a1a <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d809      	bhi.n	8001760 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f937 	bl	80019c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_InitTick+0x74>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e007      	b.n	8001770 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e004      	b.n	8001770 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e001      	b.n	8001770 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000700 	.word	0x20000700

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000700 	.word	0x20000700

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db0b      	blt.n	800189e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4907      	ldr	r1, [pc, #28]	; (80018ac <__NVIC_EnableIRQ+0x38>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f7ff ff8e 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff29 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d8:	f7ff ff3e 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff8e 	bl	8001904 <NVIC_EncodePriority>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff5d 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff31 	bl	8001874 <__NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffa2 	bl	800196c <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0ac      	b.n	8001ba0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f8b2 	bl	8001bb4 <DFSDM_GetChannelFromInstance>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a55      	ldr	r2, [pc, #340]	; (8001ba8 <HAL_DFSDM_ChannelInit+0x174>)
 8001a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e09f      	b.n	8001ba0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff fb4f 	bl	8001104 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a66:	4b51      	ldr	r3, [pc, #324]	; (8001bac <HAL_DFSDM_ChannelInit+0x178>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a4f      	ldr	r2, [pc, #316]	; (8001bac <HAL_DFSDM_ChannelInit+0x178>)
 8001a6e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_DFSDM_ChannelInit+0x178>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d125      	bne.n	8001ac4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a78:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a4c      	ldr	r2, [pc, #304]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a82:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a84:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4948      	ldr	r1, [pc, #288]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a46      	ldr	r2, [pc, #280]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a98:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001a9c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d108      	bne.n	8001ab8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001aa6:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	493f      	ldr	r1, [pc, #252]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a3c      	ldr	r2, [pc, #240]	; (8001bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ac2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001ad2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ae2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ae8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 020f 	bic.w	r2, r2, #15
 8001b00:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6819      	ldr	r1, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b28:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6899      	ldr	r1, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f002 0207 	and.w	r2, r2, #7
 8001b54:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b80:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f810 	bl	8001bb4 <DFSDM_GetChannelFromInstance>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4904      	ldr	r1, [pc, #16]	; (8001ba8 <HAL_DFSDM_ChannelInit+0x174>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2000009c 	.word	0x2000009c
 8001bac:	20000098 	.word	0x20000098
 8001bb0:	40016000 	.word	0x40016000

08001bb4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <DFSDM_GetChannelFromInstance+0x7c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d102      	bne.n	8001bca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e02b      	b.n	8001c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <DFSDM_GetChannelFromInstance+0x80>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d102      	bne.n	8001bd8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e024      	b.n	8001c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <DFSDM_GetChannelFromInstance+0x84>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d102      	bne.n	8001be6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001be0:	2302      	movs	r3, #2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e01d      	b.n	8001c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <DFSDM_GetChannelFromInstance+0x88>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d102      	bne.n	8001bf4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e016      	b.n	8001c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <DFSDM_GetChannelFromInstance+0x8c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d102      	bne.n	8001c02 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e00f      	b.n	8001c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <DFSDM_GetChannelFromInstance+0x90>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d102      	bne.n	8001c10 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	e008      	b.n	8001c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <DFSDM_GetChannelFromInstance+0x94>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d102      	bne.n	8001c1e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e001      	b.n	8001c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40016000 	.word	0x40016000
 8001c34:	40016020 	.word	0x40016020
 8001c38:	40016040 	.word	0x40016040
 8001c3c:	40016080 	.word	0x40016080
 8001c40:	400160a0 	.word	0x400160a0
 8001c44:	400160c0 	.word	0x400160c0
 8001c48:	400160e0 	.word	0x400160e0

08001c4c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d008      	beq.n	8001c76 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2204      	movs	r2, #4
 8001c68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e022      	b.n	8001cbc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 020e 	bic.w	r2, r2, #14
 8001c84:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f003 021c 	and.w	r2, r3, #28
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d005      	beq.n	8001cec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	e029      	b.n	8001d40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 020e 	bic.w	r2, r2, #14
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	f003 021c 	and.w	r2, r3, #28
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	4798      	blx	r3
    }
  }
  return status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5a:	e17f      	b.n	800205c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8171 	beq.w	8002056 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d00b      	beq.n	8001d94 <HAL_GPIO_Init+0x48>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d007      	beq.n	8001d94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d88:	2b11      	cmp	r3, #17
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b12      	cmp	r3, #18
 8001d92:	d130      	bne.n	8001df6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dca:	2201      	movs	r2, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 0201 	and.w	r2, r3, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d118      	bne.n	8001e34 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e08:	2201      	movs	r2, #1
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	f003 0201 	and.w	r2, r3, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x128>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b12      	cmp	r3, #18
 8001e72:	d123      	bne.n	8001ebc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	6939      	ldr	r1, [r7, #16]
 8001eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80ac 	beq.w	8002056 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	4b5f      	ldr	r3, [pc, #380]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	4a5e      	ldr	r2, [pc, #376]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6613      	str	r3, [r2, #96]	; 0x60
 8001f0a:	4b5c      	ldr	r3, [pc, #368]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f16:	4a5a      	ldr	r2, [pc, #360]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f40:	d025      	beq.n	8001f8e <HAL_GPIO_Init+0x242>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4f      	ldr	r2, [pc, #316]	; (8002084 <HAL_GPIO_Init+0x338>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01f      	beq.n	8001f8a <HAL_GPIO_Init+0x23e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4e      	ldr	r2, [pc, #312]	; (8002088 <HAL_GPIO_Init+0x33c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d019      	beq.n	8001f86 <HAL_GPIO_Init+0x23a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4d      	ldr	r2, [pc, #308]	; (800208c <HAL_GPIO_Init+0x340>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_GPIO_Init+0x236>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	; (8002090 <HAL_GPIO_Init+0x344>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00d      	beq.n	8001f7e <HAL_GPIO_Init+0x232>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4b      	ldr	r2, [pc, #300]	; (8002094 <HAL_GPIO_Init+0x348>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <HAL_GPIO_Init+0x22e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4a      	ldr	r2, [pc, #296]	; (8002098 <HAL_GPIO_Init+0x34c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d101      	bne.n	8001f76 <HAL_GPIO_Init+0x22a>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e00c      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f76:	2307      	movs	r3, #7
 8001f78:	e00a      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e008      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	f002 0203 	and.w	r2, r2, #3
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fa0:	4937      	ldr	r1, [pc, #220]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fae:	4b3b      	ldr	r3, [pc, #236]	; (800209c <HAL_GPIO_Init+0x350>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fd2:	4a32      	ldr	r2, [pc, #200]	; (800209c <HAL_GPIO_Init+0x350>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fd8:	4b30      	ldr	r3, [pc, #192]	; (800209c <HAL_GPIO_Init+0x350>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ffc:	4a27      	ldr	r2, [pc, #156]	; (800209c <HAL_GPIO_Init+0x350>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_GPIO_Init+0x350>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <HAL_GPIO_Init+0x350>)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_GPIO_Init+0x350>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <HAL_GPIO_Init+0x350>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	f47f ae78 	bne.w	8001d5c <HAL_GPIO_Init+0x10>
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	40010000 	.word	0x40010000
 8002084:	48000400 	.word	0x48000400
 8002088:	48000800 	.word	0x48000800
 800208c:	48000c00 	.word	0x48000c00
 8002090:	48001000 	.word	0x48001000
 8002094:	48001400 	.word	0x48001400
 8002098:	48001800 	.word	0x48001800
 800209c:	40010400 	.word	0x40010400

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	041a      	lsls	r2, r3, #16
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43d9      	mvns	r1, r3
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	400b      	ands	r3, r1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fab8 	bl	8000698 <HAL_GPIO_EXTI_Callback>
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40010400 	.word	0x40010400

08002134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e081      	b.n	800224a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff f81a 	bl	8001194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	; 0x24
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002184:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002194:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e006      	b.n	80021bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d104      	bne.n	80021ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	ea42 0103 	orr.w	r1, r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	021a      	lsls	r2, r3, #8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69d9      	ldr	r1, [r3, #28]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b20      	cmp	r3, #32
 8002266:	d138      	bne.n	80022da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002272:	2302      	movs	r3, #2
 8002274:	e032      	b.n	80022dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2224      	movs	r2, #36	; 0x24
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0201 	orr.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022da:	2302      	movs	r3, #2
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d139      	bne.n	8002372 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002308:	2302      	movs	r3, #2
 800230a:	e033      	b.n	8002374 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800233a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002372:	2302      	movs	r3, #2
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	b08f      	sub	sp, #60	; 0x3c
 8002384:	af0a      	add	r7, sp, #40	; 0x28
 8002386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e116      	b.n	80025c0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff f83b 	bl	8001428 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2203      	movs	r2, #3
 80023b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 ffb1 	bl	8005338 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	687e      	ldr	r6, [r7, #4]
 80023de:	466d      	mov	r5, sp
 80023e0:	f106 0410 	add.w	r4, r6, #16
 80023e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f4:	1d33      	adds	r3, r6, #4
 80023f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f002 ff71 	bl	80052e0 <USB_CoreInit>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0d7      	b.n	80025c0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f002 ff9f 	bl	800535a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e04a      	b.n	80024b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	333d      	adds	r3, #61	; 0x3d
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	333c      	adds	r3, #60	; 0x3c
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	b298      	uxth	r0, r3
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	3342      	adds	r3, #66	; 0x42
 800245e:	4602      	mov	r2, r0
 8002460:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	333f      	adds	r3, #63	; 0x3f
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	3344      	adds	r3, #68	; 0x44
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	3348      	adds	r3, #72	; 0x48
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3350      	adds	r3, #80	; 0x50
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	3301      	adds	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3af      	bcc.n	8002422 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e044      	b.n	8002552 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	3301      	adds	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	d3b5      	bcc.n	80024c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	687e      	ldr	r6, [r7, #4]
 8002564:	466d      	mov	r5, sp
 8002566:	f106 0410 	add.w	r4, r6, #16
 800256a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800256e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002572:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002576:	e885 0003 	stmia.w	r5, {r0, r1}
 800257a:	1d33      	adds	r3, r6, #4
 800257c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800257e:	6838      	ldr	r0, [r7, #0]
 8002580:	f002 ff16 	bl	80053b0 <USB_DevInit>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e014      	b.n	80025c0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f80a 	bl	80025c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 f8a6 	bl	800570a <USB_DevDisconnect>

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fa:	f043 0303 	orr.w	r3, r3, #3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40007000 	.word	0x40007000

08002630 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <HAL_PWREx_GetVoltageRange+0x18>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40007000 	.word	0x40007000

0800264c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265a:	d130      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002668:	d038      	beq.n	80026dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002672:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002678:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2232      	movs	r2, #50	; 0x32
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	0c9b      	lsrs	r3, r3, #18
 800268c:	3301      	adds	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002690:	e002      	b.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3b01      	subs	r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a4:	d102      	bne.n	80026ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f2      	bne.n	8002692 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b8:	d110      	bne.n	80026dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e00f      	b.n	80026de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ca:	d007      	beq.n	80026dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026d4:	4a05      	ldr	r2, [pc, #20]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40007000 	.word	0x40007000
 80026f0:	20000000 	.word	0x20000000
 80026f4:	431bde83 	.word	0x431bde83

080026f8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002706:	6053      	str	r3, [r2, #4]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40007000 	.word	0x40007000

08002718 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af02      	add	r7, sp, #8
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff f846 	bl	80017b0 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e063      	b.n	80027f8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10b      	bne.n	8002754 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7fe fd69 	bl	800121c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800274a:	f241 3188 	movw	r1, #5000	; 0x1388
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f858 	bl	8002804 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	3b01      	subs	r3, #1
 8002764:	021a      	lsls	r2, r3, #8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	2120      	movs	r1, #32
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f850 	bl	8002820 <QSPI_WaitFlagStateUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002784:	7afb      	ldrb	r3, [r7, #11]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d131      	bne.n	80027ee <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002794:	f023 0310 	bic.w	r3, r3, #16
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6852      	ldr	r2, [r2, #4]
 800279c:	0611      	lsls	r1, r2, #24
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68d2      	ldr	r2, [r2, #12]
 80027a2:	4311      	orrs	r1, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_QSPI_Init+0xe8>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6912      	ldr	r2, [r2, #16]
 80027ba:	0411      	lsls	r1, r2, #16
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6952      	ldr	r2, [r2, #20]
 80027c0:	4311      	orrs	r1, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6992      	ldr	r2, [r2, #24]
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80027f6:	7afb      	ldrb	r3, [r7, #11]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	ffe0f8fe 	.word	0xffe0f8fe

08002804 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002830:	e01a      	b.n	8002868 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d016      	beq.n	8002868 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283a:	f7fe ffb9 	bl	80017b0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	429a      	cmp	r2, r3
 8002848:	d302      	bcc.n	8002850 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2204      	movs	r2, #4
 8002854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e00e      	b.n	8002886 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	bf14      	ite	ne
 8002876:	2301      	movne	r3, #1
 8002878:	2300      	moveq	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	429a      	cmp	r2, r3
 8002882:	d1d6      	bne.n	8002832 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e3d4      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a2:	4ba1      	ldr	r3, [pc, #644]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ac:	4b9e      	ldr	r3, [pc, #632]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80e4 	beq.w	8002a8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_RCC_OscConfig+0x4a>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	f040 808b 	bne.w	80029e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	f040 8087 	bne.w	80029e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028da:	4b93      	ldr	r3, [pc, #588]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x62>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e3ac      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1a      	ldr	r2, [r3, #32]
 80028f6:	4b8c      	ldr	r3, [pc, #560]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <HAL_RCC_OscConfig+0x7c>
 8002902:	4b89      	ldr	r3, [pc, #548]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290a:	e005      	b.n	8002918 <HAL_RCC_OscConfig+0x88>
 800290c:	4b86      	ldr	r3, [pc, #536]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002918:	4293      	cmp	r3, r2
 800291a:	d223      	bcs.n	8002964 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fd41 	bl	80033a8 <RCC_SetFlashLatencyFromMSIRange>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e38d      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002930:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a7c      	ldr	r2, [pc, #496]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4977      	ldr	r1, [pc, #476]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294e:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	4972      	ldr	r1, [pc, #456]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 8002962:	e025      	b.n	80029b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002964:	4b70      	ldr	r3, [pc, #448]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a6f      	ldr	r2, [pc, #444]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	496a      	ldr	r1, [pc, #424]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002982:	4b69      	ldr	r3, [pc, #420]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	4965      	ldr	r1, [pc, #404]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fd01 	bl	80033a8 <RCC_SetFlashLatencyFromMSIRange>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e34d      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b0:	f000 fc36 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	495a      	ldr	r1, [pc, #360]	; (8002b2c <HAL_RCC_OscConfig+0x29c>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_RCC_OscConfig+0x2a0>)
 80029ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d0:	4b58      	ldr	r3, [pc, #352]	; (8002b34 <HAL_RCC_OscConfig+0x2a4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fe9b 	bl	8001710 <HAL_InitTick>
 80029da:	4603      	mov	r3, r0
 80029dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d052      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	e331      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d032      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029f0:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a4c      	ldr	r2, [pc, #304]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029fc:	f7fe fed8 	bl	80017b0 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a04:	f7fe fed4 	bl	80017b0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e31a      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a16:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a22:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b3e      	ldr	r3, [pc, #248]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	493b      	ldr	r1, [pc, #236]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a40:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4936      	ldr	r1, [pc, #216]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
 8002a54:	e01a      	b.n	8002a8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a33      	ldr	r2, [pc, #204]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a62:	f7fe fea5 	bl	80017b0 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fea1 	bl	80017b0 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e2e7      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x1da>
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d074      	beq.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d005      	beq.n	8002aaa <HAL_RCC_OscConfig+0x21a>
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d064      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d160      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e2c4      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x24a>
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	e01d      	b.n	8002b16 <HAL_RCC_OscConfig+0x286>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae2:	d10c      	bne.n	8002afe <HAL_RCC_OscConfig+0x26e>
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e00b      	b.n	8002b16 <HAL_RCC_OscConfig+0x286>
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fe47 	bl	80017b0 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b24:	e011      	b.n	8002b4a <HAL_RCC_OscConfig+0x2ba>
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	08006290 	.word	0x08006290
 8002b30:	20000000 	.word	0x20000000
 8002b34:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fe3a 	bl	80017b0 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e280      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4a:	4baf      	ldr	r3, [pc, #700]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x2a8>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fe2a 	bl	80017b0 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe fe26 	bl	80017b0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e26c      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b72:	4ba5      	ldr	r3, [pc, #660]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2d0>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d060      	beq.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x310>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d119      	bne.n	8002bce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d116      	bne.n	8002bce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	4b99      	ldr	r3, [pc, #612]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x328>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e249      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b93      	ldr	r3, [pc, #588]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	4990      	ldr	r1, [pc, #576]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bcc:	e040      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d023      	beq.n	8002c1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd6:	4b8c      	ldr	r3, [pc, #560]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a8b      	ldr	r2, [pc, #556]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe fde5 	bl	80017b0 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe fde1 	bl	80017b0 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e227      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfc:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	497c      	ldr	r1, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e018      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a79      	ldr	r2, [pc, #484]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fdc1 	bl	80017b0 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c32:	f7fe fdbd 	bl	80017b0 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e203      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c44:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d03c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6a:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fd9c 	bl	80017b0 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fd98 	bl	80017b0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1de      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8e:	4b5e      	ldr	r3, [pc, #376]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <HAL_RCC_OscConfig+0x3ec>
 8002c9c:	e01b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9e:	4b5a      	ldr	r3, [pc, #360]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca4:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe fd7f 	bl	80017b0 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fd7b 	bl	80017b0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1c1      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc8:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1ef      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80a6 	beq.w	8002e30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	4a43      	ldr	r2, [pc, #268]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d10:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d118      	bne.n	8002d4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1c:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d28:	f7fe fd42 	bl	80017b0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7fe fd3e 	bl	80017b0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e184      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d42:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4d8>
 8002d56:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d66:	e024      	b.n	8002db2 <HAL_RCC_OscConfig+0x522>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d110      	bne.n	8002d92 <HAL_RCC_OscConfig+0x502>
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d90:	e00f      	b.n	8002db2 <HAL_RCC_OscConfig+0x522>
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe fcf9 	bl	80017b0 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe fcf5 	bl	80017b0 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e139      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ed      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x532>
 8002de6:	e01a      	b.n	8002e1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe fce2 	bl	80017b0 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe fcde 	bl	80017b0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d906      	bls.n	8002e10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e122      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e10:	4b90      	ldr	r3, [pc, #576]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e8      	bne.n	8002df0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e24:	4b8b      	ldr	r3, [pc, #556]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	4a8a      	ldr	r2, [pc, #552]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8108 	beq.w	800304a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	f040 80d0 	bne.w	8002fe4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e44:	4b83      	ldr	r3, [pc, #524]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0203 	and.w	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d130      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	3b01      	subs	r3, #1
 8002e64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d127      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d11f      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e84:	2a07      	cmp	r2, #7
 8002e86:	bf14      	ite	ne
 8002e88:	2201      	movne	r2, #1
 8002e8a:	2200      	moveq	r2, #0
 8002e8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d113      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d109      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d06e      	beq.n	8002f98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d069      	beq.n	8002f94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ec0:	4b64      	ldr	r3, [pc, #400]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ecc:	4b61      	ldr	r3, [pc, #388]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b7      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002edc:	4b5d      	ldr	r3, [pc, #372]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5c      	ldr	r2, [pc, #368]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee8:	f7fe fc62 	bl	80017b0 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe fc5e 	bl	80017b0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0a4      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f02:	4b54      	ldr	r3, [pc, #336]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0e:	4b51      	ldr	r3, [pc, #324]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	4b51      	ldr	r3, [pc, #324]	; (8003058 <HAL_RCC_OscConfig+0x7c8>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f1e:	3a01      	subs	r2, #1
 8002f20:	0112      	lsls	r2, r2, #4
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f28:	0212      	lsls	r2, r2, #8
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f30:	0852      	lsrs	r2, r2, #1
 8002f32:	3a01      	subs	r2, #1
 8002f34:	0552      	lsls	r2, r2, #21
 8002f36:	4311      	orrs	r1, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f3c:	0852      	lsrs	r2, r2, #1
 8002f3e:	3a01      	subs	r2, #1
 8002f40:	0652      	lsls	r2, r2, #25
 8002f42:	4311      	orrs	r1, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f48:	0912      	lsrs	r2, r2, #4
 8002f4a:	0452      	lsls	r2, r2, #17
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	4941      	ldr	r1, [pc, #260]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f60:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a3b      	ldr	r2, [pc, #236]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f6c:	f7fe fc20 	bl	80017b0 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe fc1c 	bl	80017b0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e062      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f92:	e05a      	b.n	800304a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e059      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d152      	bne.n	800304a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb0:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a27      	ldr	r2, [pc, #156]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fbc:	f7fe fbf8 	bl	80017b0 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe fbf4 	bl	80017b0 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e03a      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x734>
 8002fe2:	e032      	b.n	800304a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d02d      	beq.n	8003046 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a19      	ldr	r2, [pc, #100]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ff6:	4b17      	ldr	r3, [pc, #92]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d105      	bne.n	800300e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	4a13      	ldr	r2, [pc, #76]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003008:	f023 0303 	bic.w	r3, r3, #3
 800300c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4a10      	ldr	r2, [pc, #64]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003014:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe fbc7 	bl	80017b0 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe fbc3 	bl	80017b0 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e009      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x796>
 8003044:	e001      	b.n	800304a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	f99d808c 	.word	0xf99d808c

0800305c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0c8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b66      	ldr	r3, [pc, #408]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d910      	bls.n	80030a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 0207 	bic.w	r2, r3, #7
 8003086:	4961      	ldr	r1, [pc, #388]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0b0      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d04c      	beq.n	8003146 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b4:	4b56      	ldr	r3, [pc, #344]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d121      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e09e      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d115      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e092      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030e4:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e086      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e07e      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003104:	4b42      	ldr	r3, [pc, #264]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 0203 	bic.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	493f      	ldr	r1, [pc, #252]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003116:	f7fe fb4b 	bl	80017b0 <HAL_GetTick>
 800311a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	e00a      	b.n	8003134 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311e:	f7fe fb47 	bl	80017b0 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e066      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003134:	4b36      	ldr	r3, [pc, #216]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 020c 	and.w	r2, r3, #12
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	429a      	cmp	r2, r3
 8003144:	d1eb      	bne.n	800311e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003152:	4b2f      	ldr	r3, [pc, #188]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	492c      	ldr	r1, [pc, #176]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b29      	ldr	r3, [pc, #164]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d210      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 0207 	bic.w	r2, r3, #7
 800317a:	4924      	ldr	r1, [pc, #144]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e036      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4918      	ldr	r1, [pc, #96]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4910      	ldr	r1, [pc, #64]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031d2:	f000 f825 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	490c      	ldr	r1, [pc, #48]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	fa22 f303 	lsr.w	r3, r2, r3
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fa8a 	bl	8001710 <HAL_InitTick>
 80031fc:	4603      	mov	r3, r0
 80031fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003200:	7afb      	ldrb	r3, [r7, #11]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40022000 	.word	0x40022000
 8003210:	40021000 	.word	0x40021000
 8003214:	08006290 	.word	0x08006290
 8003218:	20000000 	.word	0x20000000
 800321c:	20000004 	.word	0x20000004

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800322e:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003238:	4b3b      	ldr	r3, [pc, #236]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x34>
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d121      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d11e      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003254:	4b34      	ldr	r3, [pc, #208]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003260:	4b31      	ldr	r3, [pc, #196]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 8003262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e005      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003270:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800327c:	4a2b      	ldr	r2, [pc, #172]	; (800332c <HAL_RCC_GetSysClockFreq+0x10c>)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003284:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d102      	bne.n	800329e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_RCC_GetSysClockFreq+0x110>)
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e004      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032a4:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_RCC_GetSysClockFreq+0x114>)
 80032a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d134      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d003      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0xac>
 80032c4:	e005      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_RCC_GetSysClockFreq+0x110>)
 80032c8:	617b      	str	r3, [r7, #20]
      break;
 80032ca:	e005      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_GetSysClockFreq+0x114>)
 80032ce:	617b      	str	r3, [r7, #20]
      break;
 80032d0:	e002      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	617b      	str	r3, [r7, #20]
      break;
 80032d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032d8:	4b13      	ldr	r3, [pc, #76]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	3301      	adds	r3, #1
 80032e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	fb02 f203 	mul.w	r2, r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	0e5b      	lsrs	r3, r3, #25
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	3301      	adds	r3, #1
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003318:	69bb      	ldr	r3, [r7, #24]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	; 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	080062a8 	.word	0x080062a8
 8003330:	00f42400 	.word	0x00f42400
 8003334:	007a1200 	.word	0x007a1200

08003338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_RCC_GetHCLKFreq+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000000 	.word	0x20000000

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003354:	f7ff fff0 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4904      	ldr	r1, [pc, #16]	; (8003378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	080062a0 	.word	0x080062a0

0800337c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003380:	f7ff ffda 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	0adb      	lsrs	r3, r3, #11
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4904      	ldr	r1, [pc, #16]	; (80033a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	080062a0 	.word	0x080062a0

080033a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033b4:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033c0:	f7ff f936 	bl	8002630 <HAL_PWREx_GetVoltageRange>
 80033c4:	6178      	str	r0, [r7, #20]
 80033c6:	e014      	b.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	4a24      	ldr	r2, [pc, #144]	; (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6593      	str	r3, [r2, #88]	; 0x58
 80033d4:	4b22      	ldr	r3, [pc, #136]	; (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033e0:	f7ff f926 	bl	8002630 <HAL_PWREx_GetVoltageRange>
 80033e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f8:	d10b      	bne.n	8003412 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b80      	cmp	r3, #128	; 0x80
 80033fe:	d919      	bls.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2ba0      	cmp	r3, #160	; 0xa0
 8003404:	d902      	bls.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003406:	2302      	movs	r3, #2
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	e013      	b.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800340c:	2301      	movs	r3, #1
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e010      	b.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b80      	cmp	r3, #128	; 0x80
 8003416:	d902      	bls.n	800341e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003418:	2303      	movs	r3, #3
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	e00a      	b.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b80      	cmp	r3, #128	; 0x80
 8003422:	d102      	bne.n	800342a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003424:	2302      	movs	r3, #2
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	e004      	b.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b70      	cmp	r3, #112	; 0x70
 800342e:	d101      	bne.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003430:	2301      	movs	r3, #1
 8003432:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 0207 	bic.w	r2, r3, #7
 800343c:	4909      	ldr	r1, [pc, #36]	; (8003464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	429a      	cmp	r2, r3
 8003450:	d001      	beq.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	40022000 	.word	0x40022000

08003468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003470:	2300      	movs	r3, #0
 8003472:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003474:	2300      	movs	r3, #0
 8003476:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003480:	2b00      	cmp	r3, #0
 8003482:	d041      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003488:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800348c:	d02a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800348e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003492:	d824      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003494:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003498:	d008      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800349a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800349e:	d81e      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a8:	d010      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034aa:	e018      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034ac:	4b86      	ldr	r3, [pc, #536]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a85      	ldr	r2, [pc, #532]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b8:	e015      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 facb 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034ca:	e00c      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3320      	adds	r3, #32
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fbb6 	bl	8003c44 <RCCEx_PLLSAI2_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034dc:	e003      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	74fb      	strb	r3, [r7, #19]
      break;
 80034e2:	e000      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ec:	4b76      	ldr	r3, [pc, #472]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034fa:	4973      	ldr	r1, [pc, #460]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003502:	e001      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d041      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003518:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800351c:	d02a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800351e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003522:	d824      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003528:	d008      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800352a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800352e:	d81e      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003538:	d010      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800353a:	e018      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800353c:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a61      	ldr	r2, [pc, #388]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003546:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003548:	e015      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fa83 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800355a:	e00c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3320      	adds	r3, #32
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb6e 	bl	8003c44 <RCCEx_PLLSAI2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	74fb      	strb	r3, [r7, #19]
      break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800357c:	4b52      	ldr	r3, [pc, #328]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358a:	494f      	ldr	r1, [pc, #316]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003592:	e001      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a0 	beq.w	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035aa:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c0:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	4a40      	ldr	r2, [pc, #256]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ca:	6593      	str	r3, [r2, #88]	; 0x58
 80035cc:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d8:	2301      	movs	r3, #1
 80035da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035dc:	4b3b      	ldr	r3, [pc, #236]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a3a      	ldr	r2, [pc, #232]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035e8:	f7fe f8e2 	bl	80017b0 <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035ee:	e009      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fe f8de 	bl	80017b0 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	74fb      	strb	r3, [r7, #19]
        break;
 8003602:	e005      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003604:	4b31      	ldr	r3, [pc, #196]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ef      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d15c      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003616:	4b2c      	ldr	r3, [pc, #176]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003620:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01f      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	429a      	cmp	r2, r3
 8003632:	d019      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003640:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	4a20      	ldr	r2, [pc, #128]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003650:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003660:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fe f89d 	bl	80017b0 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003678:	e00b      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe f899 	bl	80017b0 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d902      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	74fb      	strb	r3, [r7, #19]
            break;
 8003690:	e006      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ec      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b6:	4904      	ldr	r1, [pc, #16]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036be:	e009      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	74bb      	strb	r3, [r7, #18]
 80036c4:	e006      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d4:	7c7b      	ldrb	r3, [r7, #17]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4b9e      	ldr	r3, [pc, #632]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	4a9d      	ldr	r2, [pc, #628]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f2:	4b98      	ldr	r3, [pc, #608]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	f023 0203 	bic.w	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	4994      	ldr	r1, [pc, #592]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003714:	4b8f      	ldr	r3, [pc, #572]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 020c 	bic.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	498c      	ldr	r1, [pc, #560]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003736:	4b87      	ldr	r3, [pc, #540]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	4983      	ldr	r1, [pc, #524]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003758:	4b7e      	ldr	r3, [pc, #504]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	497b      	ldr	r1, [pc, #492]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800377a:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003788:	4972      	ldr	r1, [pc, #456]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800379c:	4b6d      	ldr	r3, [pc, #436]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037aa:	496a      	ldr	r1, [pc, #424]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037be:	4b65      	ldr	r3, [pc, #404]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	4961      	ldr	r1, [pc, #388]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037e0:	4b5c      	ldr	r3, [pc, #368]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ee:	4959      	ldr	r1, [pc, #356]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003802:	4b54      	ldr	r3, [pc, #336]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	4950      	ldr	r1, [pc, #320]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003824:	4b4b      	ldr	r3, [pc, #300]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	4948      	ldr	r1, [pc, #288]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003846:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	493f      	ldr	r1, [pc, #252]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d028      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003868:	4b3a      	ldr	r3, [pc, #232]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003876:	4937      	ldr	r1, [pc, #220]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003886:	d106      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003888:	4b32      	ldr	r3, [pc, #200]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a31      	ldr	r2, [pc, #196]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003892:	60d3      	str	r3, [r2, #12]
 8003894:	e011      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800389e:	d10c      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	2101      	movs	r1, #1
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f8d8 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d028      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	491f      	ldr	r1, [pc, #124]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e4:	d106      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4a1a      	ldr	r2, [pc, #104]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f0:	60d3      	str	r3, [r2, #12]
 80038f2:	e011      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038fc:	d10c      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	2101      	movs	r1, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f8a9 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800390e:	7cfb      	ldrb	r3, [r7, #19]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02b      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003932:	4908      	ldr	r1, [pc, #32]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003942:	d109      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a02      	ldr	r2, [pc, #8]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800394e:	60d3      	str	r3, [r2, #12]
 8003950:	e014      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003960:	d10c      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f877 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d02f      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003996:	4928      	ldr	r1, [pc, #160]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	2102      	movs	r1, #2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f854 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d014      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039be:	7cfb      	ldrb	r3, [r7, #19]
 80039c0:	74bb      	strb	r3, [r7, #18]
 80039c2:	e011      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3320      	adds	r3, #32
 80039d2:	2102      	movs	r1, #2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 f935 	bl	8003c44 <RCCEx_PLLSAI2_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a02:	490d      	ldr	r1, [pc, #52]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a26:	4904      	ldr	r1, [pc, #16]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000

08003a3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a46:	f043 0304 	orr.w	r3, r3, #4
 8003a4a:	6013      	str	r3, [r2, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000

08003a5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a6a:	4b75      	ldr	r3, [pc, #468]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d018      	beq.n	8003aa8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a76:	4b72      	ldr	r3, [pc, #456]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0203 	and.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d10d      	bne.n	8003aa2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
       ||
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a8e:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d047      	beq.n	8003b32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	e044      	b.n	8003b32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d018      	beq.n	8003ae2 <RCCEx_PLLSAI1_Config+0x86>
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d825      	bhi.n	8003b00 <RCCEx_PLLSAI1_Config+0xa4>
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d002      	beq.n	8003abe <RCCEx_PLLSAI1_Config+0x62>
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d009      	beq.n	8003ad0 <RCCEx_PLLSAI1_Config+0x74>
 8003abc:	e020      	b.n	8003b00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003abe:	4b60      	ldr	r3, [pc, #384]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d11d      	bne.n	8003b06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ace:	e01a      	b.n	8003b06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad0:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d116      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae0:	e013      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ae2:	4b57      	ldr	r3, [pc, #348]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aee:	4b54      	ldr	r3, [pc, #336]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003afe:	e006      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      break;
 8003b04:	e004      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b06:	bf00      	nop
 8003b08:	e002      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e000      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10d      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b16:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	4944      	ldr	r1, [pc, #272]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d17d      	bne.n	8003c34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b38:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a40      	ldr	r2, [pc, #256]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fd fe34 	bl	80017b0 <HAL_GetTick>
 8003b48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b4a:	e009      	b.n	8003b60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b4c:	f7fd fe30 	bl	80017b0 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d902      	bls.n	8003b60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b5e:	e005      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b60:	4b37      	ldr	r3, [pc, #220]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ef      	bne.n	8003b4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d160      	bne.n	8003c34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d111      	bne.n	8003b9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b78:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6892      	ldr	r2, [r2, #8]
 8003b88:	0211      	lsls	r1, r2, #8
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68d2      	ldr	r2, [r2, #12]
 8003b8e:	0912      	lsrs	r2, r2, #4
 8003b90:	0452      	lsls	r2, r2, #17
 8003b92:	430a      	orrs	r2, r1
 8003b94:	492a      	ldr	r1, [pc, #168]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	610b      	str	r3, [r1, #16]
 8003b9a:	e027      	b.n	8003bec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d112      	bne.n	8003bc8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba2:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003baa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	0211      	lsls	r1, r2, #8
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6912      	ldr	r2, [r2, #16]
 8003bb8:	0852      	lsrs	r2, r2, #1
 8003bba:	3a01      	subs	r2, #1
 8003bbc:	0552      	lsls	r2, r2, #21
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	491f      	ldr	r1, [pc, #124]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	610b      	str	r3, [r1, #16]
 8003bc6:	e011      	b.n	8003bec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6892      	ldr	r2, [r2, #8]
 8003bd8:	0211      	lsls	r1, r2, #8
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6952      	ldr	r2, [r2, #20]
 8003bde:	0852      	lsrs	r2, r2, #1
 8003be0:	3a01      	subs	r2, #1
 8003be2:	0652      	lsls	r2, r2, #25
 8003be4:	430a      	orrs	r2, r1
 8003be6:	4916      	ldr	r1, [pc, #88]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fd fdda 	bl	80017b0 <HAL_GetTick>
 8003bfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bfe:	e009      	b.n	8003c14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c00:	f7fd fdd6 	bl	80017b0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d902      	bls.n	8003c14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	73fb      	strb	r3, [r7, #15]
          break;
 8003c12:	e005      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ef      	beq.n	8003c00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	4904      	ldr	r1, [pc, #16]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000

08003c44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c52:	4b6a      	ldr	r3, [pc, #424]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c5e:	4b67      	ldr	r3, [pc, #412]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0203 	and.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d10d      	bne.n	8003c8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
       ||
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c76:	4b61      	ldr	r3, [pc, #388]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
       ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d047      	beq.n	8003d1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
 8003c8e:	e044      	b.n	8003d1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d018      	beq.n	8003cca <RCCEx_PLLSAI2_Config+0x86>
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d825      	bhi.n	8003ce8 <RCCEx_PLLSAI2_Config+0xa4>
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d002      	beq.n	8003ca6 <RCCEx_PLLSAI2_Config+0x62>
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d009      	beq.n	8003cb8 <RCCEx_PLLSAI2_Config+0x74>
 8003ca4:	e020      	b.n	8003ce8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ca6:	4b55      	ldr	r3, [pc, #340]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11d      	bne.n	8003cee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb6:	e01a      	b.n	8003cee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cb8:	4b50      	ldr	r3, [pc, #320]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d116      	bne.n	8003cf2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc8:	e013      	b.n	8003cf2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cca:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cd6:	4b49      	ldr	r3, [pc, #292]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ce6:	e006      	b.n	8003cf6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      break;
 8003cec:	e004      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10d      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cfe:	4b3f      	ldr	r3, [pc, #252]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	430b      	orrs	r3, r1
 8003d14:	4939      	ldr	r1, [pc, #228]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d167      	bne.n	8003df0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d20:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a35      	ldr	r2, [pc, #212]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fd40 	bl	80017b0 <HAL_GetTick>
 8003d30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d32:	e009      	b.n	8003d48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d34:	f7fd fd3c 	bl	80017b0 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d902      	bls.n	8003d48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	73fb      	strb	r3, [r7, #15]
        break;
 8003d46:	e005      	b.n	8003d54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d48:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ef      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d14a      	bne.n	8003df0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d60:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6892      	ldr	r2, [r2, #8]
 8003d70:	0211      	lsls	r1, r2, #8
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68d2      	ldr	r2, [r2, #12]
 8003d76:	0912      	lsrs	r2, r2, #4
 8003d78:	0452      	lsls	r2, r2, #17
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	491f      	ldr	r1, [pc, #124]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	614b      	str	r3, [r1, #20]
 8003d82:	e011      	b.n	8003da8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6892      	ldr	r2, [r2, #8]
 8003d94:	0211      	lsls	r1, r2, #8
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6912      	ldr	r2, [r2, #16]
 8003d9a:	0852      	lsrs	r2, r2, #1
 8003d9c:	3a01      	subs	r2, #1
 8003d9e:	0652      	lsls	r2, r2, #25
 8003da0:	430a      	orrs	r2, r1
 8003da2:	4916      	ldr	r1, [pc, #88]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fd fcfc 	bl	80017b0 <HAL_GetTick>
 8003db8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dba:	e009      	b.n	8003dd0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dbc:	f7fd fcf8 	bl	80017b0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d902      	bls.n	8003dd0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	73fb      	strb	r3, [r7, #15]
          break;
 8003dce:	e005      	b.n	8003ddc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ef      	beq.n	8003dbc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	4904      	ldr	r1, [pc, #16]	; (8003dfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000

08003e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e095      	b.n	8003f3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e22:	d009      	beq.n	8003e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	61da      	str	r2, [r3, #28]
 8003e2a:	e005      	b.n	8003e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd fa26 	bl	80012a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e78:	d902      	bls.n	8003e80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	e002      	b.n	8003e86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e8e:	d007      	beq.n	8003ea0 <HAL_SPI_Init+0xa0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	ea42 0103 	orr.w	r1, r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	f003 0204 	and.w	r2, r3, #4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f1c:	ea42 0103 	orr.w	r1, r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e040      	b.n	8003fda <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7fd f9df 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2224      	movs	r2, #36	; 0x24
 8003f72:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fb79 	bl	800467c <UART_SetConfig>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e022      	b.n	8003fda <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fdf7 	bl	8004b90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fe7e 	bl	8004cd4 <UART_CheckIdleState>
 8003fd8:	4603      	mov	r3, r0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b08a      	sub	sp, #40	; 0x28
 8003fe6:	af02      	add	r7, sp, #8
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	f040 8082 	bne.w	8004100 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_UART_Transmit+0x26>
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e07a      	b.n	8004102 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_UART_Transmit+0x38>
 8004016:	2302      	movs	r3, #2
 8004018:	e073      	b.n	8004102 <HAL_UART_Transmit+0x120>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2221      	movs	r2, #33	; 0x21
 800402e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004030:	f7fd fbbe 	bl	80017b0 <HAL_GetTick>
 8004034:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404e:	d108      	bne.n	8004062 <HAL_UART_Transmit+0x80>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d104      	bne.n	8004062 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e003      	b.n	800406a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004072:	e02d      	b.n	80040d0 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	2180      	movs	r1, #128	; 0x80
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fe71 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e039      	b.n	8004102 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	881a      	ldrh	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a0:	b292      	uxth	r2, r2
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	3302      	adds	r3, #2
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e008      	b.n	80040be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	b292      	uxth	r2, r2
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3301      	adds	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1cb      	bne.n	8004074 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	2140      	movs	r1, #64	; 0x40
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fe3d 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e005      	b.n	8004102 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	4613      	mov	r3, r2
 8004118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800411e:	2b20      	cmp	r3, #32
 8004120:	d145      	bne.n	80041ae <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_UART_Transmit_IT+0x22>
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e03e      	b.n	80041b0 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_UART_Transmit_IT+0x34>
 800413c:	2302      	movs	r3, #2
 800413e:	e037      	b.n	80041b0 <HAL_UART_Transmit_IT+0xa4>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2221      	movs	r2, #33	; 0x21
 8004170:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	d107      	bne.n	800418c <HAL_UART_Transmit_IT+0x80>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d103      	bne.n	800418c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a0d      	ldr	r2, [pc, #52]	; (80041bc <HAL_UART_Transmit_IT+0xb0>)
 8004188:	669a      	str	r2, [r3, #104]	; 0x68
 800418a:	e002      	b.n	8004192 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a0c      	ldr	r2, [pc, #48]	; (80041c0 <HAL_UART_Transmit_IT+0xb4>)
 8004190:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	0800506f 	.word	0x0800506f
 80041c0:	08004ffb 	.word	0x08004ffb

080041c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d131      	bne.n	800423e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_UART_Receive_IT+0x22>
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e02a      	b.n	8004240 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_UART_Receive_IT+0x34>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e023      	b.n	8004240 <HAL_UART_Receive_IT+0x7c>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a0f      	ldr	r2, [pc, #60]	; (8004248 <HAL_UART_Receive_IT+0x84>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800422c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	461a      	mov	r2, r3
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fe13 	bl	8004e60 <UART_Start_Receive_IT>
 800423a:	4603      	mov	r3, r0
 800423c:	e000      	b.n	8004240 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40008000 	.word	0x40008000

0800424c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d113      	bne.n	80042a4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00e      	beq.n	80042a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 81ce 	beq.w	8004636 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
      }
      return;
 80042a2:	e1c8      	b.n	8004636 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80e3 	beq.w	8004472 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d105      	bne.n	80042c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4ba6      	ldr	r3, [pc, #664]	; (8004554 <HAL_UART_IRQHandler+0x308>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80d8 	beq.w	8004472 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d010      	beq.n	80042ee <HAL_UART_IRQHandler+0xa2>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2201      	movs	r2, #1
 80042dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e4:	f043 0201 	orr.w	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <HAL_UART_IRQHandler+0xce>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2202      	movs	r2, #2
 8004308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004310:	f043 0204 	orr.w	r2, r3, #4
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d010      	beq.n	8004346 <HAL_UART_IRQHandler+0xfa>
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2204      	movs	r2, #4
 8004334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433c:	f043 0202 	orr.w	r2, r3, #2
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d015      	beq.n	800437c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d104      	bne.n	8004364 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2208      	movs	r2, #8
 800436a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004372:	f043 0208 	orr.w	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004382:	2b00      	cmp	r3, #0
 8004384:	d011      	beq.n	80043aa <HAL_UART_IRQHandler+0x15e>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00c      	beq.n	80043aa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8142 	beq.w	800463a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00c      	beq.n	80043da <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d004      	beq.n	80043fa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d031      	beq.n	800445e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fdb8 	bl	8004f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d123      	bne.n	8004456 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	2b00      	cmp	r3, #0
 8004424:	d013      	beq.n	800444e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	4a4b      	ldr	r2, [pc, #300]	; (8004558 <HAL_UART_IRQHandler+0x30c>)
 800442c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	4618      	mov	r0, r3
 8004434:	f7fd fc48 	bl	8001cc8 <HAL_DMA_Abort_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d017      	beq.n	800446e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004448:	4610      	mov	r0, r2
 800444a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	e00f      	b.n	800446e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f8fe 	bl	8004650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	e00b      	b.n	800446e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8fa 	bl	8004650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	e007      	b.n	800446e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f8f6 	bl	8004650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800446c:	e0e5      	b.n	800463a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446e:	bf00      	nop
    return;
 8004470:	e0e3      	b.n	800463a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004476:	2b01      	cmp	r3, #1
 8004478:	f040 80a9 	bne.w	80045ce <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 80a3 	beq.w	80045ce <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 809d 	beq.w	80045ce <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2210      	movs	r2, #16
 800449a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d158      	bne.n	800455c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80044b4:	893b      	ldrh	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80c1 	beq.w	800463e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044c2:	893a      	ldrh	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	f080 80ba 	bcs.w	800463e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	893a      	ldrh	r2, [r7, #8]
 80044ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d12a      	bne.n	8004538 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0201 	bic.w	r2, r2, #1
 8004500:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004510:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0210 	bic.w	r2, r2, #16
 800452c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd fb8a 	bl	8001c4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004544:	b29b      	uxth	r3, r3
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	b29b      	uxth	r3, r3
 800454a:	4619      	mov	r1, r3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f889 	bl	8004664 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004552:	e074      	b.n	800463e <HAL_UART_IRQHandler+0x3f2>
 8004554:	04000120 	.word	0x04000120
 8004558:	08004fcf 	.word	0x08004fcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004568:	b29b      	uxth	r3, r3
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d063      	beq.n	8004642 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800457a:	897b      	ldrh	r3, [r7, #10]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d060      	beq.n	8004642 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800458e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0210 	bic.w	r2, r2, #16
 80045c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045c2:	897b      	ldrh	r3, [r7, #10]
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f84c 	bl	8004664 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80045cc:	e039      	b.n	8004642 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_UART_IRQHandler+0x3a8>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fe6d 	bl	80052cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045f2:	e029      	b.n	8004648 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01a      	beq.n	8004646 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	4798      	blx	r3
    }
    return;
 8004618:	e015      	b.n	8004646 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d011      	beq.n	8004648 <HAL_UART_IRQHandler+0x3fc>
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fd5b 	bl	80050ea <UART_EndTransmit_IT>
    return;
 8004634:	e008      	b.n	8004648 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004636:	bf00      	nop
 8004638:	e006      	b.n	8004648 <HAL_UART_IRQHandler+0x3fc>
    return;
 800463a:	bf00      	nop
 800463c:	e004      	b.n	8004648 <HAL_UART_IRQHandler+0x3fc>
      return;
 800463e:	bf00      	nop
 8004640:	e002      	b.n	8004648 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004646:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop

08004650 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800467c:	b5b0      	push	{r4, r5, r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	4313      	orrs	r3, r2
 800469e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4bad      	ldr	r3, [pc, #692]	; (800495c <UART_SetConfig+0x2e0>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	69f9      	ldr	r1, [r7, #28]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4aa2      	ldr	r2, [pc, #648]	; (8004960 <UART_SetConfig+0x2e4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a99      	ldr	r2, [pc, #612]	; (8004964 <UART_SetConfig+0x2e8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d121      	bne.n	8004746 <UART_SetConfig+0xca>
 8004702:	4b99      	ldr	r3, [pc, #612]	; (8004968 <UART_SetConfig+0x2ec>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	2b03      	cmp	r3, #3
 800470e:	d817      	bhi.n	8004740 <UART_SetConfig+0xc4>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <UART_SetConfig+0x9c>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	08004729 	.word	0x08004729
 800471c:	08004735 	.word	0x08004735
 8004720:	0800472f 	.word	0x0800472f
 8004724:	0800473b 	.word	0x0800473b
 8004728:	2301      	movs	r3, #1
 800472a:	76fb      	strb	r3, [r7, #27]
 800472c:	e0e7      	b.n	80048fe <UART_SetConfig+0x282>
 800472e:	2302      	movs	r3, #2
 8004730:	76fb      	strb	r3, [r7, #27]
 8004732:	e0e4      	b.n	80048fe <UART_SetConfig+0x282>
 8004734:	2304      	movs	r3, #4
 8004736:	76fb      	strb	r3, [r7, #27]
 8004738:	e0e1      	b.n	80048fe <UART_SetConfig+0x282>
 800473a:	2308      	movs	r3, #8
 800473c:	76fb      	strb	r3, [r7, #27]
 800473e:	e0de      	b.n	80048fe <UART_SetConfig+0x282>
 8004740:	2310      	movs	r3, #16
 8004742:	76fb      	strb	r3, [r7, #27]
 8004744:	e0db      	b.n	80048fe <UART_SetConfig+0x282>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a88      	ldr	r2, [pc, #544]	; (800496c <UART_SetConfig+0x2f0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d132      	bne.n	80047b6 <UART_SetConfig+0x13a>
 8004750:	4b85      	ldr	r3, [pc, #532]	; (8004968 <UART_SetConfig+0x2ec>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b0c      	cmp	r3, #12
 800475c:	d828      	bhi.n	80047b0 <UART_SetConfig+0x134>
 800475e:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <UART_SetConfig+0xe8>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	08004799 	.word	0x08004799
 8004768:	080047b1 	.word	0x080047b1
 800476c:	080047b1 	.word	0x080047b1
 8004770:	080047b1 	.word	0x080047b1
 8004774:	080047a5 	.word	0x080047a5
 8004778:	080047b1 	.word	0x080047b1
 800477c:	080047b1 	.word	0x080047b1
 8004780:	080047b1 	.word	0x080047b1
 8004784:	0800479f 	.word	0x0800479f
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047b1 	.word	0x080047b1
 8004794:	080047ab 	.word	0x080047ab
 8004798:	2300      	movs	r3, #0
 800479a:	76fb      	strb	r3, [r7, #27]
 800479c:	e0af      	b.n	80048fe <UART_SetConfig+0x282>
 800479e:	2302      	movs	r3, #2
 80047a0:	76fb      	strb	r3, [r7, #27]
 80047a2:	e0ac      	b.n	80048fe <UART_SetConfig+0x282>
 80047a4:	2304      	movs	r3, #4
 80047a6:	76fb      	strb	r3, [r7, #27]
 80047a8:	e0a9      	b.n	80048fe <UART_SetConfig+0x282>
 80047aa:	2308      	movs	r3, #8
 80047ac:	76fb      	strb	r3, [r7, #27]
 80047ae:	e0a6      	b.n	80048fe <UART_SetConfig+0x282>
 80047b0:	2310      	movs	r3, #16
 80047b2:	76fb      	strb	r3, [r7, #27]
 80047b4:	e0a3      	b.n	80048fe <UART_SetConfig+0x282>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6d      	ldr	r2, [pc, #436]	; (8004970 <UART_SetConfig+0x2f4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d120      	bne.n	8004802 <UART_SetConfig+0x186>
 80047c0:	4b69      	ldr	r3, [pc, #420]	; (8004968 <UART_SetConfig+0x2ec>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047ca:	2b30      	cmp	r3, #48	; 0x30
 80047cc:	d013      	beq.n	80047f6 <UART_SetConfig+0x17a>
 80047ce:	2b30      	cmp	r3, #48	; 0x30
 80047d0:	d814      	bhi.n	80047fc <UART_SetConfig+0x180>
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d009      	beq.n	80047ea <UART_SetConfig+0x16e>
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d810      	bhi.n	80047fc <UART_SetConfig+0x180>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <UART_SetConfig+0x168>
 80047de:	2b10      	cmp	r3, #16
 80047e0:	d006      	beq.n	80047f0 <UART_SetConfig+0x174>
 80047e2:	e00b      	b.n	80047fc <UART_SetConfig+0x180>
 80047e4:	2300      	movs	r3, #0
 80047e6:	76fb      	strb	r3, [r7, #27]
 80047e8:	e089      	b.n	80048fe <UART_SetConfig+0x282>
 80047ea:	2302      	movs	r3, #2
 80047ec:	76fb      	strb	r3, [r7, #27]
 80047ee:	e086      	b.n	80048fe <UART_SetConfig+0x282>
 80047f0:	2304      	movs	r3, #4
 80047f2:	76fb      	strb	r3, [r7, #27]
 80047f4:	e083      	b.n	80048fe <UART_SetConfig+0x282>
 80047f6:	2308      	movs	r3, #8
 80047f8:	76fb      	strb	r3, [r7, #27]
 80047fa:	e080      	b.n	80048fe <UART_SetConfig+0x282>
 80047fc:	2310      	movs	r3, #16
 80047fe:	76fb      	strb	r3, [r7, #27]
 8004800:	e07d      	b.n	80048fe <UART_SetConfig+0x282>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a5b      	ldr	r2, [pc, #364]	; (8004974 <UART_SetConfig+0x2f8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d120      	bne.n	800484e <UART_SetConfig+0x1d2>
 800480c:	4b56      	ldr	r3, [pc, #344]	; (8004968 <UART_SetConfig+0x2ec>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004816:	2bc0      	cmp	r3, #192	; 0xc0
 8004818:	d013      	beq.n	8004842 <UART_SetConfig+0x1c6>
 800481a:	2bc0      	cmp	r3, #192	; 0xc0
 800481c:	d814      	bhi.n	8004848 <UART_SetConfig+0x1cc>
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d009      	beq.n	8004836 <UART_SetConfig+0x1ba>
 8004822:	2b80      	cmp	r3, #128	; 0x80
 8004824:	d810      	bhi.n	8004848 <UART_SetConfig+0x1cc>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <UART_SetConfig+0x1b4>
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d006      	beq.n	800483c <UART_SetConfig+0x1c0>
 800482e:	e00b      	b.n	8004848 <UART_SetConfig+0x1cc>
 8004830:	2300      	movs	r3, #0
 8004832:	76fb      	strb	r3, [r7, #27]
 8004834:	e063      	b.n	80048fe <UART_SetConfig+0x282>
 8004836:	2302      	movs	r3, #2
 8004838:	76fb      	strb	r3, [r7, #27]
 800483a:	e060      	b.n	80048fe <UART_SetConfig+0x282>
 800483c:	2304      	movs	r3, #4
 800483e:	76fb      	strb	r3, [r7, #27]
 8004840:	e05d      	b.n	80048fe <UART_SetConfig+0x282>
 8004842:	2308      	movs	r3, #8
 8004844:	76fb      	strb	r3, [r7, #27]
 8004846:	e05a      	b.n	80048fe <UART_SetConfig+0x282>
 8004848:	2310      	movs	r3, #16
 800484a:	76fb      	strb	r3, [r7, #27]
 800484c:	e057      	b.n	80048fe <UART_SetConfig+0x282>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a49      	ldr	r2, [pc, #292]	; (8004978 <UART_SetConfig+0x2fc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d125      	bne.n	80048a4 <UART_SetConfig+0x228>
 8004858:	4b43      	ldr	r3, [pc, #268]	; (8004968 <UART_SetConfig+0x2ec>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004866:	d017      	beq.n	8004898 <UART_SetConfig+0x21c>
 8004868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800486c:	d817      	bhi.n	800489e <UART_SetConfig+0x222>
 800486e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004872:	d00b      	beq.n	800488c <UART_SetConfig+0x210>
 8004874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004878:	d811      	bhi.n	800489e <UART_SetConfig+0x222>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <UART_SetConfig+0x20a>
 800487e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004882:	d006      	beq.n	8004892 <UART_SetConfig+0x216>
 8004884:	e00b      	b.n	800489e <UART_SetConfig+0x222>
 8004886:	2300      	movs	r3, #0
 8004888:	76fb      	strb	r3, [r7, #27]
 800488a:	e038      	b.n	80048fe <UART_SetConfig+0x282>
 800488c:	2302      	movs	r3, #2
 800488e:	76fb      	strb	r3, [r7, #27]
 8004890:	e035      	b.n	80048fe <UART_SetConfig+0x282>
 8004892:	2304      	movs	r3, #4
 8004894:	76fb      	strb	r3, [r7, #27]
 8004896:	e032      	b.n	80048fe <UART_SetConfig+0x282>
 8004898:	2308      	movs	r3, #8
 800489a:	76fb      	strb	r3, [r7, #27]
 800489c:	e02f      	b.n	80048fe <UART_SetConfig+0x282>
 800489e:	2310      	movs	r3, #16
 80048a0:	76fb      	strb	r3, [r7, #27]
 80048a2:	e02c      	b.n	80048fe <UART_SetConfig+0x282>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	; (8004960 <UART_SetConfig+0x2e4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d125      	bne.n	80048fa <UART_SetConfig+0x27e>
 80048ae:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <UART_SetConfig+0x2ec>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048bc:	d017      	beq.n	80048ee <UART_SetConfig+0x272>
 80048be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048c2:	d817      	bhi.n	80048f4 <UART_SetConfig+0x278>
 80048c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c8:	d00b      	beq.n	80048e2 <UART_SetConfig+0x266>
 80048ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ce:	d811      	bhi.n	80048f4 <UART_SetConfig+0x278>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <UART_SetConfig+0x260>
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d8:	d006      	beq.n	80048e8 <UART_SetConfig+0x26c>
 80048da:	e00b      	b.n	80048f4 <UART_SetConfig+0x278>
 80048dc:	2300      	movs	r3, #0
 80048de:	76fb      	strb	r3, [r7, #27]
 80048e0:	e00d      	b.n	80048fe <UART_SetConfig+0x282>
 80048e2:	2302      	movs	r3, #2
 80048e4:	76fb      	strb	r3, [r7, #27]
 80048e6:	e00a      	b.n	80048fe <UART_SetConfig+0x282>
 80048e8:	2304      	movs	r3, #4
 80048ea:	76fb      	strb	r3, [r7, #27]
 80048ec:	e007      	b.n	80048fe <UART_SetConfig+0x282>
 80048ee:	2308      	movs	r3, #8
 80048f0:	76fb      	strb	r3, [r7, #27]
 80048f2:	e004      	b.n	80048fe <UART_SetConfig+0x282>
 80048f4:	2310      	movs	r3, #16
 80048f6:	76fb      	strb	r3, [r7, #27]
 80048f8:	e001      	b.n	80048fe <UART_SetConfig+0x282>
 80048fa:	2310      	movs	r3, #16
 80048fc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a17      	ldr	r2, [pc, #92]	; (8004960 <UART_SetConfig+0x2e4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	f040 8087 	bne.w	8004a18 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800490a:	7efb      	ldrb	r3, [r7, #27]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d837      	bhi.n	8004980 <UART_SetConfig+0x304>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0x29c>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004981 	.word	0x08004981
 8004920:	08004945 	.word	0x08004945
 8004924:	08004981 	.word	0x08004981
 8004928:	0800494b 	.word	0x0800494b
 800492c:	08004981 	.word	0x08004981
 8004930:	08004981 	.word	0x08004981
 8004934:	08004981 	.word	0x08004981
 8004938:	08004953 	.word	0x08004953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493c:	f7fe fd08 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 8004940:	6178      	str	r0, [r7, #20]
        break;
 8004942:	e022      	b.n	800498a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004944:	4b0d      	ldr	r3, [pc, #52]	; (800497c <UART_SetConfig+0x300>)
 8004946:	617b      	str	r3, [r7, #20]
        break;
 8004948:	e01f      	b.n	800498a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800494a:	f7fe fc69 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 800494e:	6178      	str	r0, [r7, #20]
        break;
 8004950:	e01b      	b.n	800498a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004956:	617b      	str	r3, [r7, #20]
        break;
 8004958:	e017      	b.n	800498a <UART_SetConfig+0x30e>
 800495a:	bf00      	nop
 800495c:	efff69f3 	.word	0xefff69f3
 8004960:	40008000 	.word	0x40008000
 8004964:	40013800 	.word	0x40013800
 8004968:	40021000 	.word	0x40021000
 800496c:	40004400 	.word	0x40004400
 8004970:	40004800 	.word	0x40004800
 8004974:	40004c00 	.word	0x40004c00
 8004978:	40005000 	.word	0x40005000
 800497c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	76bb      	strb	r3, [r7, #26]
        break;
 8004988:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80f1 	beq.w	8004b74 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	4413      	add	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d305      	bcc.n	80049ae <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d902      	bls.n	80049b4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	76bb      	strb	r3, [r7, #26]
 80049b2:	e0df      	b.n	8004b74 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	020b      	lsls	r3, r1, #8
 80049c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049ca:	0202      	lsls	r2, r0, #8
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	6849      	ldr	r1, [r1, #4]
 80049d0:	0849      	lsrs	r1, r1, #1
 80049d2:	4608      	mov	r0, r1
 80049d4:	f04f 0100 	mov.w	r1, #0
 80049d8:	1814      	adds	r4, r2, r0
 80049da:	eb43 0501 	adc.w	r5, r3, r1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	4620      	mov	r0, r4
 80049ea:	4629      	mov	r1, r5
 80049ec:	f7fb fc58 	bl	80002a0 <__aeabi_uldivmod>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4613      	mov	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049fe:	d308      	bcc.n	8004a12 <UART_SetConfig+0x396>
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a06:	d204      	bcs.n	8004a12 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	e0b0      	b.n	8004b74 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	76bb      	strb	r3, [r7, #26]
 8004a16:	e0ad      	b.n	8004b74 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a20:	d15c      	bne.n	8004adc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004a22:	7efb      	ldrb	r3, [r7, #27]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d828      	bhi.n	8004a7a <UART_SetConfig+0x3fe>
 8004a28:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <UART_SetConfig+0x3b4>)
 8004a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2e:	bf00      	nop
 8004a30:	08004a55 	.word	0x08004a55
 8004a34:	08004a5d 	.word	0x08004a5d
 8004a38:	08004a65 	.word	0x08004a65
 8004a3c:	08004a7b 	.word	0x08004a7b
 8004a40:	08004a6b 	.word	0x08004a6b
 8004a44:	08004a7b 	.word	0x08004a7b
 8004a48:	08004a7b 	.word	0x08004a7b
 8004a4c:	08004a7b 	.word	0x08004a7b
 8004a50:	08004a73 	.word	0x08004a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a54:	f7fe fc7c 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 8004a58:	6178      	str	r0, [r7, #20]
        break;
 8004a5a:	e013      	b.n	8004a84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a5c:	f7fe fc8e 	bl	800337c <HAL_RCC_GetPCLK2Freq>
 8004a60:	6178      	str	r0, [r7, #20]
        break;
 8004a62:	e00f      	b.n	8004a84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a64:	4b49      	ldr	r3, [pc, #292]	; (8004b8c <UART_SetConfig+0x510>)
 8004a66:	617b      	str	r3, [r7, #20]
        break;
 8004a68:	e00c      	b.n	8004a84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a6a:	f7fe fbd9 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 8004a6e:	6178      	str	r0, [r7, #20]
        break;
 8004a70:	e008      	b.n	8004a84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a76:	617b      	str	r3, [r7, #20]
        break;
 8004a78:	e004      	b.n	8004a84 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	76bb      	strb	r3, [r7, #26]
        break;
 8004a82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d074      	beq.n	8004b74 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	005a      	lsls	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b0f      	cmp	r3, #15
 8004aa6:	d916      	bls.n	8004ad6 <UART_SetConfig+0x45a>
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aae:	d212      	bcs.n	8004ad6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f023 030f 	bic.w	r3, r3, #15
 8004ab8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	89fb      	ldrh	r3, [r7, #14]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	89fa      	ldrh	r2, [r7, #14]
 8004ad2:	60da      	str	r2, [r3, #12]
 8004ad4:	e04e      	b.n	8004b74 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	76bb      	strb	r3, [r7, #26]
 8004ada:	e04b      	b.n	8004b74 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004adc:	7efb      	ldrb	r3, [r7, #27]
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d827      	bhi.n	8004b32 <UART_SetConfig+0x4b6>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <UART_SetConfig+0x46c>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004b23 	.word	0x08004b23
 8004afc:	08004b33 	.word	0x08004b33
 8004b00:	08004b33 	.word	0x08004b33
 8004b04:	08004b33 	.word	0x08004b33
 8004b08:	08004b2b 	.word	0x08004b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0c:	f7fe fc20 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 8004b10:	6178      	str	r0, [r7, #20]
        break;
 8004b12:	e013      	b.n	8004b3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7fe fc32 	bl	800337c <HAL_RCC_GetPCLK2Freq>
 8004b18:	6178      	str	r0, [r7, #20]
        break;
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <UART_SetConfig+0x510>)
 8004b1e:	617b      	str	r3, [r7, #20]
        break;
 8004b20:	e00c      	b.n	8004b3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b22:	f7fe fb7d 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 8004b26:	6178      	str	r0, [r7, #20]
        break;
 8004b28:	e008      	b.n	8004b3c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	617b      	str	r3, [r7, #20]
        break;
 8004b30:	e004      	b.n	8004b3c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	76bb      	strb	r3, [r7, #26]
        break;
 8004b3a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d018      	beq.n	8004b74 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	085a      	lsrs	r2, r3, #1
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	441a      	add	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b0f      	cmp	r3, #15
 8004b5c:	d908      	bls.n	8004b70 <UART_SetConfig+0x4f4>
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b64:	d204      	bcs.n	8004b70 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	e001      	b.n	8004b74 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b80:	7ebb      	ldrb	r3, [r7, #26]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bdb0      	pop	{r4, r5, r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	00f42400 	.word	0x00f42400

08004b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8e:	d10a      	bne.n	8004ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ce4:	f7fc fd64 	bl	80017b0 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d10e      	bne.n	8004d16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f82d 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e023      	b.n	8004d5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d10e      	bne.n	8004d42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f817 	bl	8004d66 <UART_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e00d      	b.n	8004d5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d76:	e05e      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d05a      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d80:	f7fc fd16 	bl	80017b0 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d302      	bcc.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d11b      	bne.n	8004dce <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004da4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e043      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d02c      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dea:	d124      	bne.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e04:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e00f      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d091      	beq.n	8004d78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	88fa      	ldrh	r2, [r7, #6]
 8004e78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e92:	d10e      	bne.n	8004eb2 <UART_Start_Receive_IT+0x52>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <UART_Start_Receive_IT+0x48>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ea6:	e02d      	b.n	8004f04 <UART_Start_Receive_IT+0xa4>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	22ff      	movs	r2, #255	; 0xff
 8004eac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004eb0:	e028      	b.n	8004f04 <UART_Start_Receive_IT+0xa4>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10d      	bne.n	8004ed6 <UART_Start_Receive_IT+0x76>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <UART_Start_Receive_IT+0x6c>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	22ff      	movs	r2, #255	; 0xff
 8004ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004eca:	e01b      	b.n	8004f04 <UART_Start_Receive_IT+0xa4>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	227f      	movs	r2, #127	; 0x7f
 8004ed0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ed4:	e016      	b.n	8004f04 <UART_Start_Receive_IT+0xa4>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ede:	d10d      	bne.n	8004efc <UART_Start_Receive_IT+0x9c>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <UART_Start_Receive_IT+0x92>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	227f      	movs	r2, #127	; 0x7f
 8004eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ef0:	e008      	b.n	8004f04 <UART_Start_Receive_IT+0xa4>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	223f      	movs	r2, #63	; 0x3f
 8004ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004efa:	e003      	b.n	8004f04 <UART_Start_Receive_IT+0xa4>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2222      	movs	r2, #34	; 0x22
 8004f10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2a:	d107      	bne.n	8004f3c <UART_Start_Receive_IT+0xdc>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d103      	bne.n	8004f3c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <UART_Start_Receive_IT+0x108>)
 8004f38:	665a      	str	r2, [r3, #100]	; 0x64
 8004f3a:	e002      	b.n	8004f42 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <UART_Start_Receive_IT+0x10c>)
 8004f40:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004f58:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	080051f5 	.word	0x080051f5
 8004f6c:	0800511d 	.word	0x0800511d

08004f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f86:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0201 	bic.w	r2, r2, #1
 8004f96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d107      	bne.n	8004fb0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0210 	bic.w	r2, r2, #16
 8004fae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7ff fb2f 	bl	8004650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005006:	2b21      	cmp	r3, #33	; 0x21
 8005008:	d12b      	bne.n	8005062 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d110      	bne.n	8005038 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005024:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005034:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005036:	e014      	b.n	8005062 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503c:	781a      	ldrb	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	b292      	uxth	r2, r2
 8005044:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800507a:	2b21      	cmp	r3, #33	; 0x21
 800507c:	d12f      	bne.n	80050de <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d110      	bne.n	80050ac <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005098:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050a8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80050aa:	e018      	b.n	80050de <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	881a      	ldrh	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050be:	b292      	uxth	r2, r2
 80050c0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c6:	1c9a      	adds	r2, r3, #2
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005100:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fb fa42 	bl	8000598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800512a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005130:	2b22      	cmp	r3, #34	; 0x22
 8005132:	d151      	bne.n	80051d8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800513a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800513c:	89bb      	ldrh	r3, [r7, #12]
 800513e:	b2d9      	uxtb	r1, r3
 8005140:	89fb      	ldrh	r3, [r7, #14]
 8005142:	b2da      	uxtb	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	400a      	ands	r2, r1
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d13a      	bne.n	80051ec <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005184:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d10f      	bne.n	80051ca <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0210 	bic.w	r2, r2, #16
 80051b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff fa4e 	bl	8004664 <HAL_UARTEx_RxEventCallback>
 80051c8:	e002      	b.n	80051d0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fb f9f4 	bl	80005b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051d6:	e009      	b.n	80051ec <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	8b1b      	ldrh	r3, [r3, #24]
 80051de:	b29a      	uxth	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0208 	orr.w	r2, r2, #8
 80051e8:	b292      	uxth	r2, r2
 80051ea:	831a      	strh	r2, [r3, #24]
}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005202:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005208:	2b22      	cmp	r3, #34	; 0x22
 800520a:	d151      	bne.n	80052b0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005212:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800521a:	89ba      	ldrh	r2, [r7, #12]
 800521c:	89fb      	ldrh	r3, [r7, #14]
 800521e:	4013      	ands	r3, r2
 8005220:	b29a      	uxth	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	1c9a      	adds	r2, r3, #2
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d13a      	bne.n	80052c4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800525c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527e:	2b01      	cmp	r3, #1
 8005280:	d10f      	bne.n	80052a2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0210 	bic.w	r2, r2, #16
 8005290:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005298:	4619      	mov	r1, r3
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff f9e2 	bl	8004664 <HAL_UARTEx_RxEventCallback>
 80052a0:	e002      	b.n	80052a8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fb f988 	bl	80005b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052ae:	e009      	b.n	80052c4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	8b1b      	ldrh	r3, [r3, #24]
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0208 	orr.w	r2, r2, #8
 80052c0:	b292      	uxth	r2, r2
 80052c2:	831a      	strh	r2, [r3, #24]
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052e0:	b084      	sub	sp, #16
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	f107 001c 	add.w	r0, r7, #28
 80052ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fa24 	bl	800574c <USB_CoreReset>
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	639a      	str	r2, [r3, #56]	; 0x38
 800531a:	e005      	b.n	8005328 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005334:	b004      	add	sp, #16
 8005336:	4770      	bx	lr

08005338 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f023 0201 	bic.w	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	460b      	mov	r3, r1
 8005364:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d106      	bne.n	8005386 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60da      	str	r2, [r3, #12]
 8005384:	e00b      	b.n	800539e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]
 8005398:	e001      	b.n	800539e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e003      	b.n	80053a6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800539e:	2032      	movs	r0, #50	; 0x32
 80053a0:	f7fc fa12 	bl	80017c8 <HAL_Delay>

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b0:	b084      	sub	sp, #16
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b086      	sub	sp, #24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	e009      	b.n	80053e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	3340      	adds	r3, #64	; 0x40
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	2200      	movs	r2, #0
 80053dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	3301      	adds	r3, #1
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b0e      	cmp	r3, #14
 80053e8:	d9f2      	bls.n	80053d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d11c      	bne.n	800542a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053fe:	f043 0302 	orr.w	r3, r3, #2
 8005402:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	e005      	b.n	8005436 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800543c:	461a      	mov	r2, r3
 800543e:	2300      	movs	r3, #0
 8005440:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005448:	4619      	mov	r1, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005450:	461a      	mov	r2, r3
 8005452:	680b      	ldr	r3, [r1, #0]
 8005454:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005456:	2103      	movs	r1, #3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f93d 	bl	80056d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800545e:	2110      	movs	r1, #16
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f8f1 	bl	8005648 <USB_FlushTxFifo>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f90f 	bl	8005694 <USB_FlushRxFifo>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	461a      	mov	r2, r3
 8005488:	2300      	movs	r3, #0
 800548a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	461a      	mov	r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	461a      	mov	r2, r3
 80054a0:	2300      	movs	r3, #0
 80054a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e043      	b.n	8005532 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c0:	d118      	bne.n	80054f4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	461a      	mov	r2, r3
 80054d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e013      	b.n	8005506 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	461a      	mov	r2, r3
 80054ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e008      	b.n	8005506 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	461a      	mov	r2, r3
 8005502:	2300      	movs	r3, #0
 8005504:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005512:	461a      	mov	r2, r3
 8005514:	2300      	movs	r3, #0
 8005516:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	461a      	mov	r2, r3
 8005526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800552a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	3301      	adds	r3, #1
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	429a      	cmp	r2, r3
 8005538:	d3b7      	bcc.n	80054aa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800553a:	2300      	movs	r3, #0
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	e043      	b.n	80055c8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005556:	d118      	bne.n	800558a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	e013      	b.n	800559c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	461a      	mov	r2, r3
 8005582:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	e008      	b.n	800559c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	461a      	mov	r2, r3
 8005598:	2300      	movs	r3, #0
 800559a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	461a      	mov	r2, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ba:	461a      	mov	r2, r3
 80055bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	3301      	adds	r3, #1
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d3b7      	bcc.n	8005540 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f043 0210 	orr.w	r2, r3, #16
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <USB_DevInit+0x294>)
 8005604:	4313      	orrs	r3, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800560a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f043 0208 	orr.w	r2, r3, #8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800561c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d107      	bne.n	8005632 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800562a:	f043 0304 	orr.w	r3, r3, #4
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005632:	7dfb      	ldrb	r3, [r7, #23]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800563e:	b004      	add	sp, #16
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	803c3800 	.word	0x803c3800

08005648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	019b      	lsls	r3, r3, #6
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a09      	ldr	r2, [pc, #36]	; (8005690 <USB_FlushTxFifo+0x48>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e006      	b.n	8005682 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b20      	cmp	r3, #32
 800567e:	d0f0      	beq.n	8005662 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	00030d40 	.word	0x00030d40

08005694 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2210      	movs	r2, #16
 80056a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3301      	adds	r3, #1
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4a09      	ldr	r2, [pc, #36]	; (80056d4 <USB_FlushRxFifo+0x40>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e006      	b.n	80056c6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d0f0      	beq.n	80056a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	00030d40 	.word	0x00030d40

080056d8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f8:	4313      	orrs	r3, r2
 80056fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005724:	f023 0303 	bic.w	r3, r3, #3
 8005728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005738:	f043 0302 	orr.w	r3, r3, #2
 800573c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <USB_CoreReset+0x64>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e01b      	b.n	80057a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	daf2      	bge.n	8005758 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <USB_CoreReset+0x64>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e006      	b.n	80057a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b01      	cmp	r3, #1
 800579e:	d0f0      	beq.n	8005782 <USB_CoreReset+0x36>

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	00030d40 	.word	0x00030d40

080057b4 <__errno>:
 80057b4:	4b01      	ldr	r3, [pc, #4]	; (80057bc <__errno+0x8>)
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	2000000c 	.word	0x2000000c

080057c0 <__libc_init_array>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4d0d      	ldr	r5, [pc, #52]	; (80057f8 <__libc_init_array+0x38>)
 80057c4:	4c0d      	ldr	r4, [pc, #52]	; (80057fc <__libc_init_array+0x3c>)
 80057c6:	1b64      	subs	r4, r4, r5
 80057c8:	10a4      	asrs	r4, r4, #2
 80057ca:	2600      	movs	r6, #0
 80057cc:	42a6      	cmp	r6, r4
 80057ce:	d109      	bne.n	80057e4 <__libc_init_array+0x24>
 80057d0:	4d0b      	ldr	r5, [pc, #44]	; (8005800 <__libc_init_array+0x40>)
 80057d2:	4c0c      	ldr	r4, [pc, #48]	; (8005804 <__libc_init_array+0x44>)
 80057d4:	f000 fc62 	bl	800609c <_init>
 80057d8:	1b64      	subs	r4, r4, r5
 80057da:	10a4      	asrs	r4, r4, #2
 80057dc:	2600      	movs	r6, #0
 80057de:	42a6      	cmp	r6, r4
 80057e0:	d105      	bne.n	80057ee <__libc_init_array+0x2e>
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e8:	4798      	blx	r3
 80057ea:	3601      	adds	r6, #1
 80057ec:	e7ee      	b.n	80057cc <__libc_init_array+0xc>
 80057ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f2:	4798      	blx	r3
 80057f4:	3601      	adds	r6, #1
 80057f6:	e7f2      	b.n	80057de <__libc_init_array+0x1e>
 80057f8:	08006314 	.word	0x08006314
 80057fc:	08006314 	.word	0x08006314
 8005800:	08006314 	.word	0x08006314
 8005804:	08006318 	.word	0x08006318

08005808 <memset>:
 8005808:	4402      	add	r2, r0
 800580a:	4603      	mov	r3, r0
 800580c:	4293      	cmp	r3, r2
 800580e:	d100      	bne.n	8005812 <memset+0xa>
 8005810:	4770      	bx	lr
 8005812:	f803 1b01 	strb.w	r1, [r3], #1
 8005816:	e7f9      	b.n	800580c <memset+0x4>

08005818 <sniprintf>:
 8005818:	b40c      	push	{r2, r3}
 800581a:	b530      	push	{r4, r5, lr}
 800581c:	4b17      	ldr	r3, [pc, #92]	; (800587c <sniprintf+0x64>)
 800581e:	1e0c      	subs	r4, r1, #0
 8005820:	681d      	ldr	r5, [r3, #0]
 8005822:	b09d      	sub	sp, #116	; 0x74
 8005824:	da08      	bge.n	8005838 <sniprintf+0x20>
 8005826:	238b      	movs	r3, #139	; 0x8b
 8005828:	602b      	str	r3, [r5, #0]
 800582a:	f04f 30ff 	mov.w	r0, #4294967295
 800582e:	b01d      	add	sp, #116	; 0x74
 8005830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005834:	b002      	add	sp, #8
 8005836:	4770      	bx	lr
 8005838:	f44f 7302 	mov.w	r3, #520	; 0x208
 800583c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005840:	bf14      	ite	ne
 8005842:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005846:	4623      	moveq	r3, r4
 8005848:	9304      	str	r3, [sp, #16]
 800584a:	9307      	str	r3, [sp, #28]
 800584c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005850:	9002      	str	r0, [sp, #8]
 8005852:	9006      	str	r0, [sp, #24]
 8005854:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005858:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800585a:	ab21      	add	r3, sp, #132	; 0x84
 800585c:	a902      	add	r1, sp, #8
 800585e:	4628      	mov	r0, r5
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	f000 f869 	bl	8005938 <_svfiprintf_r>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	bfbc      	itt	lt
 800586a:	238b      	movlt	r3, #139	; 0x8b
 800586c:	602b      	strlt	r3, [r5, #0]
 800586e:	2c00      	cmp	r4, #0
 8005870:	d0dd      	beq.n	800582e <sniprintf+0x16>
 8005872:	9b02      	ldr	r3, [sp, #8]
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e7d9      	b.n	800582e <sniprintf+0x16>
 800587a:	bf00      	nop
 800587c:	2000000c 	.word	0x2000000c

08005880 <__ssputs_r>:
 8005880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005884:	688e      	ldr	r6, [r1, #8]
 8005886:	429e      	cmp	r6, r3
 8005888:	4682      	mov	sl, r0
 800588a:	460c      	mov	r4, r1
 800588c:	4690      	mov	r8, r2
 800588e:	461f      	mov	r7, r3
 8005890:	d838      	bhi.n	8005904 <__ssputs_r+0x84>
 8005892:	898a      	ldrh	r2, [r1, #12]
 8005894:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005898:	d032      	beq.n	8005900 <__ssputs_r+0x80>
 800589a:	6825      	ldr	r5, [r4, #0]
 800589c:	6909      	ldr	r1, [r1, #16]
 800589e:	eba5 0901 	sub.w	r9, r5, r1
 80058a2:	6965      	ldr	r5, [r4, #20]
 80058a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058ac:	3301      	adds	r3, #1
 80058ae:	444b      	add	r3, r9
 80058b0:	106d      	asrs	r5, r5, #1
 80058b2:	429d      	cmp	r5, r3
 80058b4:	bf38      	it	cc
 80058b6:	461d      	movcc	r5, r3
 80058b8:	0553      	lsls	r3, r2, #21
 80058ba:	d531      	bpl.n	8005920 <__ssputs_r+0xa0>
 80058bc:	4629      	mov	r1, r5
 80058be:	f000 fb47 	bl	8005f50 <_malloc_r>
 80058c2:	4606      	mov	r6, r0
 80058c4:	b950      	cbnz	r0, 80058dc <__ssputs_r+0x5c>
 80058c6:	230c      	movs	r3, #12
 80058c8:	f8ca 3000 	str.w	r3, [sl]
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295
 80058d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058dc:	6921      	ldr	r1, [r4, #16]
 80058de:	464a      	mov	r2, r9
 80058e0:	f000 fabe 	bl	8005e60 <memcpy>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ee:	81a3      	strh	r3, [r4, #12]
 80058f0:	6126      	str	r6, [r4, #16]
 80058f2:	6165      	str	r5, [r4, #20]
 80058f4:	444e      	add	r6, r9
 80058f6:	eba5 0509 	sub.w	r5, r5, r9
 80058fa:	6026      	str	r6, [r4, #0]
 80058fc:	60a5      	str	r5, [r4, #8]
 80058fe:	463e      	mov	r6, r7
 8005900:	42be      	cmp	r6, r7
 8005902:	d900      	bls.n	8005906 <__ssputs_r+0x86>
 8005904:	463e      	mov	r6, r7
 8005906:	4632      	mov	r2, r6
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	4641      	mov	r1, r8
 800590c:	f000 fab6 	bl	8005e7c <memmove>
 8005910:	68a3      	ldr	r3, [r4, #8]
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	1b9b      	subs	r3, r3, r6
 8005916:	4432      	add	r2, r6
 8005918:	60a3      	str	r3, [r4, #8]
 800591a:	6022      	str	r2, [r4, #0]
 800591c:	2000      	movs	r0, #0
 800591e:	e7db      	b.n	80058d8 <__ssputs_r+0x58>
 8005920:	462a      	mov	r2, r5
 8005922:	f000 fb6f 	bl	8006004 <_realloc_r>
 8005926:	4606      	mov	r6, r0
 8005928:	2800      	cmp	r0, #0
 800592a:	d1e1      	bne.n	80058f0 <__ssputs_r+0x70>
 800592c:	6921      	ldr	r1, [r4, #16]
 800592e:	4650      	mov	r0, sl
 8005930:	f000 fabe 	bl	8005eb0 <_free_r>
 8005934:	e7c7      	b.n	80058c6 <__ssputs_r+0x46>
	...

08005938 <_svfiprintf_r>:
 8005938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593c:	4698      	mov	r8, r3
 800593e:	898b      	ldrh	r3, [r1, #12]
 8005940:	061b      	lsls	r3, r3, #24
 8005942:	b09d      	sub	sp, #116	; 0x74
 8005944:	4607      	mov	r7, r0
 8005946:	460d      	mov	r5, r1
 8005948:	4614      	mov	r4, r2
 800594a:	d50e      	bpl.n	800596a <_svfiprintf_r+0x32>
 800594c:	690b      	ldr	r3, [r1, #16]
 800594e:	b963      	cbnz	r3, 800596a <_svfiprintf_r+0x32>
 8005950:	2140      	movs	r1, #64	; 0x40
 8005952:	f000 fafd 	bl	8005f50 <_malloc_r>
 8005956:	6028      	str	r0, [r5, #0]
 8005958:	6128      	str	r0, [r5, #16]
 800595a:	b920      	cbnz	r0, 8005966 <_svfiprintf_r+0x2e>
 800595c:	230c      	movs	r3, #12
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	f04f 30ff 	mov.w	r0, #4294967295
 8005964:	e0d1      	b.n	8005b0a <_svfiprintf_r+0x1d2>
 8005966:	2340      	movs	r3, #64	; 0x40
 8005968:	616b      	str	r3, [r5, #20]
 800596a:	2300      	movs	r3, #0
 800596c:	9309      	str	r3, [sp, #36]	; 0x24
 800596e:	2320      	movs	r3, #32
 8005970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005974:	f8cd 800c 	str.w	r8, [sp, #12]
 8005978:	2330      	movs	r3, #48	; 0x30
 800597a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b24 <_svfiprintf_r+0x1ec>
 800597e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005982:	f04f 0901 	mov.w	r9, #1
 8005986:	4623      	mov	r3, r4
 8005988:	469a      	mov	sl, r3
 800598a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800598e:	b10a      	cbz	r2, 8005994 <_svfiprintf_r+0x5c>
 8005990:	2a25      	cmp	r2, #37	; 0x25
 8005992:	d1f9      	bne.n	8005988 <_svfiprintf_r+0x50>
 8005994:	ebba 0b04 	subs.w	fp, sl, r4
 8005998:	d00b      	beq.n	80059b2 <_svfiprintf_r+0x7a>
 800599a:	465b      	mov	r3, fp
 800599c:	4622      	mov	r2, r4
 800599e:	4629      	mov	r1, r5
 80059a0:	4638      	mov	r0, r7
 80059a2:	f7ff ff6d 	bl	8005880 <__ssputs_r>
 80059a6:	3001      	adds	r0, #1
 80059a8:	f000 80aa 	beq.w	8005b00 <_svfiprintf_r+0x1c8>
 80059ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ae:	445a      	add	r2, fp
 80059b0:	9209      	str	r2, [sp, #36]	; 0x24
 80059b2:	f89a 3000 	ldrb.w	r3, [sl]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80a2 	beq.w	8005b00 <_svfiprintf_r+0x1c8>
 80059bc:	2300      	movs	r3, #0
 80059be:	f04f 32ff 	mov.w	r2, #4294967295
 80059c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059c6:	f10a 0a01 	add.w	sl, sl, #1
 80059ca:	9304      	str	r3, [sp, #16]
 80059cc:	9307      	str	r3, [sp, #28]
 80059ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059d2:	931a      	str	r3, [sp, #104]	; 0x68
 80059d4:	4654      	mov	r4, sl
 80059d6:	2205      	movs	r2, #5
 80059d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059dc:	4851      	ldr	r0, [pc, #324]	; (8005b24 <_svfiprintf_r+0x1ec>)
 80059de:	f7fa fc0f 	bl	8000200 <memchr>
 80059e2:	9a04      	ldr	r2, [sp, #16]
 80059e4:	b9d8      	cbnz	r0, 8005a1e <_svfiprintf_r+0xe6>
 80059e6:	06d0      	lsls	r0, r2, #27
 80059e8:	bf44      	itt	mi
 80059ea:	2320      	movmi	r3, #32
 80059ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059f0:	0711      	lsls	r1, r2, #28
 80059f2:	bf44      	itt	mi
 80059f4:	232b      	movmi	r3, #43	; 0x2b
 80059f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059fa:	f89a 3000 	ldrb.w	r3, [sl]
 80059fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005a00:	d015      	beq.n	8005a2e <_svfiprintf_r+0xf6>
 8005a02:	9a07      	ldr	r2, [sp, #28]
 8005a04:	4654      	mov	r4, sl
 8005a06:	2000      	movs	r0, #0
 8005a08:	f04f 0c0a 	mov.w	ip, #10
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a12:	3b30      	subs	r3, #48	; 0x30
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	d94e      	bls.n	8005ab6 <_svfiprintf_r+0x17e>
 8005a18:	b1b0      	cbz	r0, 8005a48 <_svfiprintf_r+0x110>
 8005a1a:	9207      	str	r2, [sp, #28]
 8005a1c:	e014      	b.n	8005a48 <_svfiprintf_r+0x110>
 8005a1e:	eba0 0308 	sub.w	r3, r0, r8
 8005a22:	fa09 f303 	lsl.w	r3, r9, r3
 8005a26:	4313      	orrs	r3, r2
 8005a28:	9304      	str	r3, [sp, #16]
 8005a2a:	46a2      	mov	sl, r4
 8005a2c:	e7d2      	b.n	80059d4 <_svfiprintf_r+0x9c>
 8005a2e:	9b03      	ldr	r3, [sp, #12]
 8005a30:	1d19      	adds	r1, r3, #4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	9103      	str	r1, [sp, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bfbb      	ittet	lt
 8005a3a:	425b      	neglt	r3, r3
 8005a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a40:	9307      	strge	r3, [sp, #28]
 8005a42:	9307      	strlt	r3, [sp, #28]
 8005a44:	bfb8      	it	lt
 8005a46:	9204      	strlt	r2, [sp, #16]
 8005a48:	7823      	ldrb	r3, [r4, #0]
 8005a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a4c:	d10c      	bne.n	8005a68 <_svfiprintf_r+0x130>
 8005a4e:	7863      	ldrb	r3, [r4, #1]
 8005a50:	2b2a      	cmp	r3, #42	; 0x2a
 8005a52:	d135      	bne.n	8005ac0 <_svfiprintf_r+0x188>
 8005a54:	9b03      	ldr	r3, [sp, #12]
 8005a56:	1d1a      	adds	r2, r3, #4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	9203      	str	r2, [sp, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	bfb8      	it	lt
 8005a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a64:	3402      	adds	r4, #2
 8005a66:	9305      	str	r3, [sp, #20]
 8005a68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b34 <_svfiprintf_r+0x1fc>
 8005a6c:	7821      	ldrb	r1, [r4, #0]
 8005a6e:	2203      	movs	r2, #3
 8005a70:	4650      	mov	r0, sl
 8005a72:	f7fa fbc5 	bl	8000200 <memchr>
 8005a76:	b140      	cbz	r0, 8005a8a <_svfiprintf_r+0x152>
 8005a78:	2340      	movs	r3, #64	; 0x40
 8005a7a:	eba0 000a 	sub.w	r0, r0, sl
 8005a7e:	fa03 f000 	lsl.w	r0, r3, r0
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	4303      	orrs	r3, r0
 8005a86:	3401      	adds	r4, #1
 8005a88:	9304      	str	r3, [sp, #16]
 8005a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8e:	4826      	ldr	r0, [pc, #152]	; (8005b28 <_svfiprintf_r+0x1f0>)
 8005a90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a94:	2206      	movs	r2, #6
 8005a96:	f7fa fbb3 	bl	8000200 <memchr>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d038      	beq.n	8005b10 <_svfiprintf_r+0x1d8>
 8005a9e:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <_svfiprintf_r+0x1f4>)
 8005aa0:	bb1b      	cbnz	r3, 8005aea <_svfiprintf_r+0x1b2>
 8005aa2:	9b03      	ldr	r3, [sp, #12]
 8005aa4:	3307      	adds	r3, #7
 8005aa6:	f023 0307 	bic.w	r3, r3, #7
 8005aaa:	3308      	adds	r3, #8
 8005aac:	9303      	str	r3, [sp, #12]
 8005aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab0:	4433      	add	r3, r6
 8005ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab4:	e767      	b.n	8005986 <_svfiprintf_r+0x4e>
 8005ab6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aba:	460c      	mov	r4, r1
 8005abc:	2001      	movs	r0, #1
 8005abe:	e7a5      	b.n	8005a0c <_svfiprintf_r+0xd4>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	3401      	adds	r4, #1
 8005ac4:	9305      	str	r3, [sp, #20]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f04f 0c0a 	mov.w	ip, #10
 8005acc:	4620      	mov	r0, r4
 8005ace:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ad2:	3a30      	subs	r2, #48	; 0x30
 8005ad4:	2a09      	cmp	r2, #9
 8005ad6:	d903      	bls.n	8005ae0 <_svfiprintf_r+0x1a8>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0c5      	beq.n	8005a68 <_svfiprintf_r+0x130>
 8005adc:	9105      	str	r1, [sp, #20]
 8005ade:	e7c3      	b.n	8005a68 <_svfiprintf_r+0x130>
 8005ae0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e7f0      	b.n	8005acc <_svfiprintf_r+0x194>
 8005aea:	ab03      	add	r3, sp, #12
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	462a      	mov	r2, r5
 8005af0:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <_svfiprintf_r+0x1f8>)
 8005af2:	a904      	add	r1, sp, #16
 8005af4:	4638      	mov	r0, r7
 8005af6:	f3af 8000 	nop.w
 8005afa:	1c42      	adds	r2, r0, #1
 8005afc:	4606      	mov	r6, r0
 8005afe:	d1d6      	bne.n	8005aae <_svfiprintf_r+0x176>
 8005b00:	89ab      	ldrh	r3, [r5, #12]
 8005b02:	065b      	lsls	r3, r3, #25
 8005b04:	f53f af2c 	bmi.w	8005960 <_svfiprintf_r+0x28>
 8005b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b0a:	b01d      	add	sp, #116	; 0x74
 8005b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b10:	ab03      	add	r3, sp, #12
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	462a      	mov	r2, r5
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <_svfiprintf_r+0x1f8>)
 8005b18:	a904      	add	r1, sp, #16
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	f000 f87a 	bl	8005c14 <_printf_i>
 8005b20:	e7eb      	b.n	8005afa <_svfiprintf_r+0x1c2>
 8005b22:	bf00      	nop
 8005b24:	080062d8 	.word	0x080062d8
 8005b28:	080062e2 	.word	0x080062e2
 8005b2c:	00000000 	.word	0x00000000
 8005b30:	08005881 	.word	0x08005881
 8005b34:	080062de 	.word	0x080062de

08005b38 <_printf_common>:
 8005b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b3c:	4616      	mov	r6, r2
 8005b3e:	4699      	mov	r9, r3
 8005b40:	688a      	ldr	r2, [r1, #8]
 8005b42:	690b      	ldr	r3, [r1, #16]
 8005b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	bfb8      	it	lt
 8005b4c:	4613      	movlt	r3, r2
 8005b4e:	6033      	str	r3, [r6, #0]
 8005b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b54:	4607      	mov	r7, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	b10a      	cbz	r2, 8005b5e <_printf_common+0x26>
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	6033      	str	r3, [r6, #0]
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	0699      	lsls	r1, r3, #26
 8005b62:	bf42      	ittt	mi
 8005b64:	6833      	ldrmi	r3, [r6, #0]
 8005b66:	3302      	addmi	r3, #2
 8005b68:	6033      	strmi	r3, [r6, #0]
 8005b6a:	6825      	ldr	r5, [r4, #0]
 8005b6c:	f015 0506 	ands.w	r5, r5, #6
 8005b70:	d106      	bne.n	8005b80 <_printf_common+0x48>
 8005b72:	f104 0a19 	add.w	sl, r4, #25
 8005b76:	68e3      	ldr	r3, [r4, #12]
 8005b78:	6832      	ldr	r2, [r6, #0]
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	42ab      	cmp	r3, r5
 8005b7e:	dc26      	bgt.n	8005bce <_printf_common+0x96>
 8005b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b84:	1e13      	subs	r3, r2, #0
 8005b86:	6822      	ldr	r2, [r4, #0]
 8005b88:	bf18      	it	ne
 8005b8a:	2301      	movne	r3, #1
 8005b8c:	0692      	lsls	r2, r2, #26
 8005b8e:	d42b      	bmi.n	8005be8 <_printf_common+0xb0>
 8005b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b94:	4649      	mov	r1, r9
 8005b96:	4638      	mov	r0, r7
 8005b98:	47c0      	blx	r8
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d01e      	beq.n	8005bdc <_printf_common+0xa4>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	68e5      	ldr	r5, [r4, #12]
 8005ba2:	6832      	ldr	r2, [r6, #0]
 8005ba4:	f003 0306 	and.w	r3, r3, #6
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	bf08      	it	eq
 8005bac:	1aad      	subeq	r5, r5, r2
 8005bae:	68a3      	ldr	r3, [r4, #8]
 8005bb0:	6922      	ldr	r2, [r4, #16]
 8005bb2:	bf0c      	ite	eq
 8005bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb8:	2500      	movne	r5, #0
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	bfc4      	itt	gt
 8005bbe:	1a9b      	subgt	r3, r3, r2
 8005bc0:	18ed      	addgt	r5, r5, r3
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	341a      	adds	r4, #26
 8005bc6:	42b5      	cmp	r5, r6
 8005bc8:	d11a      	bne.n	8005c00 <_printf_common+0xc8>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	e008      	b.n	8005be0 <_printf_common+0xa8>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4652      	mov	r2, sl
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	47c0      	blx	r8
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d103      	bne.n	8005be4 <_printf_common+0xac>
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be4:	3501      	adds	r5, #1
 8005be6:	e7c6      	b.n	8005b76 <_printf_common+0x3e>
 8005be8:	18e1      	adds	r1, r4, r3
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	2030      	movs	r0, #48	; 0x30
 8005bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bf2:	4422      	add	r2, r4
 8005bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	e7c7      	b.n	8005b90 <_printf_common+0x58>
 8005c00:	2301      	movs	r3, #1
 8005c02:	4622      	mov	r2, r4
 8005c04:	4649      	mov	r1, r9
 8005c06:	4638      	mov	r0, r7
 8005c08:	47c0      	blx	r8
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d0e6      	beq.n	8005bdc <_printf_common+0xa4>
 8005c0e:	3601      	adds	r6, #1
 8005c10:	e7d9      	b.n	8005bc6 <_printf_common+0x8e>
	...

08005c14 <_printf_i>:
 8005c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	460c      	mov	r4, r1
 8005c1a:	4691      	mov	r9, r2
 8005c1c:	7e27      	ldrb	r7, [r4, #24]
 8005c1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c20:	2f78      	cmp	r7, #120	; 0x78
 8005c22:	4680      	mov	r8, r0
 8005c24:	469a      	mov	sl, r3
 8005c26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c2a:	d807      	bhi.n	8005c3c <_printf_i+0x28>
 8005c2c:	2f62      	cmp	r7, #98	; 0x62
 8005c2e:	d80a      	bhi.n	8005c46 <_printf_i+0x32>
 8005c30:	2f00      	cmp	r7, #0
 8005c32:	f000 80d8 	beq.w	8005de6 <_printf_i+0x1d2>
 8005c36:	2f58      	cmp	r7, #88	; 0x58
 8005c38:	f000 80a3 	beq.w	8005d82 <_printf_i+0x16e>
 8005c3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c44:	e03a      	b.n	8005cbc <_printf_i+0xa8>
 8005c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c4a:	2b15      	cmp	r3, #21
 8005c4c:	d8f6      	bhi.n	8005c3c <_printf_i+0x28>
 8005c4e:	a001      	add	r0, pc, #4	; (adr r0, 8005c54 <_printf_i+0x40>)
 8005c50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c54:	08005cad 	.word	0x08005cad
 8005c58:	08005cc1 	.word	0x08005cc1
 8005c5c:	08005c3d 	.word	0x08005c3d
 8005c60:	08005c3d 	.word	0x08005c3d
 8005c64:	08005c3d 	.word	0x08005c3d
 8005c68:	08005c3d 	.word	0x08005c3d
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005c3d 	.word	0x08005c3d
 8005c74:	08005c3d 	.word	0x08005c3d
 8005c78:	08005c3d 	.word	0x08005c3d
 8005c7c:	08005c3d 	.word	0x08005c3d
 8005c80:	08005dcd 	.word	0x08005dcd
 8005c84:	08005cf1 	.word	0x08005cf1
 8005c88:	08005daf 	.word	0x08005daf
 8005c8c:	08005c3d 	.word	0x08005c3d
 8005c90:	08005c3d 	.word	0x08005c3d
 8005c94:	08005def 	.word	0x08005def
 8005c98:	08005c3d 	.word	0x08005c3d
 8005c9c:	08005cf1 	.word	0x08005cf1
 8005ca0:	08005c3d 	.word	0x08005c3d
 8005ca4:	08005c3d 	.word	0x08005c3d
 8005ca8:	08005db7 	.word	0x08005db7
 8005cac:	680b      	ldr	r3, [r1, #0]
 8005cae:	1d1a      	adds	r2, r3, #4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	600a      	str	r2, [r1, #0]
 8005cb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0a3      	b.n	8005e08 <_printf_i+0x1f4>
 8005cc0:	6825      	ldr	r5, [r4, #0]
 8005cc2:	6808      	ldr	r0, [r1, #0]
 8005cc4:	062e      	lsls	r6, r5, #24
 8005cc6:	f100 0304 	add.w	r3, r0, #4
 8005cca:	d50a      	bpl.n	8005ce2 <_printf_i+0xce>
 8005ccc:	6805      	ldr	r5, [r0, #0]
 8005cce:	600b      	str	r3, [r1, #0]
 8005cd0:	2d00      	cmp	r5, #0
 8005cd2:	da03      	bge.n	8005cdc <_printf_i+0xc8>
 8005cd4:	232d      	movs	r3, #45	; 0x2d
 8005cd6:	426d      	negs	r5, r5
 8005cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cdc:	485e      	ldr	r0, [pc, #376]	; (8005e58 <_printf_i+0x244>)
 8005cde:	230a      	movs	r3, #10
 8005ce0:	e019      	b.n	8005d16 <_printf_i+0x102>
 8005ce2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ce6:	6805      	ldr	r5, [r0, #0]
 8005ce8:	600b      	str	r3, [r1, #0]
 8005cea:	bf18      	it	ne
 8005cec:	b22d      	sxthne	r5, r5
 8005cee:	e7ef      	b.n	8005cd0 <_printf_i+0xbc>
 8005cf0:	680b      	ldr	r3, [r1, #0]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	1d18      	adds	r0, r3, #4
 8005cf6:	6008      	str	r0, [r1, #0]
 8005cf8:	0628      	lsls	r0, r5, #24
 8005cfa:	d501      	bpl.n	8005d00 <_printf_i+0xec>
 8005cfc:	681d      	ldr	r5, [r3, #0]
 8005cfe:	e002      	b.n	8005d06 <_printf_i+0xf2>
 8005d00:	0669      	lsls	r1, r5, #25
 8005d02:	d5fb      	bpl.n	8005cfc <_printf_i+0xe8>
 8005d04:	881d      	ldrh	r5, [r3, #0]
 8005d06:	4854      	ldr	r0, [pc, #336]	; (8005e58 <_printf_i+0x244>)
 8005d08:	2f6f      	cmp	r7, #111	; 0x6f
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2308      	moveq	r3, #8
 8005d0e:	230a      	movne	r3, #10
 8005d10:	2100      	movs	r1, #0
 8005d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d16:	6866      	ldr	r6, [r4, #4]
 8005d18:	60a6      	str	r6, [r4, #8]
 8005d1a:	2e00      	cmp	r6, #0
 8005d1c:	bfa2      	ittt	ge
 8005d1e:	6821      	ldrge	r1, [r4, #0]
 8005d20:	f021 0104 	bicge.w	r1, r1, #4
 8005d24:	6021      	strge	r1, [r4, #0]
 8005d26:	b90d      	cbnz	r5, 8005d2c <_printf_i+0x118>
 8005d28:	2e00      	cmp	r6, #0
 8005d2a:	d04d      	beq.n	8005dc8 <_printf_i+0x1b4>
 8005d2c:	4616      	mov	r6, r2
 8005d2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d32:	fb03 5711 	mls	r7, r3, r1, r5
 8005d36:	5dc7      	ldrb	r7, [r0, r7]
 8005d38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d3c:	462f      	mov	r7, r5
 8005d3e:	42bb      	cmp	r3, r7
 8005d40:	460d      	mov	r5, r1
 8005d42:	d9f4      	bls.n	8005d2e <_printf_i+0x11a>
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d10b      	bne.n	8005d60 <_printf_i+0x14c>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	07df      	lsls	r7, r3, #31
 8005d4c:	d508      	bpl.n	8005d60 <_printf_i+0x14c>
 8005d4e:	6923      	ldr	r3, [r4, #16]
 8005d50:	6861      	ldr	r1, [r4, #4]
 8005d52:	4299      	cmp	r1, r3
 8005d54:	bfde      	ittt	le
 8005d56:	2330      	movle	r3, #48	; 0x30
 8005d58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d60:	1b92      	subs	r2, r2, r6
 8005d62:	6122      	str	r2, [r4, #16]
 8005d64:	f8cd a000 	str.w	sl, [sp]
 8005d68:	464b      	mov	r3, r9
 8005d6a:	aa03      	add	r2, sp, #12
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4640      	mov	r0, r8
 8005d70:	f7ff fee2 	bl	8005b38 <_printf_common>
 8005d74:	3001      	adds	r0, #1
 8005d76:	d14c      	bne.n	8005e12 <_printf_i+0x1fe>
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	b004      	add	sp, #16
 8005d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d82:	4835      	ldr	r0, [pc, #212]	; (8005e58 <_printf_i+0x244>)
 8005d84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	680e      	ldr	r6, [r1, #0]
 8005d8c:	061f      	lsls	r7, r3, #24
 8005d8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d92:	600e      	str	r6, [r1, #0]
 8005d94:	d514      	bpl.n	8005dc0 <_printf_i+0x1ac>
 8005d96:	07d9      	lsls	r1, r3, #31
 8005d98:	bf44      	itt	mi
 8005d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d9e:	6023      	strmi	r3, [r4, #0]
 8005da0:	b91d      	cbnz	r5, 8005daa <_printf_i+0x196>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	f023 0320 	bic.w	r3, r3, #32
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	2310      	movs	r3, #16
 8005dac:	e7b0      	b.n	8005d10 <_printf_i+0xfc>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	f043 0320 	orr.w	r3, r3, #32
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	2378      	movs	r3, #120	; 0x78
 8005db8:	4828      	ldr	r0, [pc, #160]	; (8005e5c <_printf_i+0x248>)
 8005dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dbe:	e7e3      	b.n	8005d88 <_printf_i+0x174>
 8005dc0:	065e      	lsls	r6, r3, #25
 8005dc2:	bf48      	it	mi
 8005dc4:	b2ad      	uxthmi	r5, r5
 8005dc6:	e7e6      	b.n	8005d96 <_printf_i+0x182>
 8005dc8:	4616      	mov	r6, r2
 8005dca:	e7bb      	b.n	8005d44 <_printf_i+0x130>
 8005dcc:	680b      	ldr	r3, [r1, #0]
 8005dce:	6826      	ldr	r6, [r4, #0]
 8005dd0:	6960      	ldr	r0, [r4, #20]
 8005dd2:	1d1d      	adds	r5, r3, #4
 8005dd4:	600d      	str	r5, [r1, #0]
 8005dd6:	0635      	lsls	r5, r6, #24
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	d501      	bpl.n	8005de0 <_printf_i+0x1cc>
 8005ddc:	6018      	str	r0, [r3, #0]
 8005dde:	e002      	b.n	8005de6 <_printf_i+0x1d2>
 8005de0:	0671      	lsls	r1, r6, #25
 8005de2:	d5fb      	bpl.n	8005ddc <_printf_i+0x1c8>
 8005de4:	8018      	strh	r0, [r3, #0]
 8005de6:	2300      	movs	r3, #0
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	4616      	mov	r6, r2
 8005dec:	e7ba      	b.n	8005d64 <_printf_i+0x150>
 8005dee:	680b      	ldr	r3, [r1, #0]
 8005df0:	1d1a      	adds	r2, r3, #4
 8005df2:	600a      	str	r2, [r1, #0]
 8005df4:	681e      	ldr	r6, [r3, #0]
 8005df6:	6862      	ldr	r2, [r4, #4]
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f7fa fa00 	bl	8000200 <memchr>
 8005e00:	b108      	cbz	r0, 8005e06 <_printf_i+0x1f2>
 8005e02:	1b80      	subs	r0, r0, r6
 8005e04:	6060      	str	r0, [r4, #4]
 8005e06:	6863      	ldr	r3, [r4, #4]
 8005e08:	6123      	str	r3, [r4, #16]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e10:	e7a8      	b.n	8005d64 <_printf_i+0x150>
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	4632      	mov	r2, r6
 8005e16:	4649      	mov	r1, r9
 8005e18:	4640      	mov	r0, r8
 8005e1a:	47d0      	blx	sl
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d0ab      	beq.n	8005d78 <_printf_i+0x164>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	079b      	lsls	r3, r3, #30
 8005e24:	d413      	bmi.n	8005e4e <_printf_i+0x23a>
 8005e26:	68e0      	ldr	r0, [r4, #12]
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	4298      	cmp	r0, r3
 8005e2c:	bfb8      	it	lt
 8005e2e:	4618      	movlt	r0, r3
 8005e30:	e7a4      	b.n	8005d7c <_printf_i+0x168>
 8005e32:	2301      	movs	r3, #1
 8005e34:	4632      	mov	r2, r6
 8005e36:	4649      	mov	r1, r9
 8005e38:	4640      	mov	r0, r8
 8005e3a:	47d0      	blx	sl
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d09b      	beq.n	8005d78 <_printf_i+0x164>
 8005e40:	3501      	adds	r5, #1
 8005e42:	68e3      	ldr	r3, [r4, #12]
 8005e44:	9903      	ldr	r1, [sp, #12]
 8005e46:	1a5b      	subs	r3, r3, r1
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	dcf2      	bgt.n	8005e32 <_printf_i+0x21e>
 8005e4c:	e7eb      	b.n	8005e26 <_printf_i+0x212>
 8005e4e:	2500      	movs	r5, #0
 8005e50:	f104 0619 	add.w	r6, r4, #25
 8005e54:	e7f5      	b.n	8005e42 <_printf_i+0x22e>
 8005e56:	bf00      	nop
 8005e58:	080062e9 	.word	0x080062e9
 8005e5c:	080062fa 	.word	0x080062fa

08005e60 <memcpy>:
 8005e60:	440a      	add	r2, r1
 8005e62:	4291      	cmp	r1, r2
 8005e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e68:	d100      	bne.n	8005e6c <memcpy+0xc>
 8005e6a:	4770      	bx	lr
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e76:	4291      	cmp	r1, r2
 8005e78:	d1f9      	bne.n	8005e6e <memcpy+0xe>
 8005e7a:	bd10      	pop	{r4, pc}

08005e7c <memmove>:
 8005e7c:	4288      	cmp	r0, r1
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	eb01 0402 	add.w	r4, r1, r2
 8005e84:	d902      	bls.n	8005e8c <memmove+0x10>
 8005e86:	4284      	cmp	r4, r0
 8005e88:	4623      	mov	r3, r4
 8005e8a:	d807      	bhi.n	8005e9c <memmove+0x20>
 8005e8c:	1e43      	subs	r3, r0, #1
 8005e8e:	42a1      	cmp	r1, r4
 8005e90:	d008      	beq.n	8005ea4 <memmove+0x28>
 8005e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e9a:	e7f8      	b.n	8005e8e <memmove+0x12>
 8005e9c:	4402      	add	r2, r0
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	428a      	cmp	r2, r1
 8005ea2:	d100      	bne.n	8005ea6 <memmove+0x2a>
 8005ea4:	bd10      	pop	{r4, pc}
 8005ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005eae:	e7f7      	b.n	8005ea0 <memmove+0x24>

08005eb0 <_free_r>:
 8005eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eb2:	2900      	cmp	r1, #0
 8005eb4:	d048      	beq.n	8005f48 <_free_r+0x98>
 8005eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eba:	9001      	str	r0, [sp, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f1a1 0404 	sub.w	r4, r1, #4
 8005ec2:	bfb8      	it	lt
 8005ec4:	18e4      	addlt	r4, r4, r3
 8005ec6:	f000 f8d3 	bl	8006070 <__malloc_lock>
 8005eca:	4a20      	ldr	r2, [pc, #128]	; (8005f4c <_free_r+0x9c>)
 8005ecc:	9801      	ldr	r0, [sp, #4]
 8005ece:	6813      	ldr	r3, [r2, #0]
 8005ed0:	4615      	mov	r5, r2
 8005ed2:	b933      	cbnz	r3, 8005ee2 <_free_r+0x32>
 8005ed4:	6063      	str	r3, [r4, #4]
 8005ed6:	6014      	str	r4, [r2, #0]
 8005ed8:	b003      	add	sp, #12
 8005eda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ede:	f000 b8cd 	b.w	800607c <__malloc_unlock>
 8005ee2:	42a3      	cmp	r3, r4
 8005ee4:	d90b      	bls.n	8005efe <_free_r+0x4e>
 8005ee6:	6821      	ldr	r1, [r4, #0]
 8005ee8:	1862      	adds	r2, r4, r1
 8005eea:	4293      	cmp	r3, r2
 8005eec:	bf04      	itt	eq
 8005eee:	681a      	ldreq	r2, [r3, #0]
 8005ef0:	685b      	ldreq	r3, [r3, #4]
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	bf04      	itt	eq
 8005ef6:	1852      	addeq	r2, r2, r1
 8005ef8:	6022      	streq	r2, [r4, #0]
 8005efa:	602c      	str	r4, [r5, #0]
 8005efc:	e7ec      	b.n	8005ed8 <_free_r+0x28>
 8005efe:	461a      	mov	r2, r3
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	b10b      	cbz	r3, 8005f08 <_free_r+0x58>
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d9fa      	bls.n	8005efe <_free_r+0x4e>
 8005f08:	6811      	ldr	r1, [r2, #0]
 8005f0a:	1855      	adds	r5, r2, r1
 8005f0c:	42a5      	cmp	r5, r4
 8005f0e:	d10b      	bne.n	8005f28 <_free_r+0x78>
 8005f10:	6824      	ldr	r4, [r4, #0]
 8005f12:	4421      	add	r1, r4
 8005f14:	1854      	adds	r4, r2, r1
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	6011      	str	r1, [r2, #0]
 8005f1a:	d1dd      	bne.n	8005ed8 <_free_r+0x28>
 8005f1c:	681c      	ldr	r4, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	6053      	str	r3, [r2, #4]
 8005f22:	4421      	add	r1, r4
 8005f24:	6011      	str	r1, [r2, #0]
 8005f26:	e7d7      	b.n	8005ed8 <_free_r+0x28>
 8005f28:	d902      	bls.n	8005f30 <_free_r+0x80>
 8005f2a:	230c      	movs	r3, #12
 8005f2c:	6003      	str	r3, [r0, #0]
 8005f2e:	e7d3      	b.n	8005ed8 <_free_r+0x28>
 8005f30:	6825      	ldr	r5, [r4, #0]
 8005f32:	1961      	adds	r1, r4, r5
 8005f34:	428b      	cmp	r3, r1
 8005f36:	bf04      	itt	eq
 8005f38:	6819      	ldreq	r1, [r3, #0]
 8005f3a:	685b      	ldreq	r3, [r3, #4]
 8005f3c:	6063      	str	r3, [r4, #4]
 8005f3e:	bf04      	itt	eq
 8005f40:	1949      	addeq	r1, r1, r5
 8005f42:	6021      	streq	r1, [r4, #0]
 8005f44:	6054      	str	r4, [r2, #4]
 8005f46:	e7c7      	b.n	8005ed8 <_free_r+0x28>
 8005f48:	b003      	add	sp, #12
 8005f4a:	bd30      	pop	{r4, r5, pc}
 8005f4c:	200000bc 	.word	0x200000bc

08005f50 <_malloc_r>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	1ccd      	adds	r5, r1, #3
 8005f54:	f025 0503 	bic.w	r5, r5, #3
 8005f58:	3508      	adds	r5, #8
 8005f5a:	2d0c      	cmp	r5, #12
 8005f5c:	bf38      	it	cc
 8005f5e:	250c      	movcc	r5, #12
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	4606      	mov	r6, r0
 8005f64:	db01      	blt.n	8005f6a <_malloc_r+0x1a>
 8005f66:	42a9      	cmp	r1, r5
 8005f68:	d903      	bls.n	8005f72 <_malloc_r+0x22>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	6033      	str	r3, [r6, #0]
 8005f6e:	2000      	movs	r0, #0
 8005f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f72:	f000 f87d 	bl	8006070 <__malloc_lock>
 8005f76:	4921      	ldr	r1, [pc, #132]	; (8005ffc <_malloc_r+0xac>)
 8005f78:	680a      	ldr	r2, [r1, #0]
 8005f7a:	4614      	mov	r4, r2
 8005f7c:	b99c      	cbnz	r4, 8005fa6 <_malloc_r+0x56>
 8005f7e:	4f20      	ldr	r7, [pc, #128]	; (8006000 <_malloc_r+0xb0>)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	b923      	cbnz	r3, 8005f8e <_malloc_r+0x3e>
 8005f84:	4621      	mov	r1, r4
 8005f86:	4630      	mov	r0, r6
 8005f88:	f000 f862 	bl	8006050 <_sbrk_r>
 8005f8c:	6038      	str	r0, [r7, #0]
 8005f8e:	4629      	mov	r1, r5
 8005f90:	4630      	mov	r0, r6
 8005f92:	f000 f85d 	bl	8006050 <_sbrk_r>
 8005f96:	1c43      	adds	r3, r0, #1
 8005f98:	d123      	bne.n	8005fe2 <_malloc_r+0x92>
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	6033      	str	r3, [r6, #0]
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f000 f86c 	bl	800607c <__malloc_unlock>
 8005fa4:	e7e3      	b.n	8005f6e <_malloc_r+0x1e>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	1b5b      	subs	r3, r3, r5
 8005faa:	d417      	bmi.n	8005fdc <_malloc_r+0x8c>
 8005fac:	2b0b      	cmp	r3, #11
 8005fae:	d903      	bls.n	8005fb8 <_malloc_r+0x68>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	441c      	add	r4, r3
 8005fb4:	6025      	str	r5, [r4, #0]
 8005fb6:	e004      	b.n	8005fc2 <_malloc_r+0x72>
 8005fb8:	6863      	ldr	r3, [r4, #4]
 8005fba:	42a2      	cmp	r2, r4
 8005fbc:	bf0c      	ite	eq
 8005fbe:	600b      	streq	r3, [r1, #0]
 8005fc0:	6053      	strne	r3, [r2, #4]
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f000 f85a 	bl	800607c <__malloc_unlock>
 8005fc8:	f104 000b 	add.w	r0, r4, #11
 8005fcc:	1d23      	adds	r3, r4, #4
 8005fce:	f020 0007 	bic.w	r0, r0, #7
 8005fd2:	1ac2      	subs	r2, r0, r3
 8005fd4:	d0cc      	beq.n	8005f70 <_malloc_r+0x20>
 8005fd6:	1a1b      	subs	r3, r3, r0
 8005fd8:	50a3      	str	r3, [r4, r2]
 8005fda:	e7c9      	b.n	8005f70 <_malloc_r+0x20>
 8005fdc:	4622      	mov	r2, r4
 8005fde:	6864      	ldr	r4, [r4, #4]
 8005fe0:	e7cc      	b.n	8005f7c <_malloc_r+0x2c>
 8005fe2:	1cc4      	adds	r4, r0, #3
 8005fe4:	f024 0403 	bic.w	r4, r4, #3
 8005fe8:	42a0      	cmp	r0, r4
 8005fea:	d0e3      	beq.n	8005fb4 <_malloc_r+0x64>
 8005fec:	1a21      	subs	r1, r4, r0
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f000 f82e 	bl	8006050 <_sbrk_r>
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d1dd      	bne.n	8005fb4 <_malloc_r+0x64>
 8005ff8:	e7cf      	b.n	8005f9a <_malloc_r+0x4a>
 8005ffa:	bf00      	nop
 8005ffc:	200000bc 	.word	0x200000bc
 8006000:	200000c0 	.word	0x200000c0

08006004 <_realloc_r>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	4607      	mov	r7, r0
 8006008:	4614      	mov	r4, r2
 800600a:	460e      	mov	r6, r1
 800600c:	b921      	cbnz	r1, 8006018 <_realloc_r+0x14>
 800600e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006012:	4611      	mov	r1, r2
 8006014:	f7ff bf9c 	b.w	8005f50 <_malloc_r>
 8006018:	b922      	cbnz	r2, 8006024 <_realloc_r+0x20>
 800601a:	f7ff ff49 	bl	8005eb0 <_free_r>
 800601e:	4625      	mov	r5, r4
 8006020:	4628      	mov	r0, r5
 8006022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006024:	f000 f830 	bl	8006088 <_malloc_usable_size_r>
 8006028:	42a0      	cmp	r0, r4
 800602a:	d20f      	bcs.n	800604c <_realloc_r+0x48>
 800602c:	4621      	mov	r1, r4
 800602e:	4638      	mov	r0, r7
 8006030:	f7ff ff8e 	bl	8005f50 <_malloc_r>
 8006034:	4605      	mov	r5, r0
 8006036:	2800      	cmp	r0, #0
 8006038:	d0f2      	beq.n	8006020 <_realloc_r+0x1c>
 800603a:	4631      	mov	r1, r6
 800603c:	4622      	mov	r2, r4
 800603e:	f7ff ff0f 	bl	8005e60 <memcpy>
 8006042:	4631      	mov	r1, r6
 8006044:	4638      	mov	r0, r7
 8006046:	f7ff ff33 	bl	8005eb0 <_free_r>
 800604a:	e7e9      	b.n	8006020 <_realloc_r+0x1c>
 800604c:	4635      	mov	r5, r6
 800604e:	e7e7      	b.n	8006020 <_realloc_r+0x1c>

08006050 <_sbrk_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4d06      	ldr	r5, [pc, #24]	; (800606c <_sbrk_r+0x1c>)
 8006054:	2300      	movs	r3, #0
 8006056:	4604      	mov	r4, r0
 8006058:	4608      	mov	r0, r1
 800605a:	602b      	str	r3, [r5, #0]
 800605c:	f7fb faae 	bl	80015bc <_sbrk>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_sbrk_r+0x1a>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_sbrk_r+0x1a>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	20000704 	.word	0x20000704

08006070 <__malloc_lock>:
 8006070:	4801      	ldr	r0, [pc, #4]	; (8006078 <__malloc_lock+0x8>)
 8006072:	f000 b811 	b.w	8006098 <__retarget_lock_acquire_recursive>
 8006076:	bf00      	nop
 8006078:	2000070c 	.word	0x2000070c

0800607c <__malloc_unlock>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__malloc_unlock+0x8>)
 800607e:	f000 b80c 	b.w	800609a <__retarget_lock_release_recursive>
 8006082:	bf00      	nop
 8006084:	2000070c 	.word	0x2000070c

08006088 <_malloc_usable_size_r>:
 8006088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800608c:	1f18      	subs	r0, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfbc      	itt	lt
 8006092:	580b      	ldrlt	r3, [r1, r0]
 8006094:	18c0      	addlt	r0, r0, r3
 8006096:	4770      	bx	lr

08006098 <__retarget_lock_acquire_recursive>:
 8006098:	4770      	bx	lr

0800609a <__retarget_lock_release_recursive>:
 800609a:	4770      	bx	lr

0800609c <_init>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	bf00      	nop
 80060a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a2:	bc08      	pop	{r3}
 80060a4:	469e      	mov	lr, r3
 80060a6:	4770      	bx	lr

080060a8 <_fini>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	bf00      	nop
 80060ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ae:	bc08      	pop	{r3}
 80060b0:	469e      	mov	lr, r3
 80060b2:	4770      	bx	lr
