
UCSD-Embedded-Controller-Programming-For-RTS-Bonus-Nathan-Bunnell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eec  08005eec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef4  08005ef4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  08005f6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08005f6c  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124b1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002605  00000000  00000000  00032551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00034b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00035a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278a6  00000000  00000000  000367d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103f7  00000000  00000000  0005e076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f276b  00000000  00000000  0006e46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160bd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  00160c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ce4 	.word	0x08005ce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005ce4 	.word	0x08005ce4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Define the IT callback functions
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	// Set our complete flag
	txInterruptComplete = 1;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_UART_TxCpltCallback+0x1c>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c

08000598 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	// Set our complete flag
	rxInterruptComplete = 1;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <HAL_UART_RxCpltCallback+0x1c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000008d 	.word	0x2000008d

080005b8 <logMsg>:

// logMsg function prints a string, _out, to the console over the specified UART
void logMsg(UART_HandleTypeDef *huart, char *_out)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09c      	sub	sp, #112	; 0x70
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	// Clear the complete flag
	txInterruptComplete = 0;
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <logMsg+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

	char buffer[100] = {0};		// Large char buffer for string printing
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2260      	movs	r2, #96	; 0x60
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f004 ff3b 	bl	8005450 <memset>
    snprintf(buffer, sizeof(buffer), "%s", _out);
 80005da:	f107 000c 	add.w	r0, r7, #12
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <logMsg+0x68>)
 80005e2:	2164      	movs	r1, #100	; 0x64
 80005e4:	f004 ff3c 	bl	8005460 <sniprintf>
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*) buffer, strlen(buffer));
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdef 	bl	80001d0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <logMsg+0x6c>)
 80005fe:	f003 fe55 	bl	80042ac <HAL_UART_Transmit_DMA>

    // Loiter until the IT complete flag is set

	while (!txInterruptComplete)
 8000602:	bf00      	nop
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <logMsg+0x64>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f083 0301 	eor.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f8      	bne.n	8000604 <logMsg+0x4c>
	{
		;
	}

}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3770      	adds	r7, #112	; 0x70
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000008c 	.word	0x2000008c
 8000620:	08005cfc 	.word	0x08005cfc
 8000624:	20000190 	.word	0x20000190

08000628 <logGetMsg>:

// logMsg function returns a char, c, over the specified UART
char logGetMsg(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	// Clear the complete flag
	rxInterruptComplete = 0;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <logGetMsg+0x3c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]

  char c = '\0';				// Set default return value to NULL
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Receive_DMA(&huart1, (uint8_t*) &c, sizeof(c));
 800063a:	f107 030f 	add.w	r3, r7, #15
 800063e:	2201      	movs	r2, #1
 8000640:	4619      	mov	r1, r3
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <logGetMsg+0x40>)
 8000644:	f003 feb0 	bl	80043a8 <HAL_UART_Receive_DMA>

  // Loiter until the IT complete flag is set
  while (!rxInterruptComplete)
 8000648:	bf00      	nop
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <logGetMsg+0x3c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f083 0301 	eor.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f8      	bne.n	800064a <logGetMsg+0x22>
  {
	  ;
  }

  return c;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000008d 	.word	0x2000008d
 8000668:	20000190 	.word	0x20000190

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0a2      	sub	sp, #136	; 0x88
 8000670:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 ff2c 	bl	80014ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f913 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 fa99 	bl	8000bb0 <MX_GPIO_Init>
  MX_SPI3_Init();
 800067e:	f000 fa03 	bl	8000a88 <MX_SPI3_Init>
  MX_DMA_Init();
 8000682:	f000 fa6f 	bl	8000b64 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000686:	f000 fa3d 	bl	8000b04 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800068a:	f000 f96d 	bl	8000968 <MX_RTC_Init>
  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;


  // Header info with instructions for user at console
    logMsg(&huart1, "Welcome to Embedded controller programming\n");
 800068e:	4972      	ldr	r1, [pc, #456]	; (8000858 <main+0x1ec>)
 8000690:	4872      	ldr	r0, [pc, #456]	; (800085c <main+0x1f0>)
 8000692:	f7ff ff91 	bl	80005b8 <logMsg>
    logMsg(&huart1, " - Enter g for toggling Green LED\n");
 8000696:	4972      	ldr	r1, [pc, #456]	; (8000860 <main+0x1f4>)
 8000698:	4870      	ldr	r0, [pc, #448]	; (800085c <main+0x1f0>)
 800069a:	f7ff ff8d 	bl	80005b8 <logMsg>
    logMsg(&huart1, " - Enter b for toggling Blue LED\n");
 800069e:	4971      	ldr	r1, [pc, #452]	; (8000864 <main+0x1f8>)
 80006a0:	486e      	ldr	r0, [pc, #440]	; (800085c <main+0x1f0>)
 80006a2:	f7ff ff89 	bl	80005b8 <logMsg>
    logMsg(&huart1, " - Enter t for RTC values\n");
 80006a6:	4970      	ldr	r1, [pc, #448]	; (8000868 <main+0x1fc>)
 80006a8:	486c      	ldr	r0, [pc, #432]	; (800085c <main+0x1f0>)
 80006aa:	f7ff ff85 	bl	80005b8 <logMsg>
    logMsg(&huart1, " - Enter c for clock mode\n");
 80006ae:	496f      	ldr	r1, [pc, #444]	; (800086c <main+0x200>)
 80006b0:	486a      	ldr	r0, [pc, #424]	; (800085c <main+0x1f0>)
 80006b2:	f7ff ff81 	bl	80005b8 <logMsg>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Define an input char with default value of NULL
	      char input = '\0';
 80006b6:	2300      	movs	r3, #0
 80006b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	      input = logGetMsg(&huart1);
 80006bc:	4867      	ldr	r0, [pc, #412]	; (800085c <main+0x1f0>)
 80006be:	f7ff ffb3 	bl	8000628 <logGetMsg>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	      // Evaluate input char and execute methods associated with command
	      switch(input)
 80006c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80006cc:	3b62      	subs	r3, #98	; 0x62
 80006ce:	2b12      	cmp	r3, #18
 80006d0:	f200 80bb 	bhi.w	800084a <main+0x1de>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <main+0x70>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	0800073d 	.word	0x0800073d
 80006e0:	080007dd 	.word	0x080007dd
 80006e4:	0800084b 	.word	0x0800084b
 80006e8:	0800084b 	.word	0x0800084b
 80006ec:	0800084b 	.word	0x0800084b
 80006f0:	08000729 	.word	0x08000729
 80006f4:	0800084b 	.word	0x0800084b
 80006f8:	0800084b 	.word	0x0800084b
 80006fc:	0800084b 	.word	0x0800084b
 8000700:	0800084b 	.word	0x0800084b
 8000704:	0800084b 	.word	0x0800084b
 8000708:	0800084b 	.word	0x0800084b
 800070c:	0800084b 	.word	0x0800084b
 8000710:	0800084b 	.word	0x0800084b
 8000714:	0800084b 	.word	0x0800084b
 8000718:	0800084b 	.word	0x0800084b
 800071c:	0800084b 	.word	0x0800084b
 8000720:	0800084b 	.word	0x0800084b
 8000724:	08000751 	.word	0x08000751
	      {
	          // Print received char, toggle green LED
	          case ('g'):
	          {
	              logMsg(&huart1, "g\n");
 8000728:	4951      	ldr	r1, [pc, #324]	; (8000870 <main+0x204>)
 800072a:	484c      	ldr	r0, [pc, #304]	; (800085c <main+0x1f0>)
 800072c:	f7ff ff44 	bl	80005b8 <logMsg>
	              HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000734:	484f      	ldr	r0, [pc, #316]	; (8000874 <main+0x208>)
 8000736:	f001 fcad 	bl	8002094 <HAL_GPIO_TogglePin>
	              break;
 800073a:	e08b      	b.n	8000854 <main+0x1e8>
	          }

	          // Print received char, toggle blue LED
	          case ('b'):
	          {
	              logMsg(&huart1, "b\n");
 800073c:	494e      	ldr	r1, [pc, #312]	; (8000878 <main+0x20c>)
 800073e:	4847      	ldr	r0, [pc, #284]	; (800085c <main+0x1f0>)
 8000740:	f7ff ff3a 	bl	80005b8 <logMsg>
	              HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	484c      	ldr	r0, [pc, #304]	; (800087c <main+0x210>)
 800074a:	f001 fca3 	bl	8002094 <HAL_GPIO_TogglePin>
	              break;
 800074e:	e081      	b.n	8000854 <main+0x1e8>
	          }

	          // Print RTC time
			  case ('t'):
			  {
				  logMsg(&huart1, "t\n");
 8000750:	494b      	ldr	r1, [pc, #300]	; (8000880 <main+0x214>)
 8000752:	4842      	ldr	r0, [pc, #264]	; (800085c <main+0x1f0>)
 8000754:	f7ff ff30 	bl	80005b8 <logMsg>
				  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000758:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	4848      	ldr	r0, [pc, #288]	; (8000884 <main+0x218>)
 8000762:	f003 f919 	bl	8003998 <HAL_RTC_GetTime>
				  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8000766:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	4845      	ldr	r0, [pc, #276]	; (8000884 <main+0x218>)
 8000770:	f003 f9f5 	bl	8003b5e <HAL_RTC_GetDate>

				  char buffer[100] = {0};		// Large char buffer for string printing
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2260      	movs	r2, #96	; 0x60
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fe66 	bl	8005450 <memset>
				  snprintf(buffer, sizeof(buffer), "Current date is: %02d/%02d/%02d\n", rtcDate.Month, rtcDate.Date, rtcDate.Year);
 8000784:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000788:	4619      	mov	r1, r3
 800078a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800078e:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8000792:	4638      	mov	r0, r7
 8000794:	9201      	str	r2, [sp, #4]
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	460b      	mov	r3, r1
 800079a:	4a3b      	ldr	r2, [pc, #236]	; (8000888 <main+0x21c>)
 800079c:	2164      	movs	r1, #100	; 0x64
 800079e:	f004 fe5f 	bl	8005460 <sniprintf>
				  //HAL_UART_Transmit_DMA(&huart1, (uint8_t*) buffer, strlen(buffer));
				  logMsg(&huart1, buffer);
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	482d      	ldr	r0, [pc, #180]	; (800085c <main+0x1f0>)
 80007a8:	f7ff ff06 	bl	80005b8 <logMsg>

				  HAL_Delay(100);
 80007ac:	2064      	movs	r0, #100	; 0x64
 80007ae:	f000 ff03 	bl	80015b8 <HAL_Delay>

				  snprintf(buffer, sizeof(buffer), "Current time is: %02d:%02d:%02d\n", rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds);
 80007b2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80007b6:	4619      	mov	r1, r3
 80007b8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80007bc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80007c0:	4638      	mov	r0, r7
 80007c2:	9201      	str	r2, [sp, #4]
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	460b      	mov	r3, r1
 80007c8:	4a30      	ldr	r2, [pc, #192]	; (800088c <main+0x220>)
 80007ca:	2164      	movs	r1, #100	; 0x64
 80007cc:	f004 fe48 	bl	8005460 <sniprintf>
				  //HAL_UART_Transmit_DMA(&huart1, (uint8_t*) buffer, strlen(buffer));
				  logMsg(&huart1, buffer);
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4821      	ldr	r0, [pc, #132]	; (800085c <main+0x1f0>)
 80007d6:	f7ff feef 	bl	80005b8 <logMsg>

				  break;
 80007da:	e03b      	b.n	8000854 <main+0x1e8>
			  }

			  case ('c'):
			  {
				  logMsg(&huart1, "Entering clock mode. Reset req'd to exit!\n");
 80007dc:	492c      	ldr	r1, [pc, #176]	; (8000890 <main+0x224>)
 80007de:	481f      	ldr	r0, [pc, #124]	; (800085c <main+0x1f0>)
 80007e0:	f7ff feea 	bl	80005b8 <logMsg>
				  char buffer[100] = {0};		// Large char buffer for string printing
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2260      	movs	r2, #96	; 0x60
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f004 fe2e 	bl	8005450 <memset>
				  snprintf(buffer, sizeof(buffer), "\rCurrent time is: %02d:%02d:%02d", rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds);
				  logMsg(&huart1, buffer);
*/
				  while(1)
				  {
					  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80007f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4821      	ldr	r0, [pc, #132]	; (8000884 <main+0x218>)
 80007fe:	f003 f8cb 	bl	8003998 <HAL_RTC_GetTime>
					  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8000802:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	481e      	ldr	r0, [pc, #120]	; (8000884 <main+0x218>)
 800080c:	f003 f9a7 	bl	8003b5e <HAL_RTC_GetDate>

					  snprintf(buffer, sizeof(buffer), "Current time is: %02d:%02d:%02d", rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds);
 8000810:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000814:	4619      	mov	r1, r3
 8000816:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800081a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800081e:	4638      	mov	r0, r7
 8000820:	9201      	str	r2, [sp, #4]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	460b      	mov	r3, r1
 8000826:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <main+0x228>)
 8000828:	2164      	movs	r1, #100	; 0x64
 800082a:	f004 fe19 	bl	8005460 <sniprintf>
					  logMsg(&huart1, "\r");
 800082e:	491a      	ldr	r1, [pc, #104]	; (8000898 <main+0x22c>)
 8000830:	480a      	ldr	r0, [pc, #40]	; (800085c <main+0x1f0>)
 8000832:	f7ff fec1 	bl	80005b8 <logMsg>
					  logMsg(&huart1, buffer);
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	4808      	ldr	r0, [pc, #32]	; (800085c <main+0x1f0>)
 800083c:	f7ff febc 	bl	80005b8 <logMsg>

					  HAL_Delay(5000);
 8000840:	f241 3088 	movw	r0, #5000	; 0x1388
 8000844:	f000 feb8 	bl	80015b8 <HAL_Delay>
					  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000848:	e7d4      	b.n	80007f4 <main+0x188>
			  }

	          // Default case. Print error message
	          default:
	          {
	              logMsg(&huart1, "Unknown character received!\n");
 800084a:	4914      	ldr	r1, [pc, #80]	; (800089c <main+0x230>)
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <main+0x1f0>)
 800084e:	f7ff feb3 	bl	80005b8 <logMsg>
	              break;
 8000852:	bf00      	nop
  {
 8000854:	e72f      	b.n	80006b6 <main+0x4a>
 8000856:	bf00      	nop
 8000858:	08005d00 	.word	0x08005d00
 800085c:	20000190 	.word	0x20000190
 8000860:	08005d2c 	.word	0x08005d2c
 8000864:	08005d50 	.word	0x08005d50
 8000868:	08005d74 	.word	0x08005d74
 800086c:	08005d90 	.word	0x08005d90
 8000870:	08005dac 	.word	0x08005dac
 8000874:	48000400 	.word	0x48000400
 8000878:	08005db0 	.word	0x08005db0
 800087c:	48000800 	.word	0x48000800
 8000880:	08005db4 	.word	0x08005db4
 8000884:	20000214 	.word	0x20000214
 8000888:	08005db8 	.word	0x08005db8
 800088c:	08005ddc 	.word	0x08005ddc
 8000890:	08005e00 	.word	0x08005e00
 8000894:	08005e2c 	.word	0x08005e2c
 8000898:	08005e4c 	.word	0x08005e4c
 800089c:	08005e50 	.word	0x08005e50

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b096      	sub	sp, #88	; 0x58
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2244      	movs	r2, #68	; 0x44
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 fdce 	bl	8005450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008c6:	f001 fc41 	bl	800214c <HAL_PWREx_ControlVoltageScaling>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008d0:	f000 fb88 	bl	8000fe4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d4:	f001 fc1c 	bl	8002110 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <SystemClock_Config+0xc4>)
 80008da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008de:	4a21      	ldr	r2, [pc, #132]	; (8000964 <SystemClock_Config+0xc4>)
 80008e0:	f023 0318 	bic.w	r3, r3, #24
 80008e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80008e8:	231c      	movs	r3, #28
 80008ea:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008fc:	2360      	movs	r3, #96	; 0x60
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	2302      	movs	r3, #2
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000904:	2301      	movs	r3, #1
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800090c:	2328      	movs	r3, #40	; 0x28
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000910:	2307      	movs	r3, #7
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fc69 	bl	80021f8 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800092c:	f000 fb5a 	bl	8000fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2303      	movs	r3, #3
 8000936:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	2104      	movs	r1, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f002 f83b 	bl	80029c4 <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000954:	f000 fb46 	bl	8000fe4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000958:	f002 fd24 	bl	80033a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800095c:	bf00      	nop
 800095e:	3758      	adds	r7, #88	; 0x58
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000

08000968 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b092      	sub	sp, #72	; 0x48
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800096e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800097e:	2300      	movs	r3, #0
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	222c      	movs	r2, #44	; 0x2c
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fd61 	bl	8005450 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800098e:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <MX_RTC_Init+0x118>)
 8000990:	4a3c      	ldr	r2, [pc, #240]	; (8000a84 <MX_RTC_Init+0x11c>)
 8000992:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000994:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <MX_RTC_Init+0x118>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800099a:	4b39      	ldr	r3, [pc, #228]	; (8000a80 <MX_RTC_Init+0x118>)
 800099c:	227f      	movs	r2, #127	; 0x7f
 800099e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009a0:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <MX_RTC_Init+0x118>)
 80009a2:	22ff      	movs	r2, #255	; 0xff
 80009a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <MX_RTC_Init+0x118>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <MX_RTC_Init+0x118>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <MX_RTC_Init+0x118>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009b8:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <MX_RTC_Init+0x118>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009be:	4830      	ldr	r0, [pc, #192]	; (8000a80 <MX_RTC_Init+0x118>)
 80009c0:	f002 fed2 	bl	8003768 <HAL_RTC_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80009ca:	f000 fb0b 	bl	8000fe4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009ec:	2201      	movs	r2, #1
 80009ee:	4619      	mov	r1, r3
 80009f0:	4823      	ldr	r0, [pc, #140]	; (8000a80 <MX_RTC_Init+0x118>)
 80009f2:	f002 ff34 	bl	800385e <HAL_RTC_SetTime>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80009fc:	f000 faf2 	bl	8000fe4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000a06:	2301      	movs	r3, #1
 8000a08:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4817      	ldr	r0, [pc, #92]	; (8000a80 <MX_RTC_Init+0x118>)
 8000a22:	f003 f815 	bl	8003a50 <HAL_RTC_SetDate>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000a2c:	f000 fada 	bl	8000fe4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_RTC_Init+0x118>)
 8000a68:	f003 f8c6 	bl	8003bf8 <HAL_RTC_SetAlarm_IT>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000a72:	f000 fab7 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3748      	adds	r7, #72	; 0x48
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000214 	.word	0x20000214
 8000a84:	40002800 	.word	0x40002800

08000a88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_SPI3_Init+0x74>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <MX_SPI3_Init+0x78>)
 8000a90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_SPI3_Init+0x74>)
 8000a94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_SPI3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_SPI3_Init+0x74>)
 8000aa2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aa6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_SPI3_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_SPI3_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_SPI3_Init+0x74>)
 8000ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_SPI3_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_SPI3_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_SPI3_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_SPI3_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_SPI3_Init+0x74>)
 8000ad6:	2207      	movs	r2, #7
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_SPI3_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_SPI3_Init+0x74>)
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_SPI3_Init+0x74>)
 8000ae8:	f003 faee 	bl	80040c8 <HAL_SPI_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f000 fa77 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000009c 	.word	0x2000009c
 8000b00:	40003c00 	.word	0x40003c00

08000b04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <MX_USART1_UART_Init+0x5c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART1_UART_Init+0x58>)
 8000b48:	f003 fb61 	bl	800420e <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b52:	f000 fa47 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000190 	.word	0x20000190
 8000b60:	40013800 	.word	0x40013800

08000b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_DMA_Init+0x48>)
 8000b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <MX_DMA_Init+0x48>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6493      	str	r3, [r2, #72]	; 0x48
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <MX_DMA_Init+0x48>)
 8000b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	200e      	movs	r0, #14
 8000b88:	f000 fe15 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f000 fe2e 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 fe0d 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	f000 fe26 	bl	80017ee <HAL_NVIC_EnableIRQ>

}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4bba      	ldr	r3, [pc, #744]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4ab9      	ldr	r2, [pc, #740]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4bb7      	ldr	r3, [pc, #732]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4bb4      	ldr	r3, [pc, #720]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4ab3      	ldr	r2, [pc, #716]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4bb1      	ldr	r3, [pc, #708]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4bae      	ldr	r3, [pc, #696]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4aad      	ldr	r2, [pc, #692]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4bab      	ldr	r3, [pc, #684]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4ba8      	ldr	r3, [pc, #672]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4aa7      	ldr	r2, [pc, #668]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4ba5      	ldr	r3, [pc, #660]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4ba2      	ldr	r3, [pc, #648]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4aa1      	ldr	r2, [pc, #644]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b9f      	ldr	r3, [pc, #636]	; (8000eb0 <MX_GPIO_Init+0x300>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000c44:	489b      	ldr	r0, [pc, #620]	; (8000eb4 <MX_GPIO_Init+0x304>)
 8000c46:	f001 fa0d 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f001 fa06 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000c5e:	4896      	ldr	r0, [pc, #600]	; (8000eb8 <MX_GPIO_Init+0x308>)
 8000c60:	f001 fa00 	bl	8002064 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c6a:	4894      	ldr	r0, [pc, #592]	; (8000ebc <MX_GPIO_Init+0x30c>)
 8000c6c:	f001 f9fa 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c76:	4891      	ldr	r0, [pc, #580]	; (8000ebc <MX_GPIO_Init+0x30c>)
 8000c78:	f001 f9f4 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c82:	488f      	ldr	r0, [pc, #572]	; (8000ec0 <MX_GPIO_Init+0x310>)
 8000c84:	f001 f9ee 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	488a      	ldr	r0, [pc, #552]	; (8000eb8 <MX_GPIO_Init+0x308>)
 8000c8e:	f001 f9e9 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2101      	movs	r1, #1
 8000c96:	4887      	ldr	r0, [pc, #540]	; (8000eb4 <MX_GPIO_Init+0x304>)
 8000c98:	f001 f9e4 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c9c:	f240 1315 	movw	r3, #277	; 0x115
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	487f      	ldr	r0, [pc, #508]	; (8000eb4 <MX_GPIO_Init+0x304>)
 8000cb6:	f001 f82b 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000cba:	236a      	movs	r3, #106	; 0x6a
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	4b81      	ldr	r3, [pc, #516]	; (8000ec4 <MX_GPIO_Init+0x314>)
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4879      	ldr	r0, [pc, #484]	; (8000eb4 <MX_GPIO_Init+0x304>)
 8000cce:	f001 f81f 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000cd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd8:	4b7b      	ldr	r3, [pc, #492]	; (8000ec8 <MX_GPIO_Init+0x318>)
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4876      	ldr	r0, [pc, #472]	; (8000ec0 <MX_GPIO_Init+0x310>)
 8000ce8:	f001 f812 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000cec:	233f      	movs	r3, #63	; 0x3f
 8000cee:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cf0:	230b      	movs	r3, #11
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4870      	ldr	r0, [pc, #448]	; (8000ec0 <MX_GPIO_Init+0x310>)
 8000d00:	f001 f806 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d04:	2303      	movs	r3, #3
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d14:	2308      	movs	r3, #8
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f000 fff5 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d26:	f248 1304 	movw	r3, #33028	; 0x8104
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f000 ffe5 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d46:	2308      	movs	r3, #8
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d56:	2301      	movs	r3, #1
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f000 ffd4 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d6c:	230b      	movs	r3, #11
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f000 ffc7 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000d82:	23e0      	movs	r3, #224	; 0xe0
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d92:	2305      	movs	r3, #5
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f000 ffb6 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000da4:	2301      	movs	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da8:	4b46      	ldr	r3, [pc, #280]	; (8000ec4 <MX_GPIO_Init+0x314>)
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4840      	ldr	r0, [pc, #256]	; (8000eb8 <MX_GPIO_Init+0x308>)
 8000db8:	f000 ffaa 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dc0:	230b      	movs	r3, #11
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	483a      	ldr	r0, [pc, #232]	; (8000eb8 <MX_GPIO_Init+0x308>)
 8000dd0:	f000 ff9e 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000dd4:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000dd8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4832      	ldr	r0, [pc, #200]	; (8000eb8 <MX_GPIO_Init+0x308>)
 8000dee:	f000 ff8f 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000df2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4829      	ldr	r0, [pc, #164]	; (8000eb4 <MX_GPIO_Init+0x304>)
 8000e10:	f000 ff7e 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e14:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e18:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e26:	230a      	movs	r3, #10
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4820      	ldr	r0, [pc, #128]	; (8000eb4 <MX_GPIO_Init+0x304>)
 8000e32:	f000 ff6d 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <MX_GPIO_Init+0x308>)
 8000e54:	f000 ff5c 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000e58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4811      	ldr	r0, [pc, #68]	; (8000ebc <MX_GPIO_Init+0x30c>)
 8000e76:	f000 ff4b 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e7a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e7e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_GPIO_Init+0x314>)
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <MX_GPIO_Init+0x30c>)
 8000e90:	f000 ff3e 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e94:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	e00e      	b.n	8000ecc <MX_GPIO_Init+0x31c>
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48001000 	.word	0x48001000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	48000c00 	.word	0x48000c00
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	10110000 	.word	0x10110000
 8000ec8:	10210000 	.word	0x10210000
 8000ecc:	4841      	ldr	r0, [pc, #260]	; (8000fd4 <MX_GPIO_Init+0x424>)
 8000ece:	f000 ff1f 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ed2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	483b      	ldr	r0, [pc, #236]	; (8000fd8 <MX_GPIO_Init+0x428>)
 8000eec:	f000 ff10 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ef0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef6:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <MX_GPIO_Init+0x42c>)
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4834      	ldr	r0, [pc, #208]	; (8000fd8 <MX_GPIO_Init+0x428>)
 8000f06:	f000 ff03 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f22:	f000 fef5 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f38:	230a      	movs	r3, #10
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f000 fee3 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <MX_GPIO_Init+0x424>)
 8000f66:	f000 fed3 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000f6a:	2378      	movs	r3, #120	; 0x78
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <MX_GPIO_Init+0x424>)
 8000f86:	f000 fec3 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f90:	2312      	movs	r3, #18
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <MX_GPIO_Init+0x430>)
 8000fa8:	f000 feb2 	bl	8001d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2017      	movs	r0, #23
 8000fb2:	f000 fc00 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fb6:	2017      	movs	r0, #23
 8000fb8:	f000 fc19 	bl	80017ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2028      	movs	r0, #40	; 0x28
 8000fc2:	f000 fbf8 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fc6:	2028      	movs	r0, #40	; 0x28
 8000fc8:	f000 fc11 	bl	80017ee <HAL_NVIC_EnableIRQ>

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	48000c00 	.word	0x48000c00
 8000fd8:	48000800 	.word	0x48000800
 8000fdc:	10110000 	.word	0x10110000
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_MspInit+0x44>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_MspInit+0x44>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6613      	str	r3, [r2, #96]	; 0x60
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_MspInit+0x44>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_MspInit+0x44>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_MspInit+0x44>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	6593      	str	r3, [r2, #88]	; 0x58
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_MspInit+0x44>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0a4      	sub	sp, #144	; 0x90
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	2288      	movs	r2, #136	; 0x88
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fa01 	bl	8005450 <memset>
  if(hrtc->Instance==RTC)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <HAL_RTC_MspInit+0x6c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d120      	bne.n	800109a <HAL_RTC_MspInit+0x62>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800105e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001062:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	4618      	mov	r0, r3
 800106c:	f001 feb0 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001076:	f7ff ffb5 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_RTC_MspInit+0x70>)
 800107c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001080:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_RTC_MspInit+0x70>)
 8001082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2029      	movs	r0, #41	; 0x29
 8001090:	f000 fb91 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001094:	2029      	movs	r0, #41	; 0x29
 8001096:	f000 fbaa 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3790      	adds	r7, #144	; 0x90
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40002800 	.word	0x40002800
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_SPI_MspInit+0x7c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d128      	bne.n	8001120 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_SPI_MspInit+0x80>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	4a16      	ldr	r2, [pc, #88]	; (800112c <HAL_SPI_MspInit+0x80>)
 80010d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d8:	6593      	str	r3, [r2, #88]	; 0x58
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_SPI_MspInit+0x80>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_SPI_MspInit+0x80>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_SPI_MspInit+0x80>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_SPI_MspInit+0x80>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80010fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001110:	2306      	movs	r3, #6
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_SPI_MspInit+0x84>)
 800111c:	f000 fdf8 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40003c00 	.word	0x40003c00
 800112c:	40021000 	.word	0x40021000
 8001130:	48000800 	.word	0x48000800

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0ac      	sub	sp, #176	; 0xb0
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2288      	movs	r2, #136	; 0x88
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f004 f97b 	bl	8005450 <memset>
  if(huart->Instance==USART1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a4e      	ldr	r2, [pc, #312]	; (8001298 <HAL_UART_MspInit+0x164>)
 8001160:	4293      	cmp	r3, r2
 8001162:	f040 8095 	bne.w	8001290 <HAL_UART_MspInit+0x15c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001166:	2301      	movs	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800116a:	2300      	movs	r3, #0
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4618      	mov	r0, r3
 8001174:	f001 fe2c 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800117e:	f7ff ff31 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001182:	4b46      	ldr	r3, [pc, #280]	; (800129c <HAL_UART_MspInit+0x168>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	4a45      	ldr	r2, [pc, #276]	; (800129c <HAL_UART_MspInit+0x168>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6613      	str	r3, [r2, #96]	; 0x60
 800118e:	4b43      	ldr	r3, [pc, #268]	; (800129c <HAL_UART_MspInit+0x168>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b40      	ldr	r3, [pc, #256]	; (800129c <HAL_UART_MspInit+0x168>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a3f      	ldr	r2, [pc, #252]	; (800129c <HAL_UART_MspInit+0x168>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b3d      	ldr	r3, [pc, #244]	; (800129c <HAL_UART_MspInit+0x168>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011b2:	23c0      	movs	r3, #192	; 0xc0
 80011b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ca:	2307      	movs	r3, #7
 80011cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d4:	4619      	mov	r1, r3
 80011d6:	4832      	ldr	r0, [pc, #200]	; (80012a0 <HAL_UART_MspInit+0x16c>)
 80011d8:	f000 fd9a 	bl	8001d10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80011dc:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_UART_MspInit+0x170>)
 80011de:	4a32      	ldr	r2, [pc, #200]	; (80012a8 <HAL_UART_MspInit+0x174>)
 80011e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <HAL_UART_MspInit+0x170>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e8:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <HAL_UART_MspInit+0x170>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_UART_MspInit+0x170>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <HAL_UART_MspInit+0x170>)
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <HAL_UART_MspInit+0x170>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001200:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <HAL_UART_MspInit+0x170>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001206:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <HAL_UART_MspInit+0x170>)
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <HAL_UART_MspInit+0x170>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001212:	4824      	ldr	r0, [pc, #144]	; (80012a4 <HAL_UART_MspInit+0x170>)
 8001214:	f000 fb06 	bl	8001824 <HAL_DMA_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800121e:	f7ff fee1 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_UART_MspInit+0x170>)
 8001226:	671a      	str	r2, [r3, #112]	; 0x70
 8001228:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <HAL_UART_MspInit+0x170>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <HAL_UART_MspInit+0x178>)
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <HAL_UART_MspInit+0x17c>)
 8001232:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_UART_MspInit+0x178>)
 8001236:	2202      	movs	r2, #2
 8001238:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_UART_MspInit+0x178>)
 800123c:	2210      	movs	r2, #16
 800123e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_UART_MspInit+0x178>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_UART_MspInit+0x178>)
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_UART_MspInit+0x178>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_UART_MspInit+0x178>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_UART_MspInit+0x178>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HAL_UART_MspInit+0x178>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <HAL_UART_MspInit+0x178>)
 8001266:	f000 fadd 	bl	8001824 <HAL_DMA_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001270:	f7ff feb8 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_UART_MspInit+0x178>)
 8001278:	66da      	str	r2, [r3, #108]	; 0x6c
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <HAL_UART_MspInit+0x178>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	2025      	movs	r0, #37	; 0x25
 8001286:	f000 fa96 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800128a:	2025      	movs	r0, #37	; 0x25
 800128c:	f000 faaf 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001290:	bf00      	nop
 8001292:	37b0      	adds	r7, #176	; 0xb0
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40013800 	.word	0x40013800
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	20000148 	.word	0x20000148
 80012a8:	40020058 	.word	0x40020058
 80012ac:	20000100 	.word	0x20000100
 80012b0:	40020044 	.word	0x40020044

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 f93a 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <DMA1_Channel4_IRQHandler+0x10>)
 800130e:	f000 fc20 	bl	8001b52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000100 	.word	0x20000100

0800131c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <DMA1_Channel5_IRQHandler+0x10>)
 8001322:	f000 fc16 	bl	8001b52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000148 	.word	0x20000148

08001330 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001334:	2020      	movs	r0, #32
 8001336:	f000 fec7 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800133a:	2040      	movs	r0, #64	; 0x40
 800133c:	f000 fec4 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001340:	2080      	movs	r0, #128	; 0x80
 8001342:	f000 fec1 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001346:	f44f 7080 	mov.w	r0, #256	; 0x100
 800134a:	f000 febd 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <USART1_IRQHandler+0x10>)
 800135a:	f003 f869 	bl	8004430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000190 	.word	0x20000190

08001368 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800136c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001370:	f000 feaa 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001374:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001378:	f000 fea6 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800137c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001380:	f000 fea2 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001384:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001388:	f000 fe9e 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800138c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001390:	f000 fe9a 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <RTC_Alarm_IRQHandler+0x10>)
 800139e:	f002 fd67 	bl	8003e70 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000214 	.word	0x20000214

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f004 f80e 	bl	80053fc <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20018000 	.word	0x20018000
 800140c:	00000400 	.word	0x00000400
 8001410:	20000090 	.word	0x20000090
 8001414:	20000250 	.word	0x20000250

08001418 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <SystemInit+0x5c>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <SystemInit+0x5c>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <SystemInit+0x60>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a11      	ldr	r2, [pc, #68]	; (8001478 <SystemInit+0x60>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <SystemInit+0x60>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <SystemInit+0x60>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <SystemInit+0x60>)
 8001444:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001448:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800144c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <SystemInit+0x60>)
 8001450:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001454:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <SystemInit+0x60>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <SystemInit+0x60>)
 800145c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SystemInit+0x60>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	40021000 	.word	0x40021000

0800147c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001480:	f7ff ffca 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001484:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001486:	e003      	b.n	8001490 <LoopCopyDataInit>

08001488 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800148a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800148c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800148e:	3104      	adds	r1, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001490:	480a      	ldr	r0, [pc, #40]	; (80014bc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001494:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001496:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001498:	d3f6      	bcc.n	8001488 <CopyDataInit>
	ldr	r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800149c:	e002      	b.n	80014a4 <LoopFillZerobss>

0800149e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800149e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014a0:	f842 3b04 	str.w	r3, [r2], #4

080014a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <LoopForever+0x16>)
	cmp	r2, r3
 80014a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014a8:	d3f9      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014aa:	f003 ffad 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ae:	f7ff f8dd 	bl	800066c <main>

080014b2 <LoopForever>:

LoopForever:
    b LoopForever
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014b8:	08005efc 	.word	0x08005efc
	ldr	r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014c0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80014c4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80014c8:	2000024c 	.word	0x2000024c

080014cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>

080014ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f961 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f80e 	bl	8001500 <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	e001      	b.n	80014f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f0:	f7ff fd7e 	bl	8000ff0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_InitTick+0x6c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d023      	beq.n	800155c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_InitTick+0x70>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_InitTick+0x6c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f96d 	bl	800180a <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d809      	bhi.n	8001550 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f937 	bl	80017b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001548:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_InitTick+0x74>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e007      	b.n	8001560 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e004      	b.n	8001560 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e001      	b.n	8001560 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008
 8001570:	20000000 	.word	0x20000000
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008
 800159c:	20000238 	.word	0x20000238

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000238 	.word	0x20000238

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <__NVIC_EnableIRQ+0x38>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff29 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff3e 	bl	8001648 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff8e 	bl	80016f4 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff31 	bl	8001664 <__NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffa2 	bl	800175c <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e098      	b.n	8001968 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <HAL_DMA_Init+0x150>)
 800183e:	429a      	cmp	r2, r3
 8001840:	d80f      	bhi.n	8001862 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <HAL_DMA_Init+0x154>)
 800184a:	4413      	add	r3, r2
 800184c:	4a4b      	ldr	r2, [pc, #300]	; (800197c <HAL_DMA_Init+0x158>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	009a      	lsls	r2, r3, #2
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a48      	ldr	r2, [pc, #288]	; (8001980 <HAL_DMA_Init+0x15c>)
 800185e:	641a      	str	r2, [r3, #64]	; 0x40
 8001860:	e00e      	b.n	8001880 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	4b46      	ldr	r3, [pc, #280]	; (8001984 <HAL_DMA_Init+0x160>)
 800186a:	4413      	add	r3, r2
 800186c:	4a43      	ldr	r2, [pc, #268]	; (800197c <HAL_DMA_Init+0x158>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	009a      	lsls	r2, r3, #2
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a42      	ldr	r2, [pc, #264]	; (8001988 <HAL_DMA_Init+0x164>)
 800187e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800189a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018da:	d039      	beq.n	8001950 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	4a27      	ldr	r2, [pc, #156]	; (8001980 <HAL_DMA_Init+0x15c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d11a      	bne.n	800191c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <HAL_DMA_Init+0x168>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f003 031c 	and.w	r3, r3, #28
 80018f2:	210f      	movs	r1, #15
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4924      	ldr	r1, [pc, #144]	; (800198c <HAL_DMA_Init+0x168>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_DMA_Init+0x168>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6859      	ldr	r1, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f003 031c 	and.w	r3, r3, #28
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	491d      	ldr	r1, [pc, #116]	; (800198c <HAL_DMA_Init+0x168>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
 800191a:	e019      	b.n	8001950 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_DMA_Init+0x16c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f003 031c 	and.w	r3, r3, #28
 8001928:	210f      	movs	r1, #15
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	4917      	ldr	r1, [pc, #92]	; (8001990 <HAL_DMA_Init+0x16c>)
 8001932:	4013      	ands	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_DMA_Init+0x16c>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6859      	ldr	r1, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f003 031c 	and.w	r3, r3, #28
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	4911      	ldr	r1, [pc, #68]	; (8001990 <HAL_DMA_Init+0x16c>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40020407 	.word	0x40020407
 8001978:	bffdfff8 	.word	0xbffdfff8
 800197c:	cccccccd 	.word	0xcccccccd
 8001980:	40020000 	.word	0x40020000
 8001984:	bffdfbf8 	.word	0xbffdfbf8
 8001988:	40020400 	.word	0x40020400
 800198c:	400200a8 	.word	0x400200a8
 8001990:	400204a8 	.word	0x400204a8

08001994 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_DMA_Start_IT+0x20>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e04b      	b.n	8001a4c <HAL_DMA_Start_IT+0xb8>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d13a      	bne.n	8001a3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 f95f 	bl	8001cb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 020e 	orr.w	r2, r2, #14
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e00f      	b.n	8001a2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0204 	bic.w	r2, r2, #4
 8001a1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 020a 	orr.w	r2, r2, #10
 8001a2a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	e005      	b.n	8001a4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a46:	2302      	movs	r3, #2
 8001a48:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d008      	beq.n	8001a7e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e022      	b.n	8001ac4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 020e 	bic.w	r2, r2, #14
 8001a8c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f003 021c 	and.w	r2, r3, #28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d005      	beq.n	8001af4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2204      	movs	r2, #4
 8001aec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e029      	b.n	8001b48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 020e 	bic.w	r2, r2, #14
 8001b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	f003 021c 	and.w	r2, r3, #28
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	4798      	blx	r3
    }
  }
  return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f003 031c 	and.w	r3, r3, #28
 8001b72:	2204      	movs	r2, #4
 8001b74:	409a      	lsls	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d026      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x7a>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d021      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d107      	bne.n	8001ba6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0204 	bic.w	r2, r2, #4
 8001ba4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f003 021c 	and.w	r2, r3, #28
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d071      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001bca:	e06c      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f003 031c 	and.w	r3, r3, #28
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d02e      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xec>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d029      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10b      	bne.n	8001c10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 020a 	bic.w	r2, r2, #10
 8001c06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f003 021c 	and.w	r2, r3, #28
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d038      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c3c:	e033      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f003 031c 	and.w	r3, r3, #28
 8001c46:	2208      	movs	r2, #8
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d02a      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x156>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d025      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020e 	bic.w	r2, r2, #14
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	f003 021c 	and.w	r2, r3, #28
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
}
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f003 021c 	and.w	r2, r3, #28
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d108      	bne.n	8001cf4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cf2:	e007      	b.n	8001d04 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1e:	e17f      	b.n	8002020 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8171 	beq.w	800201a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d00b      	beq.n	8001d58 <HAL_GPIO_Init+0x48>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d007      	beq.n	8001d58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d4c:	2b11      	cmp	r3, #17
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b12      	cmp	r3, #18
 8001d56:	d130      	bne.n	8001dba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 0201 	and.w	r2, r3, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d118      	bne.n	8001df8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x128>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b12      	cmp	r3, #18
 8001e36:	d123      	bne.n	8001e80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	6939      	ldr	r1, [r7, #16]
 8001e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80ac 	beq.w	800201a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	4b5f      	ldr	r3, [pc, #380]	; (8002040 <HAL_GPIO_Init+0x330>)
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec6:	4a5e      	ldr	r2, [pc, #376]	; (8002040 <HAL_GPIO_Init+0x330>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ece:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <HAL_GPIO_Init+0x330>)
 8001ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eda:	4a5a      	ldr	r2, [pc, #360]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f04:	d025      	beq.n	8001f52 <HAL_GPIO_Init+0x242>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <HAL_GPIO_Init+0x338>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <HAL_GPIO_Init+0x23e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4e      	ldr	r2, [pc, #312]	; (800204c <HAL_GPIO_Init+0x33c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x23a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4d      	ldr	r2, [pc, #308]	; (8002050 <HAL_GPIO_Init+0x340>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x236>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <HAL_GPIO_Init+0x344>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x232>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4b      	ldr	r2, [pc, #300]	; (8002058 <HAL_GPIO_Init+0x348>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x22e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4a      	ldr	r2, [pc, #296]	; (800205c <HAL_GPIO_Init+0x34c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x22a>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e00c      	b.n	8001f54 <HAL_GPIO_Init+0x244>
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	e00a      	b.n	8001f54 <HAL_GPIO_Init+0x244>
 8001f3e:	2305      	movs	r3, #5
 8001f40:	e008      	b.n	8001f54 <HAL_GPIO_Init+0x244>
 8001f42:	2304      	movs	r3, #4
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x244>
 8001f46:	2303      	movs	r3, #3
 8001f48:	e004      	b.n	8001f54 <HAL_GPIO_Init+0x244>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e002      	b.n	8001f54 <HAL_GPIO_Init+0x244>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_GPIO_Init+0x244>
 8001f52:	2300      	movs	r3, #0
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	f002 0203 	and.w	r2, r2, #3
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	4093      	lsls	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f64:	4937      	ldr	r1, [pc, #220]	; (8002044 <HAL_GPIO_Init+0x334>)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_GPIO_Init+0x350>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f96:	4a32      	ldr	r2, [pc, #200]	; (8002060 <HAL_GPIO_Init+0x350>)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_GPIO_Init+0x350>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fc0:	4a27      	ldr	r2, [pc, #156]	; (8002060 <HAL_GPIO_Init+0x350>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_GPIO_Init+0x350>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fea:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_GPIO_Init+0x350>)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_GPIO_Init+0x350>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002014:	4a12      	ldr	r2, [pc, #72]	; (8002060 <HAL_GPIO_Init+0x350>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	f47f ae78 	bne.w	8001d20 <HAL_GPIO_Init+0x10>
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	371c      	adds	r7, #28
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	40010000 	.word	0x40010000
 8002048:	48000400 	.word	0x48000400
 800204c:	48000800 	.word	0x48000800
 8002050:	48000c00 	.word	0x48000c00
 8002054:	48001000 	.word	0x48001000
 8002058:	48001400 	.word	0x48001400
 800205c:	48001800 	.word	0x48001800
 8002060:	40010400 	.word	0x40010400

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002080:	e002      	b.n	8002088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	041a      	lsls	r2, r3, #16
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43d9      	mvns	r1, r3
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	400b      	ands	r3, r1
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f806 	bl	80020f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40007000 	.word	0x40007000

08002130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_PWREx_GetVoltageRange+0x18>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40007000 	.word	0x40007000

0800214c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215a:	d130      	bne.n	80021be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002168:	d038      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002172:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2232      	movs	r2, #50	; 0x32
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002190:	e002      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3b01      	subs	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a4:	d102      	bne.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f2      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b8:	d110      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e00f      	b.n	80021de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d007      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021d4:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000
 80021f0:	20000000 	.word	0x20000000
 80021f4:	431bde83 	.word	0x431bde83

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e3d4      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220a:	4ba1      	ldr	r3, [pc, #644]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002214:	4b9e      	ldr	r3, [pc, #632]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80e4 	beq.w	80023f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_RCC_OscConfig+0x4a>
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	f040 808b 	bne.w	8002350 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 8087 	bne.w	8002350 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002242:	4b93      	ldr	r3, [pc, #588]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x62>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e3ac      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	4b8c      	ldr	r3, [pc, #560]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <HAL_RCC_OscConfig+0x7c>
 800226a:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002272:	e005      	b.n	8002280 <HAL_RCC_OscConfig+0x88>
 8002274:	4b86      	ldr	r3, [pc, #536]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002280:	4293      	cmp	r3, r2
 8002282:	d223      	bcs.n	80022cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fd41 	bl	8002d10 <RCC_SetFlashLatencyFromMSIRange>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e38d      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002298:	4b7d      	ldr	r3, [pc, #500]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a7c      	ldr	r2, [pc, #496]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800229e:	f043 0308 	orr.w	r3, r3, #8
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b7a      	ldr	r3, [pc, #488]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4977      	ldr	r1, [pc, #476]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b6:	4b76      	ldr	r3, [pc, #472]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	4972      	ldr	r1, [pc, #456]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
 80022ca:	e025      	b.n	8002318 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022cc:	4b70      	ldr	r3, [pc, #448]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6f      	ldr	r2, [pc, #444]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b6d      	ldr	r3, [pc, #436]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	496a      	ldr	r1, [pc, #424]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ea:	4b69      	ldr	r3, [pc, #420]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	4965      	ldr	r1, [pc, #404]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fd01 	bl	8002d10 <RCC_SetFlashLatencyFromMSIRange>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e34d      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002318:	f000 fc36 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	495a      	ldr	r1, [pc, #360]	; (8002494 <HAL_RCC_OscConfig+0x29c>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x2a0>)
 8002336:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002338:	4b58      	ldr	r3, [pc, #352]	; (800249c <HAL_RCC_OscConfig+0x2a4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f8df 	bl	8001500 <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d052      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	e331      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d032      	beq.n	80023be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002358:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002364:	f7ff f91c 	bl	80015a0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236c:	f7ff f918 	bl	80015a0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e31a      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237e:	4b44      	ldr	r3, [pc, #272]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a40      	ldr	r2, [pc, #256]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	493b      	ldr	r1, [pc, #236]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	4936      	ldr	r1, [pc, #216]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	e01a      	b.n	80023f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023be:	4b34      	ldr	r3, [pc, #208]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a33      	ldr	r2, [pc, #204]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ca:	f7ff f8e9 	bl	80015a0 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d2:	f7ff f8e5 	bl	80015a0 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e2e7      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e4:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x1da>
 80023f0:	e000      	b.n	80023f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d074      	beq.n	80024ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x21a>
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d10e      	bne.n	800242a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d064      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d160      	bne.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e2c4      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x24a>
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a15      	ldr	r2, [pc, #84]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e01d      	b.n	800247e <HAL_RCC_OscConfig+0x286>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244a:	d10c      	bne.n	8002466 <HAL_RCC_OscConfig+0x26e>
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e00b      	b.n	800247e <HAL_RCC_OscConfig+0x286>
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 800246c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a06      	ldr	r2, [pc, #24]	; (8002490 <HAL_RCC_OscConfig+0x298>)
 8002478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7ff f88b 	bl	80015a0 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248c:	e011      	b.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	08005e70 	.word	0x08005e70
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7ff f87e 	bl	80015a0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e280      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b2:	4baf      	ldr	r3, [pc, #700]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x2a8>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7ff f86e 	bl	80015a0 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff f86a 	bl	80015a0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e26c      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	4ba5      	ldr	r3, [pc, #660]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2d0>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d060      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_OscConfig+0x310>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d119      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d116      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	4b99      	ldr	r3, [pc, #612]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x328>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e249      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b93      	ldr	r3, [pc, #588]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4990      	ldr	r1, [pc, #576]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002534:	e040      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d023      	beq.n	8002586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253e:	4b8c      	ldr	r3, [pc, #560]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a8b      	ldr	r2, [pc, #556]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7ff f829 	bl	80015a0 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7ff f825 	bl	80015a0 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e227      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	4b82      	ldr	r3, [pc, #520]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	497c      	ldr	r1, [pc, #496]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b7a      	ldr	r3, [pc, #488]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a79      	ldr	r2, [pc, #484]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800258c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7ff f805 	bl	80015a0 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff f801 	bl	80015a0 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e203      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	4b70      	ldr	r3, [pc, #448]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03c      	beq.n	800263e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01c      	beq.n	8002606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025cc:	4b68      	ldr	r3, [pc, #416]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	4a67      	ldr	r2, [pc, #412]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe ffe0 	bl	80015a0 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe ffdc 	bl	80015a0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1de      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	4b5e      	ldr	r3, [pc, #376]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80025f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCC_OscConfig+0x3ec>
 8002604:	e01b      	b.n	800263e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b5a      	ldr	r3, [pc, #360]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe ffc3 	bl	80015a0 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7fe ffbf 	bl	80015a0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1c1      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ef      	bne.n	800261e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80a6 	beq.w	8002798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002650:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b44      	ldr	r3, [pc, #272]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	4a43      	ldr	r2, [pc, #268]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	; 0x58
 8002668:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002674:	2301      	movs	r3, #1
 8002676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002678:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCC_OscConfig+0x57c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d118      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002684:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <HAL_RCC_OscConfig+0x57c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <HAL_RCC_OscConfig+0x57c>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002690:	f7fe ff86 	bl	80015a0 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7fe ff82 	bl	80015a0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e184      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	4b32      	ldr	r3, [pc, #200]	; (8002774 <HAL_RCC_OscConfig+0x57c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4d8>
 80026be:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ce:	e024      	b.n	800271a <HAL_RCC_OscConfig+0x522>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d110      	bne.n	80026fa <HAL_RCC_OscConfig+0x502>
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f8:	e00f      	b.n	800271a <HAL_RCC_OscConfig+0x522>
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002710:	4a17      	ldr	r2, [pc, #92]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002712:	f023 0304 	bic.w	r3, r3, #4
 8002716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d016      	beq.n	8002750 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fe ff3d 	bl	80015a0 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe ff39 	bl	80015a0 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e139      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_OscConfig+0x578>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ed      	beq.n	800272a <HAL_RCC_OscConfig+0x532>
 800274e:	e01a      	b.n	8002786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe ff26 	bl	80015a0 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002756:	e00f      	b.n	8002778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7fe ff22 	bl	80015a0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d906      	bls.n	8002778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e122      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002778:	4b90      	ldr	r3, [pc, #576]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1e8      	bne.n	8002758 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002786:	7ffb      	ldrb	r3, [r7, #31]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b8b      	ldr	r3, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	4a8a      	ldr	r2, [pc, #552]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8108 	beq.w	80029b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	f040 80d0 	bne.w	800294c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ac:	4b83      	ldr	r3, [pc, #524]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	429a      	cmp	r2, r3
 80027be:	d130      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	3b01      	subs	r3, #1
 80027cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d127      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d11f      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ec:	2a07      	cmp	r2, #7
 80027ee:	bf14      	ite	ne
 80027f0:	2201      	movne	r2, #1
 80027f2:	2200      	moveq	r2, #0
 80027f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d113      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	3b01      	subs	r3, #1
 8002808:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d109      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d06e      	beq.n	8002900 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d069      	beq.n	80028fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002828:	4b64      	ldr	r3, [pc, #400]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002834:	4b61      	ldr	r3, [pc, #388]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0b7      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002844:	4b5d      	ldr	r3, [pc, #372]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a5c      	ldr	r2, [pc, #368]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800284a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800284e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002850:	f7fe fea6 	bl	80015a0 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fea2 	bl	80015a0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0a4      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286a:	4b54      	ldr	r3, [pc, #336]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002876:	4b51      	ldr	r3, [pc, #324]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <HAL_RCC_OscConfig+0x7c8>)
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002886:	3a01      	subs	r2, #1
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002890:	0212      	lsls	r2, r2, #8
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002898:	0852      	lsrs	r2, r2, #1
 800289a:	3a01      	subs	r2, #1
 800289c:	0552      	lsls	r2, r2, #21
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028a4:	0852      	lsrs	r2, r2, #1
 80028a6:	3a01      	subs	r2, #1
 80028a8:	0652      	lsls	r2, r2, #25
 80028aa:	4311      	orrs	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b0:	0912      	lsrs	r2, r2, #4
 80028b2:	0452      	lsls	r2, r2, #17
 80028b4:	430a      	orrs	r2, r1
 80028b6:	4941      	ldr	r1, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028bc:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a3e      	ldr	r2, [pc, #248]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c8:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a3b      	ldr	r2, [pc, #236]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028d4:	f7fe fe64 	bl	80015a0 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fe60 	bl	80015a0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e062      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028fa:	e05a      	b.n	80029b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e059      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002900:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d152      	bne.n	80029b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002918:	4b28      	ldr	r3, [pc, #160]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a27      	ldr	r2, [pc, #156]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002924:	f7fe fe3c 	bl	80015a0 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fe38 	bl	80015a0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e03a      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x734>
 800294a:	e032      	b.n	80029b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d02d      	beq.n	80029ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800296a:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002970:	f023 0303 	bic.w	r3, r3, #3
 8002974:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 800297c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002984:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe fe0b 	bl	80015a0 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe fe07 	bl	80015a0 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e009      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x7c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x796>
 80029ac:	e001      	b.n	80029b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	f99d808c 	.word	0xf99d808c

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0c8      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d910      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	4961      	ldr	r1, [pc, #388]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b5f      	ldr	r3, [pc, #380]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b0      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d04c      	beq.n	8002aae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d121      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e09e      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d115      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e092      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a4c:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e086      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a5c:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e07e      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a6c:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 0203 	bic.w	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	493f      	ldr	r1, [pc, #252]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fd8f 	bl	80015a0 <HAL_GetTick>
 8002a82:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a86:	f7fe fd8b 	bl	80015a0 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e066      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 020c 	and.w	r2, r3, #12
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d1eb      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	492c      	ldr	r1, [pc, #176]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002acc:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d210      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 0207 	bic.w	r2, r3, #7
 8002ae2:	4924      	ldr	r1, [pc, #144]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_ClockConfig+0x1b0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e036      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4918      	ldr	r1, [pc, #96]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4910      	ldr	r1, [pc, #64]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b3a:	f000 f825 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_RCC_ClockConfig+0x1b4>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	490c      	ldr	r1, [pc, #48]	; (8002b7c <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	5ccb      	ldrb	r3, [r1, r3]
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fcce 	bl	8001500 <HAL_InitTick>
 8002b64:	4603      	mov	r3, r0
 8002b66:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b68:	7afb      	ldrb	r3, [r7, #11]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08005e70 	.word	0x08005e70
 8002b80:	20000000 	.word	0x20000000
 8002b84:	20000004 	.word	0x20000004

08002b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b96:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x34>
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d121      	bne.n	8002bfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d11e      	bne.n	8002bfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bbc:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bc8:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e005      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002be4:	4a2b      	ldr	r2, [pc, #172]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10d      	bne.n	8002c10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	e004      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c0c:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002c0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d134      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d003      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0xac>
 8002c2c:	e005      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c30:	617b      	str	r3, [r7, #20]
      break;
 8002c32:	e005      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002c36:	617b      	str	r3, [r7, #20]
      break;
 8002c38:	e002      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	617b      	str	r3, [r7, #20]
      break;
 8002c3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	fb02 f203 	mul.w	r2, r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	0e5b      	lsrs	r3, r3, #25
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	3301      	adds	r3, #1
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c80:	69bb      	ldr	r3, [r7, #24]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3724      	adds	r7, #36	; 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08005e88 	.word	0x08005e88
 8002c98:	00f42400 	.word	0x00f42400
 8002c9c:	007a1200 	.word	0x007a1200

08002ca0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cbc:	f7ff fff0 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4904      	ldr	r1, [pc, #16]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08005e80 	.word	0x08005e80

08002ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ce8:	f7ff ffda 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	0adb      	lsrs	r3, r3, #11
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	4904      	ldr	r1, [pc, #16]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08005e80 	.word	0x08005e80

08002d10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d28:	f7ff fa02 	bl	8002130 <HAL_PWREx_GetVoltageRange>
 8002d2c:	6178      	str	r0, [r7, #20]
 8002d2e:	e014      	b.n	8002d5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3c:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d48:	f7ff f9f2 	bl	8002130 <HAL_PWREx_GetVoltageRange>
 8002d4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d60:	d10b      	bne.n	8002d7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b80      	cmp	r3, #128	; 0x80
 8002d66:	d919      	bls.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d6c:	d902      	bls.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d6e:	2302      	movs	r3, #2
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	e013      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d74:	2301      	movs	r3, #1
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	e010      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b80      	cmp	r3, #128	; 0x80
 8002d7e:	d902      	bls.n	8002d86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d80:	2303      	movs	r3, #3
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	e00a      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b80      	cmp	r3, #128	; 0x80
 8002d8a:	d102      	bne.n	8002d92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	e004      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b70      	cmp	r3, #112	; 0x70
 8002d96:	d101      	bne.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d98:	2301      	movs	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 0207 	bic.w	r2, r3, #7
 8002da4:	4909      	ldr	r1, [pc, #36]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d001      	beq.n	8002dbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40022000 	.word	0x40022000

08002dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dd8:	2300      	movs	r3, #0
 8002dda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ddc:	2300      	movs	r3, #0
 8002dde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d041      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002df4:	d02a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002df6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dfa:	d824      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e00:	d008      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e06:	d81e      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e10:	d010      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e12:	e018      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e14:	4b86      	ldr	r3, [pc, #536]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a85      	ldr	r2, [pc, #532]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e20:	e015      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 facb 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e32:	e00c      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3320      	adds	r3, #32
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fbb6 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e44:	e003      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	74fb      	strb	r3, [r7, #19]
      break;
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10b      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e54:	4b76      	ldr	r3, [pc, #472]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e62:	4973      	ldr	r1, [pc, #460]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e6a:	e001      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d041      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e84:	d02a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e8a:	d824      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e96:	d81e      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ea2:	e018      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea4:	4b62      	ldr	r3, [pc, #392]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a61      	ldr	r2, [pc, #388]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eb0:	e015      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fa83 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ec2:	e00c      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3320      	adds	r3, #32
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fb6e 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed4:	e003      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	74fb      	strb	r3, [r7, #19]
      break;
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ee4:	4b52      	ldr	r3, [pc, #328]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef2:	494f      	ldr	r1, [pc, #316]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002efa:	e001      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80a0 	beq.w	800304e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f12:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b41      	ldr	r3, [pc, #260]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	4a40      	ldr	r2, [pc, #256]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f32:	6593      	str	r3, [r2, #88]	; 0x58
 8002f34:	4b3e      	ldr	r3, [pc, #248]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f40:	2301      	movs	r3, #1
 8002f42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f44:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a3a      	ldr	r2, [pc, #232]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fb26 	bl	80015a0 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f56:	e009      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f58:	f7fe fb22 	bl	80015a0 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d902      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	74fb      	strb	r3, [r7, #19]
        break;
 8002f6a:	e005      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f6c:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ef      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d15c      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f7e:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01f      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d019      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f9c:	4b24      	ldr	r3, [pc, #144]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	4a20      	ldr	r2, [pc, #128]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7fe fae1 	bl	80015a0 <HAL_GetTick>
 8002fde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe0:	e00b      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7fe fadd 	bl	80015a0 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d902      	bls.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ff8:	e006      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ec      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10c      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301e:	4904      	ldr	r1, [pc, #16]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003026:	e009      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	74bb      	strb	r3, [r7, #18]
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800303c:	7c7b      	ldrb	r3, [r7, #17]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003042:	4b9e      	ldr	r3, [pc, #632]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	4a9d      	ldr	r2, [pc, #628]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800305a:	4b98      	ldr	r3, [pc, #608]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f023 0203 	bic.w	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	4994      	ldr	r1, [pc, #592]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800307c:	4b8f      	ldr	r3, [pc, #572]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f023 020c 	bic.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	498c      	ldr	r1, [pc, #560]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800309e:	4b87      	ldr	r3, [pc, #540]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	4983      	ldr	r1, [pc, #524]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030c0:	4b7e      	ldr	r3, [pc, #504]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	497b      	ldr	r1, [pc, #492]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030e2:	4b76      	ldr	r3, [pc, #472]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f0:	4972      	ldr	r1, [pc, #456]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003104:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	496a      	ldr	r1, [pc, #424]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003126:	4b65      	ldr	r3, [pc, #404]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	4961      	ldr	r1, [pc, #388]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003148:	4b5c      	ldr	r3, [pc, #368]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003156:	4959      	ldr	r1, [pc, #356]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800316a:	4b54      	ldr	r3, [pc, #336]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003178:	4950      	ldr	r1, [pc, #320]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800318c:	4b4b      	ldr	r3, [pc, #300]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	4948      	ldr	r1, [pc, #288]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ae:	4b43      	ldr	r3, [pc, #268]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	493f      	ldr	r1, [pc, #252]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d028      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031d0:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031de:	4937      	ldr	r1, [pc, #220]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ee:	d106      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f0:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a31      	ldr	r2, [pc, #196]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031fa:	60d3      	str	r3, [r2, #12]
 80031fc:	e011      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003202:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003206:	d10c      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	2101      	movs	r1, #1
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f8d8 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d028      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	491f      	ldr	r1, [pc, #124]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800324c:	d106      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800324e:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003258:	60d3      	str	r3, [r2, #12]
 800325a:	e011      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003264:	d10c      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3304      	adds	r3, #4
 800326a:	2101      	movs	r1, #1
 800326c:	4618      	mov	r0, r3
 800326e:	f000 f8a9 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02b      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	4908      	ldr	r1, [pc, #32]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032aa:	d109      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a02      	ldr	r2, [pc, #8]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032b6:	60d3      	str	r3, [r2, #12]
 80032b8:	e014      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2101      	movs	r1, #1
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f877 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02f      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032f0:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032fe:	4928      	ldr	r1, [pc, #160]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800330a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800330e:	d10d      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3304      	adds	r3, #4
 8003314:	2102      	movs	r1, #2
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f854 	bl	80033c4 <RCCEx_PLLSAI1_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d014      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	74bb      	strb	r3, [r7, #18]
 800332a:	e011      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003334:	d10c      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3320      	adds	r3, #32
 800333a:	2102      	movs	r1, #2
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f935 	bl	80035ac <RCCEx_PLLSAI2_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800335c:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336a:	490d      	ldr	r1, [pc, #52]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800338e:	4904      	ldr	r1, [pc, #16]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003396:	7cbb      	ldrb	r3, [r7, #18]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000

080033a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6013      	str	r3, [r2, #0]
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000

080033c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033d2:	4b75      	ldr	r3, [pc, #468]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d018      	beq.n	8003410 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033de:	4b72      	ldr	r3, [pc, #456]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10d      	bne.n	800340a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
       ||
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033f6:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
       ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d047      	beq.n	800349a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	e044      	b.n	800349a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d018      	beq.n	800344a <RCCEx_PLLSAI1_Config+0x86>
 8003418:	2b03      	cmp	r3, #3
 800341a:	d825      	bhi.n	8003468 <RCCEx_PLLSAI1_Config+0xa4>
 800341c:	2b01      	cmp	r3, #1
 800341e:	d002      	beq.n	8003426 <RCCEx_PLLSAI1_Config+0x62>
 8003420:	2b02      	cmp	r3, #2
 8003422:	d009      	beq.n	8003438 <RCCEx_PLLSAI1_Config+0x74>
 8003424:	e020      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003426:	4b60      	ldr	r3, [pc, #384]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11d      	bne.n	800346e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003436:	e01a      	b.n	800346e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003438:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d116      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003448:	e013      	b.n	8003472 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800344a:	4b57      	ldr	r3, [pc, #348]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003456:	4b54      	ldr	r3, [pc, #336]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003466:	e006      	b.n	8003476 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      break;
 800346c:	e004      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003476:	bf00      	nop
    }

    if(status == HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800347e:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	430b      	orrs	r3, r1
 8003494:	4944      	ldr	r1, [pc, #272]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d17d      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a0:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fe f878 	bl	80015a0 <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b2:	e009      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b4:	f7fe f874 	bl	80015a0 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d902      	bls.n	80034c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	73fb      	strb	r3, [r7, #15]
        break;
 80034c6:	e005      	b.n	80034d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034c8:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ef      	bne.n	80034b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d160      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d111      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e0:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6892      	ldr	r2, [r2, #8]
 80034f0:	0211      	lsls	r1, r2, #8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	0912      	lsrs	r2, r2, #4
 80034f8:	0452      	lsls	r2, r2, #17
 80034fa:	430a      	orrs	r2, r1
 80034fc:	492a      	ldr	r1, [pc, #168]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	610b      	str	r3, [r1, #16]
 8003502:	e027      	b.n	8003554 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d112      	bne.n	8003530 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003512:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6892      	ldr	r2, [r2, #8]
 800351a:	0211      	lsls	r1, r2, #8
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6912      	ldr	r2, [r2, #16]
 8003520:	0852      	lsrs	r2, r2, #1
 8003522:	3a01      	subs	r2, #1
 8003524:	0552      	lsls	r2, r2, #21
 8003526:	430a      	orrs	r2, r1
 8003528:	491f      	ldr	r1, [pc, #124]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	610b      	str	r3, [r1, #16]
 800352e:	e011      	b.n	8003554 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6952      	ldr	r2, [r2, #20]
 8003546:	0852      	lsrs	r2, r2, #1
 8003548:	3a01      	subs	r2, #1
 800354a:	0652      	lsls	r2, r2, #25
 800354c:	430a      	orrs	r2, r1
 800354e:	4916      	ldr	r1, [pc, #88]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800355e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe f81e 	bl	80015a0 <HAL_GetTick>
 8003564:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003566:	e009      	b.n	800357c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003568:	f7fe f81a 	bl	80015a0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d902      	bls.n	800357c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	73fb      	strb	r3, [r7, #15]
          break;
 800357a:	e005      	b.n	8003588 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ef      	beq.n	8003568 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	4904      	ldr	r1, [pc, #16]	; (80035a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	4313      	orrs	r3, r2
 800359a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000

080035ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035c6:	4b67      	ldr	r3, [pc, #412]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10d      	bne.n	80035f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
       ||
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035de:	4b61      	ldr	r3, [pc, #388]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
       ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d047      	beq.n	8003682 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	e044      	b.n	8003682 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d018      	beq.n	8003632 <RCCEx_PLLSAI2_Config+0x86>
 8003600:	2b03      	cmp	r3, #3
 8003602:	d825      	bhi.n	8003650 <RCCEx_PLLSAI2_Config+0xa4>
 8003604:	2b01      	cmp	r3, #1
 8003606:	d002      	beq.n	800360e <RCCEx_PLLSAI2_Config+0x62>
 8003608:	2b02      	cmp	r3, #2
 800360a:	d009      	beq.n	8003620 <RCCEx_PLLSAI2_Config+0x74>
 800360c:	e020      	b.n	8003650 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800360e:	4b55      	ldr	r3, [pc, #340]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11d      	bne.n	8003656 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361e:	e01a      	b.n	8003656 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d116      	bne.n	800365a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e013      	b.n	800365a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003632:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10f      	bne.n	800365e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800363e:	4b49      	ldr	r3, [pc, #292]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800364e:	e006      	b.n	800365e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      break;
 8003654:	e004      	b.n	8003660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10d      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003666:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	3b01      	subs	r3, #1
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	430b      	orrs	r3, r1
 800367c:	4939      	ldr	r1, [pc, #228]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d167      	bne.n	8003758 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003688:	4b36      	ldr	r3, [pc, #216]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a35      	ldr	r2, [pc, #212]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fd ff84 	bl	80015a0 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800369a:	e009      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800369c:	f7fd ff80 	bl	80015a0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d902      	bls.n	80036b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	73fb      	strb	r3, [r7, #15]
        break;
 80036ae:	e005      	b.n	80036bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b0:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ef      	bne.n	800369c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d14a      	bne.n	8003758 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d111      	bne.n	80036ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6892      	ldr	r2, [r2, #8]
 80036d8:	0211      	lsls	r1, r2, #8
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	0912      	lsrs	r2, r2, #4
 80036e0:	0452      	lsls	r2, r2, #17
 80036e2:	430a      	orrs	r2, r1
 80036e4:	491f      	ldr	r1, [pc, #124]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	614b      	str	r3, [r1, #20]
 80036ea:	e011      	b.n	8003710 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	0211      	lsls	r1, r2, #8
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6912      	ldr	r2, [r2, #16]
 8003702:	0852      	lsrs	r2, r2, #1
 8003704:	3a01      	subs	r2, #1
 8003706:	0652      	lsls	r2, r2, #25
 8003708:	430a      	orrs	r2, r1
 800370a:	4916      	ldr	r1, [pc, #88]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a13      	ldr	r2, [pc, #76]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fd ff40 	bl	80015a0 <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003722:	e009      	b.n	8003738 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003724:	f7fd ff3c 	bl	80015a0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d902      	bls.n	8003738 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	73fb      	strb	r3, [r7, #15]
          break;
 8003736:	e005      	b.n	8003744 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ef      	beq.n	8003724 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4904      	ldr	r1, [pc, #16]	; (8003764 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000

08003768 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d06c      	beq.n	8003854 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd fc52 	bl	8001038 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	22ca      	movs	r2, #202	; 0xca
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2253      	movs	r2, #83	; 0x53
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fbd5 	bl	8003f5c <RTC_EnterInitMode>
 80037b2:	4603      	mov	r3, r0
 80037b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d14b      	bne.n	8003854 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80037ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ce:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6899      	ldr	r1, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68d2      	ldr	r2, [r2, #12]
 80037f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6919      	ldr	r1, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	041a      	lsls	r2, r3, #16
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fbd9 	bl	8003fc4 <RTC_ExitInitMode>
 8003812:	4603      	mov	r3, r0
 8003814:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d11b      	bne.n	8003854 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0203 	bic.w	r2, r2, #3
 800382a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800385e:	b590      	push	{r4, r7, lr}
 8003860:	b087      	sub	sp, #28
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_RTC_SetTime+0x1a>
 8003874:	2302      	movs	r3, #2
 8003876:	e08b      	b.n	8003990 <HAL_RTC_SetTime+0x132>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	22ca      	movs	r2, #202	; 0xca
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2253      	movs	r2, #83	; 0x53
 8003896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fb5f 	bl	8003f5c <RTC_EnterInitMode>
 800389e:	4603      	mov	r3, r0
 80038a0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d163      	bne.n	8003970 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d126      	bne.n	80038fc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2200      	movs	r2, #0
 80038c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fbba 	bl	8004040 <RTC_ByteToBcd2>
 80038cc:	4603      	mov	r3, r0
 80038ce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fbb3 	bl	8004040 <RTC_ByteToBcd2>
 80038da:	4603      	mov	r3, r0
 80038dc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038de:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	789b      	ldrb	r3, [r3, #2]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fbab 	bl	8004040 <RTC_ByteToBcd2>
 80038ea:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038ec:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	78db      	ldrb	r3, [r3, #3]
 80038f4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e018      	b.n	800392e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2200      	movs	r2, #0
 800390e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800391c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003922:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	78db      	ldrb	r3, [r3, #3]
 8003928:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003938:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800393c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800394c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6899      	ldr	r1, [r3, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fb2c 	bl	8003fc4 <RTC_ExitInitMode>
 800396c:	4603      	mov	r3, r0
 800396e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	22ff      	movs	r2, #255	; 0xff
 8003976:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800398e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003990:	4618      	mov	r0, r3
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	bd90      	pop	{r4, r7, pc}

08003998 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80039c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80039ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	0d9b      	lsrs	r3, r3, #22
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11a      	bne.n	8003a46 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fb33 	bl	8004080 <RTC_Bcd2ToByte>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fb2a 	bl	8004080 <RTC_Bcd2ToByte>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	789b      	ldrb	r3, [r3, #2]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fb21 	bl	8004080 <RTC_Bcd2ToByte>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_RTC_SetDate+0x1a>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e075      	b.n	8003b56 <HAL_RTC_SetDate+0x106>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2202      	movs	r2, #2
 8003a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10e      	bne.n	8003a9e <HAL_RTC_SetDate+0x4e>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	f023 0310 	bic.w	r3, r3, #16
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	330a      	adds	r3, #10
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11c      	bne.n	8003ade <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	78db      	ldrb	r3, [r3, #3]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fac9 	bl	8004040 <RTC_ByteToBcd2>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	785b      	ldrb	r3, [r3, #1]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fac2 	bl	8004040 <RTC_ByteToBcd2>
 8003abc:	4603      	mov	r3, r0
 8003abe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003ac0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	789b      	ldrb	r3, [r3, #2]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 faba 	bl	8004040 <RTC_ByteToBcd2>
 8003acc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ace:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	e00e      	b.n	8003afc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	78db      	ldrb	r3, [r3, #3]
 8003ae2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003aea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003af0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	22ca      	movs	r2, #202	; 0xca
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2253      	movs	r2, #83	; 0x53
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fa25 	bl	8003f5c <RTC_EnterInitMode>
 8003b12:	4603      	mov	r3, r0
 8003b14:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b2a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fa49 	bl	8003fc4 <RTC_ExitInitMode>
 8003b32:	4603      	mov	r3, r0
 8003b34:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	22ff      	movs	r2, #255	; 0xff
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}

08003b5e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	0b5b      	lsrs	r3, r3, #13
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d11a      	bne.n	8003bee <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	78db      	ldrb	r3, [r3, #3]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fa5f 	bl	8004080 <RTC_Bcd2ToByte>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fa56 	bl	8004080 <RTC_Bcd2ToByte>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	789b      	ldrb	r3, [r3, #2]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fa4d 	bl	8004080 <RTC_Bcd2ToByte>
 8003be6:	4603      	mov	r3, r0
 8003be8:	461a      	mov	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_RTC_SetAlarm_IT+0x1a>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e127      	b.n	8003e62 <HAL_RTC_SetAlarm_IT+0x26a>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d137      	bne.n	8003c98 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f9fd 	bl	8004040 <RTC_ByteToBcd2>
 8003c46:	4603      	mov	r3, r0
 8003c48:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f9f6 	bl	8004040 <RTC_ByteToBcd2>
 8003c54:	4603      	mov	r3, r0
 8003c56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c58:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	789b      	ldrb	r3, [r3, #2]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f9ee 	bl	8004040 <RTC_ByteToBcd2>
 8003c64:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003c66:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	78db      	ldrb	r3, [r3, #3]
 8003c6e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003c70:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f9e0 	bl	8004040 <RTC_ByteToBcd2>
 8003c80:	4603      	mov	r3, r0
 8003c82:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003c84:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003c8c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	e023      	b.n	8003ce0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	785b      	ldrb	r3, [r3, #1]
 8003cb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003cb8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003cbe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	78db      	ldrb	r3, [r3, #3]
 8003cc4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003cc6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cce:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003cd0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003cd6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	22ca      	movs	r2, #202	; 0xca
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2253      	movs	r2, #83	; 0x53
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	d14a      	bne.n	8003d9c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d14:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003d26:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003d28:	f7fd fc3a 	bl	80015a0 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003d2e:	e015      	b.n	8003d5c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d30:	f7fd fc36 	bl	80015a0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d3e:	d90d      	bls.n	8003d5c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	22ff      	movs	r2, #255	; 0xff
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e082      	b.n	8003e62 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0e2      	beq.n	8003d30 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d88:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d98:	609a      	str	r2, [r3, #8]
 8003d9a:	e049      	b.n	8003e30 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003daa:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003dbc:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003dbe:	f7fd fbef 	bl	80015a0 <HAL_GetTick>
 8003dc2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003dc4:	e015      	b.n	8003df2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dc6:	f7fd fbeb 	bl	80015a0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd4:	d90d      	bls.n	8003df2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	22ff      	movs	r2, #255	; 0xff
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2203      	movs	r2, #3
 8003de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e037      	b.n	8003e62 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0e2      	beq.n	8003dc6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e2e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003e30:	4b0e      	ldr	r3, [pc, #56]	; (8003e6c <HAL_RTC_SetAlarm_IT+0x274>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <HAL_RTC_SetAlarm_IT+0x274>)
 8003e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e3a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RTC_SetAlarm_IT+0x274>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <HAL_RTC_SetAlarm_IT+0x274>)
 8003e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e46:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	22ff      	movs	r2, #255	; 0xff
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3724      	adds	r7, #36	; 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd90      	pop	{r4, r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40010400 	.word	0x40010400

08003e70 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003e78:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003e7a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003e7e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d012      	beq.n	8003eb4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00b      	beq.n	8003eb4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003eac:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f824 	bl	8003efc <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d012      	beq.n	8003ee8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003ee0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8e6 	bl	80040b4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40010400 	.word	0x40010400

08003efc <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f26:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003f28:	f7fd fb3a 	bl	80015a0 <HAL_GetTick>
 8003f2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f2e:	e009      	b.n	8003f44 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f30:	f7fd fb36 	bl	80015a0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f3e:	d901      	bls.n	8003f44 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e007      	b.n	8003f54 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0ee      	beq.n	8003f30 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d120      	bne.n	8003fb8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f80:	f7fd fb0e 	bl	80015a0 <HAL_GetTick>
 8003f84:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003f86:	e00d      	b.n	8003fa4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003f88:	f7fd fb0a 	bl	80015a0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f96:	d905      	bls.n	8003fa4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <RTC_EnterInitMode+0x5c>
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d1e7      	bne.n	8003f88 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <RTC_ExitInitMode+0x78>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <RTC_ExitInitMode+0x78>)
 8003fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fda:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <RTC_ExitInitMode+0x78>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10c      	bne.n	8004002 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff91 	bl	8003f10 <HAL_RTC_WaitForSynchro>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01e      	beq.n	8004032 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	73fb      	strb	r3, [r7, #15]
 8004000:	e017      	b.n	8004032 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <RTC_ExitInitMode+0x78>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	4a0d      	ldr	r2, [pc, #52]	; (800403c <RTC_ExitInitMode+0x78>)
 8004008:	f023 0320 	bic.w	r3, r3, #32
 800400c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff ff7e 	bl	8003f10 <HAL_RTC_WaitForSynchro>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2203      	movs	r2, #3
 800401e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <RTC_ExitInitMode+0x78>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	4a04      	ldr	r2, [pc, #16]	; (800403c <RTC_ExitInitMode+0x78>)
 800402c:	f043 0320 	orr.w	r3, r3, #32
 8004030:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40002800 	.word	0x40002800

08004040 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004052:	e005      	b.n	8004060 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3301      	adds	r3, #1
 8004058:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800405a:	7afb      	ldrb	r3, [r7, #11]
 800405c:	3b0a      	subs	r3, #10
 800405e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004060:	7afb      	ldrb	r3, [r7, #11]
 8004062:	2b09      	cmp	r3, #9
 8004064:	d8f6      	bhi.n	8004054 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	b2da      	uxtb	r2, r3
 800406e:	7afb      	ldrb	r3, [r7, #11]
 8004070:	4313      	orrs	r3, r2
 8004072:	b2db      	uxtb	r3, r3
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	0092      	lsls	r2, r2, #2
 8004094:	4413      	add	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	4413      	add	r3, r2
 80040a6:	b2db      	uxtb	r3, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e095      	b.n	8004206 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ea:	d009      	beq.n	8004100 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	61da      	str	r2, [r3, #28]
 80040f2:	e005      	b.n	8004100 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc ffc6 	bl	80010ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004136:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004140:	d902      	bls.n	8004148 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e002      	b.n	800414e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800414c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004156:	d007      	beq.n	8004168 <HAL_SPI_Init+0xa0>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004160:	d002      	beq.n	8004168 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	ea42 0103 	orr.w	r1, r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	0c1b      	lsrs	r3, r3, #16
 80041c4:	f003 0204 	and.w	r2, r3, #4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041e4:	ea42 0103 	orr.w	r1, r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e040      	b.n	80042a2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7fc ff7f 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2224      	movs	r2, #36	; 0x24
 800423a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fb1b 	bl	8004888 <UART_SetConfig>
 8004252:	4603      	mov	r3, r0
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e022      	b.n	80042a2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fd99 	bl	8004d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004278:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004288:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fe20 	bl	8004ee0 <UART_CheckIdleState>
 80042a0:	4603      	mov	r3, r0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	4613      	mov	r3, r2
 80042b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d166      	bne.n	8004390 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_UART_Transmit_DMA+0x22>
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e05f      	b.n	8004392 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Transmit_DMA+0x34>
 80042dc:	2302      	movs	r3, #2
 80042de:	e058      	b.n	8004392 <HAL_UART_Transmit_DMA+0xe6>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	88fa      	ldrh	r2, [r7, #6]
 80042f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	88fa      	ldrh	r2, [r7, #6]
 80042fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2221      	movs	r2, #33	; 0x21
 800430a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d02b      	beq.n	800436c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004318:	4a20      	ldr	r2, [pc, #128]	; (800439c <HAL_UART_Transmit_DMA+0xf0>)
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004320:	4a1f      	ldr	r2, [pc, #124]	; (80043a0 <HAL_UART_Transmit_DMA+0xf4>)
 8004322:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004328:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <HAL_UART_Transmit_DMA+0xf8>)
 800432a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004330:	2200      	movs	r2, #0
 8004332:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433c:	4619      	mov	r1, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3328      	adds	r3, #40	; 0x28
 8004344:	461a      	mov	r2, r3
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	f7fd fb24 	bl	8001994 <HAL_DMA_Start_IT>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00c      	beq.n	800436c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2210      	movs	r2, #16
 8004356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e012      	b.n	8004392 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2240      	movs	r2, #64	; 0x40
 8004372:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800438a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8004390:	2302      	movs	r3, #2
  }
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	080051cd 	.word	0x080051cd
 80043a0:	08005221 	.word	0x08005221
 80043a4:	0800530d 	.word	0x0800530d

080043a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d131      	bne.n	8004422 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_UART_Receive_DMA+0x22>
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e02a      	b.n	8004424 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_UART_Receive_DMA+0x34>
 80043d8:	2302      	movs	r3, #2
 80043da:	e023      	b.n	8004424 <HAL_UART_Receive_DMA+0x7c>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a0f      	ldr	r2, [pc, #60]	; (800442c <HAL_UART_Receive_DMA+0x84>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004410:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	461a      	mov	r2, r3
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fe27 	bl	800506c <UART_Start_Receive_DMA>
 800441e:	4603      	mov	r3, r0
 8004420:	e000      	b.n	8004424 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40008000 	.word	0x40008000

08004430 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	f640 030f 	movw	r3, #2063	; 0x80f
 8004456:	4013      	ands	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d113      	bne.n	8004488 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00e      	beq.n	8004488 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d009      	beq.n	8004488 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 81ce 	beq.w	800481a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	4798      	blx	r3
      }
      return;
 8004486:	e1c8      	b.n	800481a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80e3 	beq.w	8004656 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d105      	bne.n	80044a6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4ba6      	ldr	r3, [pc, #664]	; (8004738 <HAL_UART_IRQHandler+0x308>)
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80d8 	beq.w	8004656 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d010      	beq.n	80044d2 <HAL_UART_IRQHandler+0xa2>
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2201      	movs	r2, #1
 80044c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_UART_IRQHandler+0xce>
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2202      	movs	r2, #2
 80044ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f4:	f043 0204 	orr.w	r2, r3, #4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d010      	beq.n	800452a <HAL_UART_IRQHandler+0xfa>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2204      	movs	r2, #4
 8004518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004520:	f043 0202 	orr.w	r2, r3, #2
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00b      	beq.n	8004560 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2208      	movs	r2, #8
 800454e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004556:	f043 0208 	orr.w	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004566:	2b00      	cmp	r3, #0
 8004568:	d011      	beq.n	800458e <HAL_UART_IRQHandler+0x15e>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00c      	beq.n	800458e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800457c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8142 	beq.w	800481e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00c      	beq.n	80045be <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	d004      	beq.n	80045de <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d031      	beq.n	8004642 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fdc5 	bl	800516e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d123      	bne.n	800463a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004600:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	2b00      	cmp	r3, #0
 8004608:	d013      	beq.n	8004632 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	4a4b      	ldr	r2, [pc, #300]	; (800473c <HAL_UART_IRQHandler+0x30c>)
 8004610:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4618      	mov	r0, r3
 8004618:	f7fd fa5a 	bl	8001ad0 <HAL_DMA_Abort_IT>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d017      	beq.n	8004652 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800462c:	4610      	mov	r0, r2
 800462e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004630:	e00f      	b.n	8004652 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f912 	bl	800485c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	e00b      	b.n	8004652 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f90e 	bl	800485c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	e007      	b.n	8004652 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f90a 	bl	800485c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004650:	e0e5      	b.n	800481e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004652:	bf00      	nop
    return;
 8004654:	e0e3      	b.n	800481e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465a:	2b01      	cmp	r3, #1
 800465c:	f040 80a9 	bne.w	80047b2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80a3 	beq.w	80047b2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 809d 	beq.w	80047b2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2210      	movs	r2, #16
 800467e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d158      	bne.n	8004740 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004698:	893b      	ldrh	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80c1 	beq.w	8004822 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046a6:	893a      	ldrh	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	f080 80ba 	bcs.w	8004822 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	893a      	ldrh	r2, [r7, #8]
 80046b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d12a      	bne.n	800471c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0201 	bic.w	r2, r2, #1
 80046e4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0210 	bic.w	r2, r2, #16
 8004710:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd f99c 	bl	8001a54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004728:	b29b      	uxth	r3, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	b29b      	uxth	r3, r3
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f89d 	bl	8004870 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004736:	e074      	b.n	8004822 <HAL_UART_IRQHandler+0x3f2>
 8004738:	04000120 	.word	0x04000120
 800473c:	08005389 	.word	0x08005389
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800474c:	b29b      	uxth	r3, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d063      	beq.n	8004826 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800475e:	897b      	ldrh	r3, [r7, #10]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d060      	beq.n	8004826 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004772:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0210 	bic.w	r2, r2, #16
 80047a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f860 	bl	8004870 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047b0:	e039      	b.n	8004826 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <HAL_UART_IRQHandler+0x3a8>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fe08 	bl	80053e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047d6:	e029      	b.n	800482c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01a      	beq.n	800482a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
    }
    return;
 80047fc:	e015      	b.n	800482a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d011      	beq.n	800482c <HAL_UART_IRQHandler+0x3fc>
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00c      	beq.n	800482c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fdce 	bl	80053b4 <UART_EndTransmit_IT>
    return;
 8004818:	e008      	b.n	800482c <HAL_UART_IRQHandler+0x3fc>
      return;
 800481a:	bf00      	nop
 800481c:	e006      	b.n	800482c <HAL_UART_IRQHandler+0x3fc>
    return;
 800481e:	bf00      	nop
 8004820:	e004      	b.n	800482c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004822:	bf00      	nop
 8004824:	e002      	b.n	800482c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004826:	bf00      	nop
 8004828:	e000      	b.n	800482c <HAL_UART_IRQHandler+0x3fc>
    return;
 800482a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop

08004834 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004888:	b5b0      	push	{r4, r5, r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4bad      	ldr	r3, [pc, #692]	; (8004b68 <UART_SetConfig+0x2e0>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	69f9      	ldr	r1, [r7, #28]
 80048bc:	430b      	orrs	r3, r1
 80048be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4aa2      	ldr	r2, [pc, #648]	; (8004b6c <UART_SetConfig+0x2e4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	430a      	orrs	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a99      	ldr	r2, [pc, #612]	; (8004b70 <UART_SetConfig+0x2e8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d121      	bne.n	8004952 <UART_SetConfig+0xca>
 800490e:	4b99      	ldr	r3, [pc, #612]	; (8004b74 <UART_SetConfig+0x2ec>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	2b03      	cmp	r3, #3
 800491a:	d817      	bhi.n	800494c <UART_SetConfig+0xc4>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0x9c>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004935 	.word	0x08004935
 8004928:	08004941 	.word	0x08004941
 800492c:	0800493b 	.word	0x0800493b
 8004930:	08004947 	.word	0x08004947
 8004934:	2301      	movs	r3, #1
 8004936:	76fb      	strb	r3, [r7, #27]
 8004938:	e0e7      	b.n	8004b0a <UART_SetConfig+0x282>
 800493a:	2302      	movs	r3, #2
 800493c:	76fb      	strb	r3, [r7, #27]
 800493e:	e0e4      	b.n	8004b0a <UART_SetConfig+0x282>
 8004940:	2304      	movs	r3, #4
 8004942:	76fb      	strb	r3, [r7, #27]
 8004944:	e0e1      	b.n	8004b0a <UART_SetConfig+0x282>
 8004946:	2308      	movs	r3, #8
 8004948:	76fb      	strb	r3, [r7, #27]
 800494a:	e0de      	b.n	8004b0a <UART_SetConfig+0x282>
 800494c:	2310      	movs	r3, #16
 800494e:	76fb      	strb	r3, [r7, #27]
 8004950:	e0db      	b.n	8004b0a <UART_SetConfig+0x282>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a88      	ldr	r2, [pc, #544]	; (8004b78 <UART_SetConfig+0x2f0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d132      	bne.n	80049c2 <UART_SetConfig+0x13a>
 800495c:	4b85      	ldr	r3, [pc, #532]	; (8004b74 <UART_SetConfig+0x2ec>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d828      	bhi.n	80049bc <UART_SetConfig+0x134>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <UART_SetConfig+0xe8>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	080049a5 	.word	0x080049a5
 8004974:	080049bd 	.word	0x080049bd
 8004978:	080049bd 	.word	0x080049bd
 800497c:	080049bd 	.word	0x080049bd
 8004980:	080049b1 	.word	0x080049b1
 8004984:	080049bd 	.word	0x080049bd
 8004988:	080049bd 	.word	0x080049bd
 800498c:	080049bd 	.word	0x080049bd
 8004990:	080049ab 	.word	0x080049ab
 8004994:	080049bd 	.word	0x080049bd
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049bd 	.word	0x080049bd
 80049a0:	080049b7 	.word	0x080049b7
 80049a4:	2300      	movs	r3, #0
 80049a6:	76fb      	strb	r3, [r7, #27]
 80049a8:	e0af      	b.n	8004b0a <UART_SetConfig+0x282>
 80049aa:	2302      	movs	r3, #2
 80049ac:	76fb      	strb	r3, [r7, #27]
 80049ae:	e0ac      	b.n	8004b0a <UART_SetConfig+0x282>
 80049b0:	2304      	movs	r3, #4
 80049b2:	76fb      	strb	r3, [r7, #27]
 80049b4:	e0a9      	b.n	8004b0a <UART_SetConfig+0x282>
 80049b6:	2308      	movs	r3, #8
 80049b8:	76fb      	strb	r3, [r7, #27]
 80049ba:	e0a6      	b.n	8004b0a <UART_SetConfig+0x282>
 80049bc:	2310      	movs	r3, #16
 80049be:	76fb      	strb	r3, [r7, #27]
 80049c0:	e0a3      	b.n	8004b0a <UART_SetConfig+0x282>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a6d      	ldr	r2, [pc, #436]	; (8004b7c <UART_SetConfig+0x2f4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d120      	bne.n	8004a0e <UART_SetConfig+0x186>
 80049cc:	4b69      	ldr	r3, [pc, #420]	; (8004b74 <UART_SetConfig+0x2ec>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049d6:	2b30      	cmp	r3, #48	; 0x30
 80049d8:	d013      	beq.n	8004a02 <UART_SetConfig+0x17a>
 80049da:	2b30      	cmp	r3, #48	; 0x30
 80049dc:	d814      	bhi.n	8004a08 <UART_SetConfig+0x180>
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d009      	beq.n	80049f6 <UART_SetConfig+0x16e>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d810      	bhi.n	8004a08 <UART_SetConfig+0x180>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <UART_SetConfig+0x168>
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d006      	beq.n	80049fc <UART_SetConfig+0x174>
 80049ee:	e00b      	b.n	8004a08 <UART_SetConfig+0x180>
 80049f0:	2300      	movs	r3, #0
 80049f2:	76fb      	strb	r3, [r7, #27]
 80049f4:	e089      	b.n	8004b0a <UART_SetConfig+0x282>
 80049f6:	2302      	movs	r3, #2
 80049f8:	76fb      	strb	r3, [r7, #27]
 80049fa:	e086      	b.n	8004b0a <UART_SetConfig+0x282>
 80049fc:	2304      	movs	r3, #4
 80049fe:	76fb      	strb	r3, [r7, #27]
 8004a00:	e083      	b.n	8004b0a <UART_SetConfig+0x282>
 8004a02:	2308      	movs	r3, #8
 8004a04:	76fb      	strb	r3, [r7, #27]
 8004a06:	e080      	b.n	8004b0a <UART_SetConfig+0x282>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	76fb      	strb	r3, [r7, #27]
 8004a0c:	e07d      	b.n	8004b0a <UART_SetConfig+0x282>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a5b      	ldr	r2, [pc, #364]	; (8004b80 <UART_SetConfig+0x2f8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d120      	bne.n	8004a5a <UART_SetConfig+0x1d2>
 8004a18:	4b56      	ldr	r3, [pc, #344]	; (8004b74 <UART_SetConfig+0x2ec>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a22:	2bc0      	cmp	r3, #192	; 0xc0
 8004a24:	d013      	beq.n	8004a4e <UART_SetConfig+0x1c6>
 8004a26:	2bc0      	cmp	r3, #192	; 0xc0
 8004a28:	d814      	bhi.n	8004a54 <UART_SetConfig+0x1cc>
 8004a2a:	2b80      	cmp	r3, #128	; 0x80
 8004a2c:	d009      	beq.n	8004a42 <UART_SetConfig+0x1ba>
 8004a2e:	2b80      	cmp	r3, #128	; 0x80
 8004a30:	d810      	bhi.n	8004a54 <UART_SetConfig+0x1cc>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <UART_SetConfig+0x1b4>
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d006      	beq.n	8004a48 <UART_SetConfig+0x1c0>
 8004a3a:	e00b      	b.n	8004a54 <UART_SetConfig+0x1cc>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	76fb      	strb	r3, [r7, #27]
 8004a40:	e063      	b.n	8004b0a <UART_SetConfig+0x282>
 8004a42:	2302      	movs	r3, #2
 8004a44:	76fb      	strb	r3, [r7, #27]
 8004a46:	e060      	b.n	8004b0a <UART_SetConfig+0x282>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	76fb      	strb	r3, [r7, #27]
 8004a4c:	e05d      	b.n	8004b0a <UART_SetConfig+0x282>
 8004a4e:	2308      	movs	r3, #8
 8004a50:	76fb      	strb	r3, [r7, #27]
 8004a52:	e05a      	b.n	8004b0a <UART_SetConfig+0x282>
 8004a54:	2310      	movs	r3, #16
 8004a56:	76fb      	strb	r3, [r7, #27]
 8004a58:	e057      	b.n	8004b0a <UART_SetConfig+0x282>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a49      	ldr	r2, [pc, #292]	; (8004b84 <UART_SetConfig+0x2fc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d125      	bne.n	8004ab0 <UART_SetConfig+0x228>
 8004a64:	4b43      	ldr	r3, [pc, #268]	; (8004b74 <UART_SetConfig+0x2ec>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a72:	d017      	beq.n	8004aa4 <UART_SetConfig+0x21c>
 8004a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a78:	d817      	bhi.n	8004aaa <UART_SetConfig+0x222>
 8004a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a7e:	d00b      	beq.n	8004a98 <UART_SetConfig+0x210>
 8004a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a84:	d811      	bhi.n	8004aaa <UART_SetConfig+0x222>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <UART_SetConfig+0x20a>
 8004a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8e:	d006      	beq.n	8004a9e <UART_SetConfig+0x216>
 8004a90:	e00b      	b.n	8004aaa <UART_SetConfig+0x222>
 8004a92:	2300      	movs	r3, #0
 8004a94:	76fb      	strb	r3, [r7, #27]
 8004a96:	e038      	b.n	8004b0a <UART_SetConfig+0x282>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	76fb      	strb	r3, [r7, #27]
 8004a9c:	e035      	b.n	8004b0a <UART_SetConfig+0x282>
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	76fb      	strb	r3, [r7, #27]
 8004aa2:	e032      	b.n	8004b0a <UART_SetConfig+0x282>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	76fb      	strb	r3, [r7, #27]
 8004aa8:	e02f      	b.n	8004b0a <UART_SetConfig+0x282>
 8004aaa:	2310      	movs	r3, #16
 8004aac:	76fb      	strb	r3, [r7, #27]
 8004aae:	e02c      	b.n	8004b0a <UART_SetConfig+0x282>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <UART_SetConfig+0x2e4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d125      	bne.n	8004b06 <UART_SetConfig+0x27e>
 8004aba:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <UART_SetConfig+0x2ec>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ac8:	d017      	beq.n	8004afa <UART_SetConfig+0x272>
 8004aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ace:	d817      	bhi.n	8004b00 <UART_SetConfig+0x278>
 8004ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad4:	d00b      	beq.n	8004aee <UART_SetConfig+0x266>
 8004ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ada:	d811      	bhi.n	8004b00 <UART_SetConfig+0x278>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <UART_SetConfig+0x260>
 8004ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae4:	d006      	beq.n	8004af4 <UART_SetConfig+0x26c>
 8004ae6:	e00b      	b.n	8004b00 <UART_SetConfig+0x278>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	76fb      	strb	r3, [r7, #27]
 8004aec:	e00d      	b.n	8004b0a <UART_SetConfig+0x282>
 8004aee:	2302      	movs	r3, #2
 8004af0:	76fb      	strb	r3, [r7, #27]
 8004af2:	e00a      	b.n	8004b0a <UART_SetConfig+0x282>
 8004af4:	2304      	movs	r3, #4
 8004af6:	76fb      	strb	r3, [r7, #27]
 8004af8:	e007      	b.n	8004b0a <UART_SetConfig+0x282>
 8004afa:	2308      	movs	r3, #8
 8004afc:	76fb      	strb	r3, [r7, #27]
 8004afe:	e004      	b.n	8004b0a <UART_SetConfig+0x282>
 8004b00:	2310      	movs	r3, #16
 8004b02:	76fb      	strb	r3, [r7, #27]
 8004b04:	e001      	b.n	8004b0a <UART_SetConfig+0x282>
 8004b06:	2310      	movs	r3, #16
 8004b08:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <UART_SetConfig+0x2e4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	f040 8087 	bne.w	8004c24 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b16:	7efb      	ldrb	r3, [r7, #27]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d837      	bhi.n	8004b8c <UART_SetConfig+0x304>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <UART_SetConfig+0x29c>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b8d 	.word	0x08004b8d
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b8d 	.word	0x08004b8d
 8004b34:	08004b57 	.word	0x08004b57
 8004b38:	08004b8d 	.word	0x08004b8d
 8004b3c:	08004b8d 	.word	0x08004b8d
 8004b40:	08004b8d 	.word	0x08004b8d
 8004b44:	08004b5f 	.word	0x08004b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7fe f8b6 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 8004b4c:	6178      	str	r0, [r7, #20]
        break;
 8004b4e:	e022      	b.n	8004b96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b50:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <UART_SetConfig+0x300>)
 8004b52:	617b      	str	r3, [r7, #20]
        break;
 8004b54:	e01f      	b.n	8004b96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b56:	f7fe f817 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8004b5a:	6178      	str	r0, [r7, #20]
        break;
 8004b5c:	e01b      	b.n	8004b96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b62:	617b      	str	r3, [r7, #20]
        break;
 8004b64:	e017      	b.n	8004b96 <UART_SetConfig+0x30e>
 8004b66:	bf00      	nop
 8004b68:	efff69f3 	.word	0xefff69f3
 8004b6c:	40008000 	.word	0x40008000
 8004b70:	40013800 	.word	0x40013800
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40004400 	.word	0x40004400
 8004b7c:	40004800 	.word	0x40004800
 8004b80:	40004c00 	.word	0x40004c00
 8004b84:	40005000 	.word	0x40005000
 8004b88:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	76bb      	strb	r3, [r7, #26]
        break;
 8004b94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80f1 	beq.w	8004d80 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4413      	add	r3, r2
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d305      	bcc.n	8004bba <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d902      	bls.n	8004bc0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	76bb      	strb	r3, [r7, #26]
 8004bbe:	e0df      	b.n	8004d80 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	020b      	lsls	r3, r1, #8
 8004bd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bd6:	0202      	lsls	r2, r0, #8
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	6849      	ldr	r1, [r1, #4]
 8004bdc:	0849      	lsrs	r1, r1, #1
 8004bde:	4608      	mov	r0, r1
 8004be0:	f04f 0100 	mov.w	r1, #0
 8004be4:	1814      	adds	r4, r2, r0
 8004be6:	eb43 0501 	adc.w	r5, r3, r1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f7fb fb42 	bl	8000280 <__aeabi_uldivmod>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4613      	mov	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c0a:	d308      	bcc.n	8004c1e <UART_SetConfig+0x396>
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c12:	d204      	bcs.n	8004c1e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	60da      	str	r2, [r3, #12]
 8004c1c:	e0b0      	b.n	8004d80 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	76bb      	strb	r3, [r7, #26]
 8004c22:	e0ad      	b.n	8004d80 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2c:	d15c      	bne.n	8004ce8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004c2e:	7efb      	ldrb	r3, [r7, #27]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d828      	bhi.n	8004c86 <UART_SetConfig+0x3fe>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <UART_SetConfig+0x3b4>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c71 	.word	0x08004c71
 8004c48:	08004c87 	.word	0x08004c87
 8004c4c:	08004c77 	.word	0x08004c77
 8004c50:	08004c87 	.word	0x08004c87
 8004c54:	08004c87 	.word	0x08004c87
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7fe f82a 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 8004c64:	6178      	str	r0, [r7, #20]
        break;
 8004c66:	e013      	b.n	8004c90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c68:	f7fe f83c 	bl	8002ce4 <HAL_RCC_GetPCLK2Freq>
 8004c6c:	6178      	str	r0, [r7, #20]
        break;
 8004c6e:	e00f      	b.n	8004c90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b49      	ldr	r3, [pc, #292]	; (8004d98 <UART_SetConfig+0x510>)
 8004c72:	617b      	str	r3, [r7, #20]
        break;
 8004c74:	e00c      	b.n	8004c90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fd ff87 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8004c7a:	6178      	str	r0, [r7, #20]
        break;
 8004c7c:	e008      	b.n	8004c90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	617b      	str	r3, [r7, #20]
        break;
 8004c84:	e004      	b.n	8004c90 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	76bb      	strb	r3, [r7, #26]
        break;
 8004c8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d074      	beq.n	8004d80 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	005a      	lsls	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	441a      	add	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	2b0f      	cmp	r3, #15
 8004cb2:	d916      	bls.n	8004ce2 <UART_SetConfig+0x45a>
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cba:	d212      	bcs.n	8004ce2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f023 030f 	bic.w	r3, r3, #15
 8004cc4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	89fb      	ldrh	r3, [r7, #14]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	89fa      	ldrh	r2, [r7, #14]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	e04e      	b.n	8004d80 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	76bb      	strb	r3, [r7, #26]
 8004ce6:	e04b      	b.n	8004d80 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce8:	7efb      	ldrb	r3, [r7, #27]
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d827      	bhi.n	8004d3e <UART_SetConfig+0x4b6>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0x46c>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	08004d21 	.word	0x08004d21
 8004cfc:	08004d29 	.word	0x08004d29
 8004d00:	08004d3f 	.word	0x08004d3f
 8004d04:	08004d2f 	.word	0x08004d2f
 8004d08:	08004d3f 	.word	0x08004d3f
 8004d0c:	08004d3f 	.word	0x08004d3f
 8004d10:	08004d3f 	.word	0x08004d3f
 8004d14:	08004d37 	.word	0x08004d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7fd ffce 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	6178      	str	r0, [r7, #20]
        break;
 8004d1e:	e013      	b.n	8004d48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d20:	f7fd ffe0 	bl	8002ce4 <HAL_RCC_GetPCLK2Freq>
 8004d24:	6178      	str	r0, [r7, #20]
        break;
 8004d26:	e00f      	b.n	8004d48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <UART_SetConfig+0x510>)
 8004d2a:	617b      	str	r3, [r7, #20]
        break;
 8004d2c:	e00c      	b.n	8004d48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2e:	f7fd ff2b 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8004d32:	6178      	str	r0, [r7, #20]
        break;
 8004d34:	e008      	b.n	8004d48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3a:	617b      	str	r3, [r7, #20]
        break;
 8004d3c:	e004      	b.n	8004d48 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	76bb      	strb	r3, [r7, #26]
        break;
 8004d46:	bf00      	nop
    }

    if (pclk != 0U)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d018      	beq.n	8004d80 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085a      	lsrs	r2, r3, #1
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	441a      	add	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	d908      	bls.n	8004d7c <UART_SetConfig+0x4f4>
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d70:	d204      	bcs.n	8004d7c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	e001      	b.n	8004d80 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bdb0      	pop	{r4, r5, r7, pc}
 8004d96:	bf00      	nop
 8004d98:	00f42400 	.word	0x00f42400

08004d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9a:	d10a      	bne.n	8004eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef0:	f7fc fb56 	bl	80015a0 <HAL_GetTick>
 8004ef4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d10e      	bne.n	8004f22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f82d 	bl	8004f72 <UART_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e023      	b.n	8004f6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d10e      	bne.n	8004f4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f817 	bl	8004f72 <UART_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e00d      	b.n	8004f6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	603b      	str	r3, [r7, #0]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f82:	e05e      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d05a      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8c:	f7fc fb08 	bl	80015a0 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d11b      	bne.n	8004fda <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fb0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0201 	bic.w	r2, r2, #1
 8004fc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e043      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02c      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff6:	d124      	bne.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005000:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005010:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0201 	bic.w	r2, r2, #1
 8005020:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e00f      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4013      	ands	r3, r2
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	429a      	cmp	r2, r3
 800505e:	d091      	beq.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2222      	movs	r2, #34	; 0x22
 8005094:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	2b00      	cmp	r3, #0
 800509c:	d02b      	beq.n	80050f6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	4a25      	ldr	r2, [pc, #148]	; (8005138 <UART_Start_Receive_DMA+0xcc>)
 80050a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	4a24      	ldr	r2, [pc, #144]	; (800513c <UART_Start_Receive_DMA+0xd0>)
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	4a23      	ldr	r2, [pc, #140]	; (8005140 <UART_Start_Receive_DMA+0xd4>)
 80050b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	2200      	movs	r2, #0
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3324      	adds	r3, #36	; 0x24
 80050c8:	4619      	mov	r1, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	461a      	mov	r2, r3
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	f7fc fc5f 	bl	8001994 <HAL_DMA_Start_IT>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00c      	beq.n	80050f6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2210      	movs	r2, #16
 80050e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e01c      	b.n	8005130 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800512c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	0800523d 	.word	0x0800523d
 800513c:	080052d5 	.word	0x080052d5
 8005140:	0800530d 	.word	0x0800530d

08005144 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800515a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005184:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519a:	2b01      	cmp	r3, #1
 800519c:	d107      	bne.n	80051ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0210 	bic.w	r2, r2, #16
 80051ac:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	665a      	str	r2, [r3, #100]	; 0x64
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d114      	bne.n	8005212 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051fe:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800520e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005210:	e002      	b.n	8005218 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7fb f9b0 	bl	8000578 <HAL_UART_TxCpltCallback>
}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff fb00 	bl	8004834 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	d12a      	bne.n	80052ae <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800526e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0201 	bic.w	r2, r2, #1
 800527e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529a:	2b01      	cmp	r3, #1
 800529c:	d107      	bne.n	80052ae <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0210 	bic.w	r2, r2, #16
 80052ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052bc:	4619      	mov	r1, r3
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff fad6 	bl	8004870 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052c4:	e002      	b.n	80052cc <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7fb f966 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d109      	bne.n	80052fe <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4619      	mov	r1, r3
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff faba 	bl	8004870 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052fc:	e002      	b.n	8005304 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff faa2 	bl	8004848 <HAL_UART_RxHalfCpltCallback>
}
 8005304:	bf00      	nop
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800531e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005324:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b80      	cmp	r3, #128	; 0x80
 8005332:	d109      	bne.n	8005348 <UART_DMAError+0x3c>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b21      	cmp	r3, #33	; 0x21
 8005338:	d106      	bne.n	8005348 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2200      	movs	r2, #0
 800533e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005342:	6978      	ldr	r0, [r7, #20]
 8005344:	f7ff fefe 	bl	8005144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d109      	bne.n	800536a <UART_DMAError+0x5e>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b22      	cmp	r3, #34	; 0x22
 800535a:	d106      	bne.n	800536a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2200      	movs	r2, #0
 8005360:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005364:	6978      	ldr	r0, [r7, #20]
 8005366:	f7ff ff02 	bl	800516e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005370:	f043 0210 	orr.w	r2, r3, #16
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800537a:	6978      	ldr	r0, [r7, #20]
 800537c:	f7ff fa6e 	bl	800485c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005380:	bf00      	nop
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff fa58 	bl	800485c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fb f8cd 	bl	8000578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <__errno>:
 80053fc:	4b01      	ldr	r3, [pc, #4]	; (8005404 <__errno+0x8>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	2000000c 	.word	0x2000000c

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4d0d      	ldr	r5, [pc, #52]	; (8005440 <__libc_init_array+0x38>)
 800540c:	4c0d      	ldr	r4, [pc, #52]	; (8005444 <__libc_init_array+0x3c>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	2600      	movs	r6, #0
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	4d0b      	ldr	r5, [pc, #44]	; (8005448 <__libc_init_array+0x40>)
 800541a:	4c0c      	ldr	r4, [pc, #48]	; (800544c <__libc_init_array+0x44>)
 800541c:	f000 fc62 	bl	8005ce4 <_init>
 8005420:	1b64      	subs	r4, r4, r5
 8005422:	10a4      	asrs	r4, r4, #2
 8005424:	2600      	movs	r6, #0
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f855 3b04 	ldr.w	r3, [r5], #4
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	08005ef4 	.word	0x08005ef4
 8005444:	08005ef4 	.word	0x08005ef4
 8005448:	08005ef4 	.word	0x08005ef4
 800544c:	08005ef8 	.word	0x08005ef8

08005450 <memset>:
 8005450:	4402      	add	r2, r0
 8005452:	4603      	mov	r3, r0
 8005454:	4293      	cmp	r3, r2
 8005456:	d100      	bne.n	800545a <memset+0xa>
 8005458:	4770      	bx	lr
 800545a:	f803 1b01 	strb.w	r1, [r3], #1
 800545e:	e7f9      	b.n	8005454 <memset+0x4>

08005460 <sniprintf>:
 8005460:	b40c      	push	{r2, r3}
 8005462:	b530      	push	{r4, r5, lr}
 8005464:	4b17      	ldr	r3, [pc, #92]	; (80054c4 <sniprintf+0x64>)
 8005466:	1e0c      	subs	r4, r1, #0
 8005468:	681d      	ldr	r5, [r3, #0]
 800546a:	b09d      	sub	sp, #116	; 0x74
 800546c:	da08      	bge.n	8005480 <sniprintf+0x20>
 800546e:	238b      	movs	r3, #139	; 0x8b
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	f04f 30ff 	mov.w	r0, #4294967295
 8005476:	b01d      	add	sp, #116	; 0x74
 8005478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800547c:	b002      	add	sp, #8
 800547e:	4770      	bx	lr
 8005480:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005484:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005488:	bf14      	ite	ne
 800548a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800548e:	4623      	moveq	r3, r4
 8005490:	9304      	str	r3, [sp, #16]
 8005492:	9307      	str	r3, [sp, #28]
 8005494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005498:	9002      	str	r0, [sp, #8]
 800549a:	9006      	str	r0, [sp, #24]
 800549c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80054a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054a2:	ab21      	add	r3, sp, #132	; 0x84
 80054a4:	a902      	add	r1, sp, #8
 80054a6:	4628      	mov	r0, r5
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	f000 f869 	bl	8005580 <_svfiprintf_r>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	bfbc      	itt	lt
 80054b2:	238b      	movlt	r3, #139	; 0x8b
 80054b4:	602b      	strlt	r3, [r5, #0]
 80054b6:	2c00      	cmp	r4, #0
 80054b8:	d0dd      	beq.n	8005476 <sniprintf+0x16>
 80054ba:	9b02      	ldr	r3, [sp, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	e7d9      	b.n	8005476 <sniprintf+0x16>
 80054c2:	bf00      	nop
 80054c4:	2000000c 	.word	0x2000000c

080054c8 <__ssputs_r>:
 80054c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054cc:	688e      	ldr	r6, [r1, #8]
 80054ce:	429e      	cmp	r6, r3
 80054d0:	4682      	mov	sl, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	4690      	mov	r8, r2
 80054d6:	461f      	mov	r7, r3
 80054d8:	d838      	bhi.n	800554c <__ssputs_r+0x84>
 80054da:	898a      	ldrh	r2, [r1, #12]
 80054dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054e0:	d032      	beq.n	8005548 <__ssputs_r+0x80>
 80054e2:	6825      	ldr	r5, [r4, #0]
 80054e4:	6909      	ldr	r1, [r1, #16]
 80054e6:	eba5 0901 	sub.w	r9, r5, r1
 80054ea:	6965      	ldr	r5, [r4, #20]
 80054ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054f4:	3301      	adds	r3, #1
 80054f6:	444b      	add	r3, r9
 80054f8:	106d      	asrs	r5, r5, #1
 80054fa:	429d      	cmp	r5, r3
 80054fc:	bf38      	it	cc
 80054fe:	461d      	movcc	r5, r3
 8005500:	0553      	lsls	r3, r2, #21
 8005502:	d531      	bpl.n	8005568 <__ssputs_r+0xa0>
 8005504:	4629      	mov	r1, r5
 8005506:	f000 fb47 	bl	8005b98 <_malloc_r>
 800550a:	4606      	mov	r6, r0
 800550c:	b950      	cbnz	r0, 8005524 <__ssputs_r+0x5c>
 800550e:	230c      	movs	r3, #12
 8005510:	f8ca 3000 	str.w	r3, [sl]
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551a:	81a3      	strh	r3, [r4, #12]
 800551c:	f04f 30ff 	mov.w	r0, #4294967295
 8005520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005524:	6921      	ldr	r1, [r4, #16]
 8005526:	464a      	mov	r2, r9
 8005528:	f000 fabe 	bl	8005aa8 <memcpy>
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005536:	81a3      	strh	r3, [r4, #12]
 8005538:	6126      	str	r6, [r4, #16]
 800553a:	6165      	str	r5, [r4, #20]
 800553c:	444e      	add	r6, r9
 800553e:	eba5 0509 	sub.w	r5, r5, r9
 8005542:	6026      	str	r6, [r4, #0]
 8005544:	60a5      	str	r5, [r4, #8]
 8005546:	463e      	mov	r6, r7
 8005548:	42be      	cmp	r6, r7
 800554a:	d900      	bls.n	800554e <__ssputs_r+0x86>
 800554c:	463e      	mov	r6, r7
 800554e:	4632      	mov	r2, r6
 8005550:	6820      	ldr	r0, [r4, #0]
 8005552:	4641      	mov	r1, r8
 8005554:	f000 fab6 	bl	8005ac4 <memmove>
 8005558:	68a3      	ldr	r3, [r4, #8]
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	1b9b      	subs	r3, r3, r6
 800555e:	4432      	add	r2, r6
 8005560:	60a3      	str	r3, [r4, #8]
 8005562:	6022      	str	r2, [r4, #0]
 8005564:	2000      	movs	r0, #0
 8005566:	e7db      	b.n	8005520 <__ssputs_r+0x58>
 8005568:	462a      	mov	r2, r5
 800556a:	f000 fb6f 	bl	8005c4c <_realloc_r>
 800556e:	4606      	mov	r6, r0
 8005570:	2800      	cmp	r0, #0
 8005572:	d1e1      	bne.n	8005538 <__ssputs_r+0x70>
 8005574:	6921      	ldr	r1, [r4, #16]
 8005576:	4650      	mov	r0, sl
 8005578:	f000 fabe 	bl	8005af8 <_free_r>
 800557c:	e7c7      	b.n	800550e <__ssputs_r+0x46>
	...

08005580 <_svfiprintf_r>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	4698      	mov	r8, r3
 8005586:	898b      	ldrh	r3, [r1, #12]
 8005588:	061b      	lsls	r3, r3, #24
 800558a:	b09d      	sub	sp, #116	; 0x74
 800558c:	4607      	mov	r7, r0
 800558e:	460d      	mov	r5, r1
 8005590:	4614      	mov	r4, r2
 8005592:	d50e      	bpl.n	80055b2 <_svfiprintf_r+0x32>
 8005594:	690b      	ldr	r3, [r1, #16]
 8005596:	b963      	cbnz	r3, 80055b2 <_svfiprintf_r+0x32>
 8005598:	2140      	movs	r1, #64	; 0x40
 800559a:	f000 fafd 	bl	8005b98 <_malloc_r>
 800559e:	6028      	str	r0, [r5, #0]
 80055a0:	6128      	str	r0, [r5, #16]
 80055a2:	b920      	cbnz	r0, 80055ae <_svfiprintf_r+0x2e>
 80055a4:	230c      	movs	r3, #12
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	e0d1      	b.n	8005752 <_svfiprintf_r+0x1d2>
 80055ae:	2340      	movs	r3, #64	; 0x40
 80055b0:	616b      	str	r3, [r5, #20]
 80055b2:	2300      	movs	r3, #0
 80055b4:	9309      	str	r3, [sp, #36]	; 0x24
 80055b6:	2320      	movs	r3, #32
 80055b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80055c0:	2330      	movs	r3, #48	; 0x30
 80055c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800576c <_svfiprintf_r+0x1ec>
 80055c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055ca:	f04f 0901 	mov.w	r9, #1
 80055ce:	4623      	mov	r3, r4
 80055d0:	469a      	mov	sl, r3
 80055d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055d6:	b10a      	cbz	r2, 80055dc <_svfiprintf_r+0x5c>
 80055d8:	2a25      	cmp	r2, #37	; 0x25
 80055da:	d1f9      	bne.n	80055d0 <_svfiprintf_r+0x50>
 80055dc:	ebba 0b04 	subs.w	fp, sl, r4
 80055e0:	d00b      	beq.n	80055fa <_svfiprintf_r+0x7a>
 80055e2:	465b      	mov	r3, fp
 80055e4:	4622      	mov	r2, r4
 80055e6:	4629      	mov	r1, r5
 80055e8:	4638      	mov	r0, r7
 80055ea:	f7ff ff6d 	bl	80054c8 <__ssputs_r>
 80055ee:	3001      	adds	r0, #1
 80055f0:	f000 80aa 	beq.w	8005748 <_svfiprintf_r+0x1c8>
 80055f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055f6:	445a      	add	r2, fp
 80055f8:	9209      	str	r2, [sp, #36]	; 0x24
 80055fa:	f89a 3000 	ldrb.w	r3, [sl]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 80a2 	beq.w	8005748 <_svfiprintf_r+0x1c8>
 8005604:	2300      	movs	r3, #0
 8005606:	f04f 32ff 	mov.w	r2, #4294967295
 800560a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800560e:	f10a 0a01 	add.w	sl, sl, #1
 8005612:	9304      	str	r3, [sp, #16]
 8005614:	9307      	str	r3, [sp, #28]
 8005616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800561a:	931a      	str	r3, [sp, #104]	; 0x68
 800561c:	4654      	mov	r4, sl
 800561e:	2205      	movs	r2, #5
 8005620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005624:	4851      	ldr	r0, [pc, #324]	; (800576c <_svfiprintf_r+0x1ec>)
 8005626:	f7fa fddb 	bl	80001e0 <memchr>
 800562a:	9a04      	ldr	r2, [sp, #16]
 800562c:	b9d8      	cbnz	r0, 8005666 <_svfiprintf_r+0xe6>
 800562e:	06d0      	lsls	r0, r2, #27
 8005630:	bf44      	itt	mi
 8005632:	2320      	movmi	r3, #32
 8005634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005638:	0711      	lsls	r1, r2, #28
 800563a:	bf44      	itt	mi
 800563c:	232b      	movmi	r3, #43	; 0x2b
 800563e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005642:	f89a 3000 	ldrb.w	r3, [sl]
 8005646:	2b2a      	cmp	r3, #42	; 0x2a
 8005648:	d015      	beq.n	8005676 <_svfiprintf_r+0xf6>
 800564a:	9a07      	ldr	r2, [sp, #28]
 800564c:	4654      	mov	r4, sl
 800564e:	2000      	movs	r0, #0
 8005650:	f04f 0c0a 	mov.w	ip, #10
 8005654:	4621      	mov	r1, r4
 8005656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800565a:	3b30      	subs	r3, #48	; 0x30
 800565c:	2b09      	cmp	r3, #9
 800565e:	d94e      	bls.n	80056fe <_svfiprintf_r+0x17e>
 8005660:	b1b0      	cbz	r0, 8005690 <_svfiprintf_r+0x110>
 8005662:	9207      	str	r2, [sp, #28]
 8005664:	e014      	b.n	8005690 <_svfiprintf_r+0x110>
 8005666:	eba0 0308 	sub.w	r3, r0, r8
 800566a:	fa09 f303 	lsl.w	r3, r9, r3
 800566e:	4313      	orrs	r3, r2
 8005670:	9304      	str	r3, [sp, #16]
 8005672:	46a2      	mov	sl, r4
 8005674:	e7d2      	b.n	800561c <_svfiprintf_r+0x9c>
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	1d19      	adds	r1, r3, #4
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	9103      	str	r1, [sp, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	bfbb      	ittet	lt
 8005682:	425b      	neglt	r3, r3
 8005684:	f042 0202 	orrlt.w	r2, r2, #2
 8005688:	9307      	strge	r3, [sp, #28]
 800568a:	9307      	strlt	r3, [sp, #28]
 800568c:	bfb8      	it	lt
 800568e:	9204      	strlt	r2, [sp, #16]
 8005690:	7823      	ldrb	r3, [r4, #0]
 8005692:	2b2e      	cmp	r3, #46	; 0x2e
 8005694:	d10c      	bne.n	80056b0 <_svfiprintf_r+0x130>
 8005696:	7863      	ldrb	r3, [r4, #1]
 8005698:	2b2a      	cmp	r3, #42	; 0x2a
 800569a:	d135      	bne.n	8005708 <_svfiprintf_r+0x188>
 800569c:	9b03      	ldr	r3, [sp, #12]
 800569e:	1d1a      	adds	r2, r3, #4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	9203      	str	r2, [sp, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bfb8      	it	lt
 80056a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80056ac:	3402      	adds	r4, #2
 80056ae:	9305      	str	r3, [sp, #20]
 80056b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800577c <_svfiprintf_r+0x1fc>
 80056b4:	7821      	ldrb	r1, [r4, #0]
 80056b6:	2203      	movs	r2, #3
 80056b8:	4650      	mov	r0, sl
 80056ba:	f7fa fd91 	bl	80001e0 <memchr>
 80056be:	b140      	cbz	r0, 80056d2 <_svfiprintf_r+0x152>
 80056c0:	2340      	movs	r3, #64	; 0x40
 80056c2:	eba0 000a 	sub.w	r0, r0, sl
 80056c6:	fa03 f000 	lsl.w	r0, r3, r0
 80056ca:	9b04      	ldr	r3, [sp, #16]
 80056cc:	4303      	orrs	r3, r0
 80056ce:	3401      	adds	r4, #1
 80056d0:	9304      	str	r3, [sp, #16]
 80056d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d6:	4826      	ldr	r0, [pc, #152]	; (8005770 <_svfiprintf_r+0x1f0>)
 80056d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056dc:	2206      	movs	r2, #6
 80056de:	f7fa fd7f 	bl	80001e0 <memchr>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d038      	beq.n	8005758 <_svfiprintf_r+0x1d8>
 80056e6:	4b23      	ldr	r3, [pc, #140]	; (8005774 <_svfiprintf_r+0x1f4>)
 80056e8:	bb1b      	cbnz	r3, 8005732 <_svfiprintf_r+0x1b2>
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	3307      	adds	r3, #7
 80056ee:	f023 0307 	bic.w	r3, r3, #7
 80056f2:	3308      	adds	r3, #8
 80056f4:	9303      	str	r3, [sp, #12]
 80056f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f8:	4433      	add	r3, r6
 80056fa:	9309      	str	r3, [sp, #36]	; 0x24
 80056fc:	e767      	b.n	80055ce <_svfiprintf_r+0x4e>
 80056fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005702:	460c      	mov	r4, r1
 8005704:	2001      	movs	r0, #1
 8005706:	e7a5      	b.n	8005654 <_svfiprintf_r+0xd4>
 8005708:	2300      	movs	r3, #0
 800570a:	3401      	adds	r4, #1
 800570c:	9305      	str	r3, [sp, #20]
 800570e:	4619      	mov	r1, r3
 8005710:	f04f 0c0a 	mov.w	ip, #10
 8005714:	4620      	mov	r0, r4
 8005716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800571a:	3a30      	subs	r2, #48	; 0x30
 800571c:	2a09      	cmp	r2, #9
 800571e:	d903      	bls.n	8005728 <_svfiprintf_r+0x1a8>
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0c5      	beq.n	80056b0 <_svfiprintf_r+0x130>
 8005724:	9105      	str	r1, [sp, #20]
 8005726:	e7c3      	b.n	80056b0 <_svfiprintf_r+0x130>
 8005728:	fb0c 2101 	mla	r1, ip, r1, r2
 800572c:	4604      	mov	r4, r0
 800572e:	2301      	movs	r3, #1
 8005730:	e7f0      	b.n	8005714 <_svfiprintf_r+0x194>
 8005732:	ab03      	add	r3, sp, #12
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	462a      	mov	r2, r5
 8005738:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <_svfiprintf_r+0x1f8>)
 800573a:	a904      	add	r1, sp, #16
 800573c:	4638      	mov	r0, r7
 800573e:	f3af 8000 	nop.w
 8005742:	1c42      	adds	r2, r0, #1
 8005744:	4606      	mov	r6, r0
 8005746:	d1d6      	bne.n	80056f6 <_svfiprintf_r+0x176>
 8005748:	89ab      	ldrh	r3, [r5, #12]
 800574a:	065b      	lsls	r3, r3, #25
 800574c:	f53f af2c 	bmi.w	80055a8 <_svfiprintf_r+0x28>
 8005750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005752:	b01d      	add	sp, #116	; 0x74
 8005754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005758:	ab03      	add	r3, sp, #12
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	462a      	mov	r2, r5
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <_svfiprintf_r+0x1f8>)
 8005760:	a904      	add	r1, sp, #16
 8005762:	4638      	mov	r0, r7
 8005764:	f000 f87a 	bl	800585c <_printf_i>
 8005768:	e7eb      	b.n	8005742 <_svfiprintf_r+0x1c2>
 800576a:	bf00      	nop
 800576c:	08005eb8 	.word	0x08005eb8
 8005770:	08005ec2 	.word	0x08005ec2
 8005774:	00000000 	.word	0x00000000
 8005778:	080054c9 	.word	0x080054c9
 800577c:	08005ebe 	.word	0x08005ebe

08005780 <_printf_common>:
 8005780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	4616      	mov	r6, r2
 8005786:	4699      	mov	r9, r3
 8005788:	688a      	ldr	r2, [r1, #8]
 800578a:	690b      	ldr	r3, [r1, #16]
 800578c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005790:	4293      	cmp	r3, r2
 8005792:	bfb8      	it	lt
 8005794:	4613      	movlt	r3, r2
 8005796:	6033      	str	r3, [r6, #0]
 8005798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800579c:	4607      	mov	r7, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	b10a      	cbz	r2, 80057a6 <_printf_common+0x26>
 80057a2:	3301      	adds	r3, #1
 80057a4:	6033      	str	r3, [r6, #0]
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	0699      	lsls	r1, r3, #26
 80057aa:	bf42      	ittt	mi
 80057ac:	6833      	ldrmi	r3, [r6, #0]
 80057ae:	3302      	addmi	r3, #2
 80057b0:	6033      	strmi	r3, [r6, #0]
 80057b2:	6825      	ldr	r5, [r4, #0]
 80057b4:	f015 0506 	ands.w	r5, r5, #6
 80057b8:	d106      	bne.n	80057c8 <_printf_common+0x48>
 80057ba:	f104 0a19 	add.w	sl, r4, #25
 80057be:	68e3      	ldr	r3, [r4, #12]
 80057c0:	6832      	ldr	r2, [r6, #0]
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	42ab      	cmp	r3, r5
 80057c6:	dc26      	bgt.n	8005816 <_printf_common+0x96>
 80057c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057cc:	1e13      	subs	r3, r2, #0
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	bf18      	it	ne
 80057d2:	2301      	movne	r3, #1
 80057d4:	0692      	lsls	r2, r2, #26
 80057d6:	d42b      	bmi.n	8005830 <_printf_common+0xb0>
 80057d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057dc:	4649      	mov	r1, r9
 80057de:	4638      	mov	r0, r7
 80057e0:	47c0      	blx	r8
 80057e2:	3001      	adds	r0, #1
 80057e4:	d01e      	beq.n	8005824 <_printf_common+0xa4>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	68e5      	ldr	r5, [r4, #12]
 80057ea:	6832      	ldr	r2, [r6, #0]
 80057ec:	f003 0306 	and.w	r3, r3, #6
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	bf08      	it	eq
 80057f4:	1aad      	subeq	r5, r5, r2
 80057f6:	68a3      	ldr	r3, [r4, #8]
 80057f8:	6922      	ldr	r2, [r4, #16]
 80057fa:	bf0c      	ite	eq
 80057fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005800:	2500      	movne	r5, #0
 8005802:	4293      	cmp	r3, r2
 8005804:	bfc4      	itt	gt
 8005806:	1a9b      	subgt	r3, r3, r2
 8005808:	18ed      	addgt	r5, r5, r3
 800580a:	2600      	movs	r6, #0
 800580c:	341a      	adds	r4, #26
 800580e:	42b5      	cmp	r5, r6
 8005810:	d11a      	bne.n	8005848 <_printf_common+0xc8>
 8005812:	2000      	movs	r0, #0
 8005814:	e008      	b.n	8005828 <_printf_common+0xa8>
 8005816:	2301      	movs	r3, #1
 8005818:	4652      	mov	r2, sl
 800581a:	4649      	mov	r1, r9
 800581c:	4638      	mov	r0, r7
 800581e:	47c0      	blx	r8
 8005820:	3001      	adds	r0, #1
 8005822:	d103      	bne.n	800582c <_printf_common+0xac>
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582c:	3501      	adds	r5, #1
 800582e:	e7c6      	b.n	80057be <_printf_common+0x3e>
 8005830:	18e1      	adds	r1, r4, r3
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	2030      	movs	r0, #48	; 0x30
 8005836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800583a:	4422      	add	r2, r4
 800583c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005844:	3302      	adds	r3, #2
 8005846:	e7c7      	b.n	80057d8 <_printf_common+0x58>
 8005848:	2301      	movs	r3, #1
 800584a:	4622      	mov	r2, r4
 800584c:	4649      	mov	r1, r9
 800584e:	4638      	mov	r0, r7
 8005850:	47c0      	blx	r8
 8005852:	3001      	adds	r0, #1
 8005854:	d0e6      	beq.n	8005824 <_printf_common+0xa4>
 8005856:	3601      	adds	r6, #1
 8005858:	e7d9      	b.n	800580e <_printf_common+0x8e>
	...

0800585c <_printf_i>:
 800585c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	460c      	mov	r4, r1
 8005862:	4691      	mov	r9, r2
 8005864:	7e27      	ldrb	r7, [r4, #24]
 8005866:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005868:	2f78      	cmp	r7, #120	; 0x78
 800586a:	4680      	mov	r8, r0
 800586c:	469a      	mov	sl, r3
 800586e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005872:	d807      	bhi.n	8005884 <_printf_i+0x28>
 8005874:	2f62      	cmp	r7, #98	; 0x62
 8005876:	d80a      	bhi.n	800588e <_printf_i+0x32>
 8005878:	2f00      	cmp	r7, #0
 800587a:	f000 80d8 	beq.w	8005a2e <_printf_i+0x1d2>
 800587e:	2f58      	cmp	r7, #88	; 0x58
 8005880:	f000 80a3 	beq.w	80059ca <_printf_i+0x16e>
 8005884:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800588c:	e03a      	b.n	8005904 <_printf_i+0xa8>
 800588e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005892:	2b15      	cmp	r3, #21
 8005894:	d8f6      	bhi.n	8005884 <_printf_i+0x28>
 8005896:	a001      	add	r0, pc, #4	; (adr r0, 800589c <_printf_i+0x40>)
 8005898:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800589c:	080058f5 	.word	0x080058f5
 80058a0:	08005909 	.word	0x08005909
 80058a4:	08005885 	.word	0x08005885
 80058a8:	08005885 	.word	0x08005885
 80058ac:	08005885 	.word	0x08005885
 80058b0:	08005885 	.word	0x08005885
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005885 	.word	0x08005885
 80058bc:	08005885 	.word	0x08005885
 80058c0:	08005885 	.word	0x08005885
 80058c4:	08005885 	.word	0x08005885
 80058c8:	08005a15 	.word	0x08005a15
 80058cc:	08005939 	.word	0x08005939
 80058d0:	080059f7 	.word	0x080059f7
 80058d4:	08005885 	.word	0x08005885
 80058d8:	08005885 	.word	0x08005885
 80058dc:	08005a37 	.word	0x08005a37
 80058e0:	08005885 	.word	0x08005885
 80058e4:	08005939 	.word	0x08005939
 80058e8:	08005885 	.word	0x08005885
 80058ec:	08005885 	.word	0x08005885
 80058f0:	080059ff 	.word	0x080059ff
 80058f4:	680b      	ldr	r3, [r1, #0]
 80058f6:	1d1a      	adds	r2, r3, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	600a      	str	r2, [r1, #0]
 80058fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005904:	2301      	movs	r3, #1
 8005906:	e0a3      	b.n	8005a50 <_printf_i+0x1f4>
 8005908:	6825      	ldr	r5, [r4, #0]
 800590a:	6808      	ldr	r0, [r1, #0]
 800590c:	062e      	lsls	r6, r5, #24
 800590e:	f100 0304 	add.w	r3, r0, #4
 8005912:	d50a      	bpl.n	800592a <_printf_i+0xce>
 8005914:	6805      	ldr	r5, [r0, #0]
 8005916:	600b      	str	r3, [r1, #0]
 8005918:	2d00      	cmp	r5, #0
 800591a:	da03      	bge.n	8005924 <_printf_i+0xc8>
 800591c:	232d      	movs	r3, #45	; 0x2d
 800591e:	426d      	negs	r5, r5
 8005920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005924:	485e      	ldr	r0, [pc, #376]	; (8005aa0 <_printf_i+0x244>)
 8005926:	230a      	movs	r3, #10
 8005928:	e019      	b.n	800595e <_printf_i+0x102>
 800592a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800592e:	6805      	ldr	r5, [r0, #0]
 8005930:	600b      	str	r3, [r1, #0]
 8005932:	bf18      	it	ne
 8005934:	b22d      	sxthne	r5, r5
 8005936:	e7ef      	b.n	8005918 <_printf_i+0xbc>
 8005938:	680b      	ldr	r3, [r1, #0]
 800593a:	6825      	ldr	r5, [r4, #0]
 800593c:	1d18      	adds	r0, r3, #4
 800593e:	6008      	str	r0, [r1, #0]
 8005940:	0628      	lsls	r0, r5, #24
 8005942:	d501      	bpl.n	8005948 <_printf_i+0xec>
 8005944:	681d      	ldr	r5, [r3, #0]
 8005946:	e002      	b.n	800594e <_printf_i+0xf2>
 8005948:	0669      	lsls	r1, r5, #25
 800594a:	d5fb      	bpl.n	8005944 <_printf_i+0xe8>
 800594c:	881d      	ldrh	r5, [r3, #0]
 800594e:	4854      	ldr	r0, [pc, #336]	; (8005aa0 <_printf_i+0x244>)
 8005950:	2f6f      	cmp	r7, #111	; 0x6f
 8005952:	bf0c      	ite	eq
 8005954:	2308      	moveq	r3, #8
 8005956:	230a      	movne	r3, #10
 8005958:	2100      	movs	r1, #0
 800595a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800595e:	6866      	ldr	r6, [r4, #4]
 8005960:	60a6      	str	r6, [r4, #8]
 8005962:	2e00      	cmp	r6, #0
 8005964:	bfa2      	ittt	ge
 8005966:	6821      	ldrge	r1, [r4, #0]
 8005968:	f021 0104 	bicge.w	r1, r1, #4
 800596c:	6021      	strge	r1, [r4, #0]
 800596e:	b90d      	cbnz	r5, 8005974 <_printf_i+0x118>
 8005970:	2e00      	cmp	r6, #0
 8005972:	d04d      	beq.n	8005a10 <_printf_i+0x1b4>
 8005974:	4616      	mov	r6, r2
 8005976:	fbb5 f1f3 	udiv	r1, r5, r3
 800597a:	fb03 5711 	mls	r7, r3, r1, r5
 800597e:	5dc7      	ldrb	r7, [r0, r7]
 8005980:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005984:	462f      	mov	r7, r5
 8005986:	42bb      	cmp	r3, r7
 8005988:	460d      	mov	r5, r1
 800598a:	d9f4      	bls.n	8005976 <_printf_i+0x11a>
 800598c:	2b08      	cmp	r3, #8
 800598e:	d10b      	bne.n	80059a8 <_printf_i+0x14c>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	07df      	lsls	r7, r3, #31
 8005994:	d508      	bpl.n	80059a8 <_printf_i+0x14c>
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	6861      	ldr	r1, [r4, #4]
 800599a:	4299      	cmp	r1, r3
 800599c:	bfde      	ittt	le
 800599e:	2330      	movle	r3, #48	; 0x30
 80059a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059a8:	1b92      	subs	r2, r2, r6
 80059aa:	6122      	str	r2, [r4, #16]
 80059ac:	f8cd a000 	str.w	sl, [sp]
 80059b0:	464b      	mov	r3, r9
 80059b2:	aa03      	add	r2, sp, #12
 80059b4:	4621      	mov	r1, r4
 80059b6:	4640      	mov	r0, r8
 80059b8:	f7ff fee2 	bl	8005780 <_printf_common>
 80059bc:	3001      	adds	r0, #1
 80059be:	d14c      	bne.n	8005a5a <_printf_i+0x1fe>
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	b004      	add	sp, #16
 80059c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ca:	4835      	ldr	r0, [pc, #212]	; (8005aa0 <_printf_i+0x244>)
 80059cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	680e      	ldr	r6, [r1, #0]
 80059d4:	061f      	lsls	r7, r3, #24
 80059d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80059da:	600e      	str	r6, [r1, #0]
 80059dc:	d514      	bpl.n	8005a08 <_printf_i+0x1ac>
 80059de:	07d9      	lsls	r1, r3, #31
 80059e0:	bf44      	itt	mi
 80059e2:	f043 0320 	orrmi.w	r3, r3, #32
 80059e6:	6023      	strmi	r3, [r4, #0]
 80059e8:	b91d      	cbnz	r5, 80059f2 <_printf_i+0x196>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	f023 0320 	bic.w	r3, r3, #32
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	2310      	movs	r3, #16
 80059f4:	e7b0      	b.n	8005958 <_printf_i+0xfc>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	f043 0320 	orr.w	r3, r3, #32
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	2378      	movs	r3, #120	; 0x78
 8005a00:	4828      	ldr	r0, [pc, #160]	; (8005aa4 <_printf_i+0x248>)
 8005a02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a06:	e7e3      	b.n	80059d0 <_printf_i+0x174>
 8005a08:	065e      	lsls	r6, r3, #25
 8005a0a:	bf48      	it	mi
 8005a0c:	b2ad      	uxthmi	r5, r5
 8005a0e:	e7e6      	b.n	80059de <_printf_i+0x182>
 8005a10:	4616      	mov	r6, r2
 8005a12:	e7bb      	b.n	800598c <_printf_i+0x130>
 8005a14:	680b      	ldr	r3, [r1, #0]
 8005a16:	6826      	ldr	r6, [r4, #0]
 8005a18:	6960      	ldr	r0, [r4, #20]
 8005a1a:	1d1d      	adds	r5, r3, #4
 8005a1c:	600d      	str	r5, [r1, #0]
 8005a1e:	0635      	lsls	r5, r6, #24
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	d501      	bpl.n	8005a28 <_printf_i+0x1cc>
 8005a24:	6018      	str	r0, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <_printf_i+0x1d2>
 8005a28:	0671      	lsls	r1, r6, #25
 8005a2a:	d5fb      	bpl.n	8005a24 <_printf_i+0x1c8>
 8005a2c:	8018      	strh	r0, [r3, #0]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	6123      	str	r3, [r4, #16]
 8005a32:	4616      	mov	r6, r2
 8005a34:	e7ba      	b.n	80059ac <_printf_i+0x150>
 8005a36:	680b      	ldr	r3, [r1, #0]
 8005a38:	1d1a      	adds	r2, r3, #4
 8005a3a:	600a      	str	r2, [r1, #0]
 8005a3c:	681e      	ldr	r6, [r3, #0]
 8005a3e:	6862      	ldr	r2, [r4, #4]
 8005a40:	2100      	movs	r1, #0
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7fa fbcc 	bl	80001e0 <memchr>
 8005a48:	b108      	cbz	r0, 8005a4e <_printf_i+0x1f2>
 8005a4a:	1b80      	subs	r0, r0, r6
 8005a4c:	6060      	str	r0, [r4, #4]
 8005a4e:	6863      	ldr	r3, [r4, #4]
 8005a50:	6123      	str	r3, [r4, #16]
 8005a52:	2300      	movs	r3, #0
 8005a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a58:	e7a8      	b.n	80059ac <_printf_i+0x150>
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4640      	mov	r0, r8
 8005a62:	47d0      	blx	sl
 8005a64:	3001      	adds	r0, #1
 8005a66:	d0ab      	beq.n	80059c0 <_printf_i+0x164>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	079b      	lsls	r3, r3, #30
 8005a6c:	d413      	bmi.n	8005a96 <_printf_i+0x23a>
 8005a6e:	68e0      	ldr	r0, [r4, #12]
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	4298      	cmp	r0, r3
 8005a74:	bfb8      	it	lt
 8005a76:	4618      	movlt	r0, r3
 8005a78:	e7a4      	b.n	80059c4 <_printf_i+0x168>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4632      	mov	r2, r6
 8005a7e:	4649      	mov	r1, r9
 8005a80:	4640      	mov	r0, r8
 8005a82:	47d0      	blx	sl
 8005a84:	3001      	adds	r0, #1
 8005a86:	d09b      	beq.n	80059c0 <_printf_i+0x164>
 8005a88:	3501      	adds	r5, #1
 8005a8a:	68e3      	ldr	r3, [r4, #12]
 8005a8c:	9903      	ldr	r1, [sp, #12]
 8005a8e:	1a5b      	subs	r3, r3, r1
 8005a90:	42ab      	cmp	r3, r5
 8005a92:	dcf2      	bgt.n	8005a7a <_printf_i+0x21e>
 8005a94:	e7eb      	b.n	8005a6e <_printf_i+0x212>
 8005a96:	2500      	movs	r5, #0
 8005a98:	f104 0619 	add.w	r6, r4, #25
 8005a9c:	e7f5      	b.n	8005a8a <_printf_i+0x22e>
 8005a9e:	bf00      	nop
 8005aa0:	08005ec9 	.word	0x08005ec9
 8005aa4:	08005eda 	.word	0x08005eda

08005aa8 <memcpy>:
 8005aa8:	440a      	add	r2, r1
 8005aaa:	4291      	cmp	r1, r2
 8005aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ab0:	d100      	bne.n	8005ab4 <memcpy+0xc>
 8005ab2:	4770      	bx	lr
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005abe:	4291      	cmp	r1, r2
 8005ac0:	d1f9      	bne.n	8005ab6 <memcpy+0xe>
 8005ac2:	bd10      	pop	{r4, pc}

08005ac4 <memmove>:
 8005ac4:	4288      	cmp	r0, r1
 8005ac6:	b510      	push	{r4, lr}
 8005ac8:	eb01 0402 	add.w	r4, r1, r2
 8005acc:	d902      	bls.n	8005ad4 <memmove+0x10>
 8005ace:	4284      	cmp	r4, r0
 8005ad0:	4623      	mov	r3, r4
 8005ad2:	d807      	bhi.n	8005ae4 <memmove+0x20>
 8005ad4:	1e43      	subs	r3, r0, #1
 8005ad6:	42a1      	cmp	r1, r4
 8005ad8:	d008      	beq.n	8005aec <memmove+0x28>
 8005ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ade:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ae2:	e7f8      	b.n	8005ad6 <memmove+0x12>
 8005ae4:	4402      	add	r2, r0
 8005ae6:	4601      	mov	r1, r0
 8005ae8:	428a      	cmp	r2, r1
 8005aea:	d100      	bne.n	8005aee <memmove+0x2a>
 8005aec:	bd10      	pop	{r4, pc}
 8005aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005af2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005af6:	e7f7      	b.n	8005ae8 <memmove+0x24>

08005af8 <_free_r>:
 8005af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005afa:	2900      	cmp	r1, #0
 8005afc:	d048      	beq.n	8005b90 <_free_r+0x98>
 8005afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b02:	9001      	str	r0, [sp, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f1a1 0404 	sub.w	r4, r1, #4
 8005b0a:	bfb8      	it	lt
 8005b0c:	18e4      	addlt	r4, r4, r3
 8005b0e:	f000 f8d3 	bl	8005cb8 <__malloc_lock>
 8005b12:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <_free_r+0x9c>)
 8005b14:	9801      	ldr	r0, [sp, #4]
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	4615      	mov	r5, r2
 8005b1a:	b933      	cbnz	r3, 8005b2a <_free_r+0x32>
 8005b1c:	6063      	str	r3, [r4, #4]
 8005b1e:	6014      	str	r4, [r2, #0]
 8005b20:	b003      	add	sp, #12
 8005b22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b26:	f000 b8cd 	b.w	8005cc4 <__malloc_unlock>
 8005b2a:	42a3      	cmp	r3, r4
 8005b2c:	d90b      	bls.n	8005b46 <_free_r+0x4e>
 8005b2e:	6821      	ldr	r1, [r4, #0]
 8005b30:	1862      	adds	r2, r4, r1
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bf04      	itt	eq
 8005b36:	681a      	ldreq	r2, [r3, #0]
 8005b38:	685b      	ldreq	r3, [r3, #4]
 8005b3a:	6063      	str	r3, [r4, #4]
 8005b3c:	bf04      	itt	eq
 8005b3e:	1852      	addeq	r2, r2, r1
 8005b40:	6022      	streq	r2, [r4, #0]
 8005b42:	602c      	str	r4, [r5, #0]
 8005b44:	e7ec      	b.n	8005b20 <_free_r+0x28>
 8005b46:	461a      	mov	r2, r3
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	b10b      	cbz	r3, 8005b50 <_free_r+0x58>
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	d9fa      	bls.n	8005b46 <_free_r+0x4e>
 8005b50:	6811      	ldr	r1, [r2, #0]
 8005b52:	1855      	adds	r5, r2, r1
 8005b54:	42a5      	cmp	r5, r4
 8005b56:	d10b      	bne.n	8005b70 <_free_r+0x78>
 8005b58:	6824      	ldr	r4, [r4, #0]
 8005b5a:	4421      	add	r1, r4
 8005b5c:	1854      	adds	r4, r2, r1
 8005b5e:	42a3      	cmp	r3, r4
 8005b60:	6011      	str	r1, [r2, #0]
 8005b62:	d1dd      	bne.n	8005b20 <_free_r+0x28>
 8005b64:	681c      	ldr	r4, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	6053      	str	r3, [r2, #4]
 8005b6a:	4421      	add	r1, r4
 8005b6c:	6011      	str	r1, [r2, #0]
 8005b6e:	e7d7      	b.n	8005b20 <_free_r+0x28>
 8005b70:	d902      	bls.n	8005b78 <_free_r+0x80>
 8005b72:	230c      	movs	r3, #12
 8005b74:	6003      	str	r3, [r0, #0]
 8005b76:	e7d3      	b.n	8005b20 <_free_r+0x28>
 8005b78:	6825      	ldr	r5, [r4, #0]
 8005b7a:	1961      	adds	r1, r4, r5
 8005b7c:	428b      	cmp	r3, r1
 8005b7e:	bf04      	itt	eq
 8005b80:	6819      	ldreq	r1, [r3, #0]
 8005b82:	685b      	ldreq	r3, [r3, #4]
 8005b84:	6063      	str	r3, [r4, #4]
 8005b86:	bf04      	itt	eq
 8005b88:	1949      	addeq	r1, r1, r5
 8005b8a:	6021      	streq	r1, [r4, #0]
 8005b8c:	6054      	str	r4, [r2, #4]
 8005b8e:	e7c7      	b.n	8005b20 <_free_r+0x28>
 8005b90:	b003      	add	sp, #12
 8005b92:	bd30      	pop	{r4, r5, pc}
 8005b94:	20000094 	.word	0x20000094

08005b98 <_malloc_r>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	1ccd      	adds	r5, r1, #3
 8005b9c:	f025 0503 	bic.w	r5, r5, #3
 8005ba0:	3508      	adds	r5, #8
 8005ba2:	2d0c      	cmp	r5, #12
 8005ba4:	bf38      	it	cc
 8005ba6:	250c      	movcc	r5, #12
 8005ba8:	2d00      	cmp	r5, #0
 8005baa:	4606      	mov	r6, r0
 8005bac:	db01      	blt.n	8005bb2 <_malloc_r+0x1a>
 8005bae:	42a9      	cmp	r1, r5
 8005bb0:	d903      	bls.n	8005bba <_malloc_r+0x22>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	6033      	str	r3, [r6, #0]
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bba:	f000 f87d 	bl	8005cb8 <__malloc_lock>
 8005bbe:	4921      	ldr	r1, [pc, #132]	; (8005c44 <_malloc_r+0xac>)
 8005bc0:	680a      	ldr	r2, [r1, #0]
 8005bc2:	4614      	mov	r4, r2
 8005bc4:	b99c      	cbnz	r4, 8005bee <_malloc_r+0x56>
 8005bc6:	4f20      	ldr	r7, [pc, #128]	; (8005c48 <_malloc_r+0xb0>)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	b923      	cbnz	r3, 8005bd6 <_malloc_r+0x3e>
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f000 f862 	bl	8005c98 <_sbrk_r>
 8005bd4:	6038      	str	r0, [r7, #0]
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f000 f85d 	bl	8005c98 <_sbrk_r>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	d123      	bne.n	8005c2a <_malloc_r+0x92>
 8005be2:	230c      	movs	r3, #12
 8005be4:	6033      	str	r3, [r6, #0]
 8005be6:	4630      	mov	r0, r6
 8005be8:	f000 f86c 	bl	8005cc4 <__malloc_unlock>
 8005bec:	e7e3      	b.n	8005bb6 <_malloc_r+0x1e>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	1b5b      	subs	r3, r3, r5
 8005bf2:	d417      	bmi.n	8005c24 <_malloc_r+0x8c>
 8005bf4:	2b0b      	cmp	r3, #11
 8005bf6:	d903      	bls.n	8005c00 <_malloc_r+0x68>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	441c      	add	r4, r3
 8005bfc:	6025      	str	r5, [r4, #0]
 8005bfe:	e004      	b.n	8005c0a <_malloc_r+0x72>
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	42a2      	cmp	r2, r4
 8005c04:	bf0c      	ite	eq
 8005c06:	600b      	streq	r3, [r1, #0]
 8005c08:	6053      	strne	r3, [r2, #4]
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f000 f85a 	bl	8005cc4 <__malloc_unlock>
 8005c10:	f104 000b 	add.w	r0, r4, #11
 8005c14:	1d23      	adds	r3, r4, #4
 8005c16:	f020 0007 	bic.w	r0, r0, #7
 8005c1a:	1ac2      	subs	r2, r0, r3
 8005c1c:	d0cc      	beq.n	8005bb8 <_malloc_r+0x20>
 8005c1e:	1a1b      	subs	r3, r3, r0
 8005c20:	50a3      	str	r3, [r4, r2]
 8005c22:	e7c9      	b.n	8005bb8 <_malloc_r+0x20>
 8005c24:	4622      	mov	r2, r4
 8005c26:	6864      	ldr	r4, [r4, #4]
 8005c28:	e7cc      	b.n	8005bc4 <_malloc_r+0x2c>
 8005c2a:	1cc4      	adds	r4, r0, #3
 8005c2c:	f024 0403 	bic.w	r4, r4, #3
 8005c30:	42a0      	cmp	r0, r4
 8005c32:	d0e3      	beq.n	8005bfc <_malloc_r+0x64>
 8005c34:	1a21      	subs	r1, r4, r0
 8005c36:	4630      	mov	r0, r6
 8005c38:	f000 f82e 	bl	8005c98 <_sbrk_r>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d1dd      	bne.n	8005bfc <_malloc_r+0x64>
 8005c40:	e7cf      	b.n	8005be2 <_malloc_r+0x4a>
 8005c42:	bf00      	nop
 8005c44:	20000094 	.word	0x20000094
 8005c48:	20000098 	.word	0x20000098

08005c4c <_realloc_r>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	4607      	mov	r7, r0
 8005c50:	4614      	mov	r4, r2
 8005c52:	460e      	mov	r6, r1
 8005c54:	b921      	cbnz	r1, 8005c60 <_realloc_r+0x14>
 8005c56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	f7ff bf9c 	b.w	8005b98 <_malloc_r>
 8005c60:	b922      	cbnz	r2, 8005c6c <_realloc_r+0x20>
 8005c62:	f7ff ff49 	bl	8005af8 <_free_r>
 8005c66:	4625      	mov	r5, r4
 8005c68:	4628      	mov	r0, r5
 8005c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c6c:	f000 f830 	bl	8005cd0 <_malloc_usable_size_r>
 8005c70:	42a0      	cmp	r0, r4
 8005c72:	d20f      	bcs.n	8005c94 <_realloc_r+0x48>
 8005c74:	4621      	mov	r1, r4
 8005c76:	4638      	mov	r0, r7
 8005c78:	f7ff ff8e 	bl	8005b98 <_malloc_r>
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d0f2      	beq.n	8005c68 <_realloc_r+0x1c>
 8005c82:	4631      	mov	r1, r6
 8005c84:	4622      	mov	r2, r4
 8005c86:	f7ff ff0f 	bl	8005aa8 <memcpy>
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	f7ff ff33 	bl	8005af8 <_free_r>
 8005c92:	e7e9      	b.n	8005c68 <_realloc_r+0x1c>
 8005c94:	4635      	mov	r5, r6
 8005c96:	e7e7      	b.n	8005c68 <_realloc_r+0x1c>

08005c98 <_sbrk_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4d06      	ldr	r5, [pc, #24]	; (8005cb4 <_sbrk_r+0x1c>)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	4608      	mov	r0, r1
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	f7fb fb82 	bl	80013ac <_sbrk>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d102      	bne.n	8005cb2 <_sbrk_r+0x1a>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	b103      	cbz	r3, 8005cb2 <_sbrk_r+0x1a>
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	2000023c 	.word	0x2000023c

08005cb8 <__malloc_lock>:
 8005cb8:	4801      	ldr	r0, [pc, #4]	; (8005cc0 <__malloc_lock+0x8>)
 8005cba:	f000 b811 	b.w	8005ce0 <__retarget_lock_acquire_recursive>
 8005cbe:	bf00      	nop
 8005cc0:	20000244 	.word	0x20000244

08005cc4 <__malloc_unlock>:
 8005cc4:	4801      	ldr	r0, [pc, #4]	; (8005ccc <__malloc_unlock+0x8>)
 8005cc6:	f000 b80c 	b.w	8005ce2 <__retarget_lock_release_recursive>
 8005cca:	bf00      	nop
 8005ccc:	20000244 	.word	0x20000244

08005cd0 <_malloc_usable_size_r>:
 8005cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cd4:	1f18      	subs	r0, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bfbc      	itt	lt
 8005cda:	580b      	ldrlt	r3, [r1, r0]
 8005cdc:	18c0      	addlt	r0, r0, r3
 8005cde:	4770      	bx	lr

08005ce0 <__retarget_lock_acquire_recursive>:
 8005ce0:	4770      	bx	lr

08005ce2 <__retarget_lock_release_recursive>:
 8005ce2:	4770      	bx	lr

08005ce4 <_init>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr

08005cf0 <_fini>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	bf00      	nop
 8005cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf6:	bc08      	pop	{r3}
 8005cf8:	469e      	mov	lr, r3
 8005cfa:	4770      	bx	lr
